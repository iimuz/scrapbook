<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Softwares on しさく</title><link>https://iimuz.github.io/scrapbook/software/</link><description>Recent content in Softwares on しさく</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 08 Jan 2020 12:22:08 +0900</lastBuildDate><atom:link href="https://iimuz.github.io/scrapbook/software/index.xml" rel="self" type="application/rss+xml"/><item><title>複数アプリをまとめて管理</title><link>https://iimuz.github.io/scrapbook/software/manage_web_app_for_multi_account/</link><pubDate>Wed, 08 Jan 2020 12:22:08 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/manage_web_app_for_multi_account/</guid><description>複数のアカウントでアプリを利用している場合の管理ツール。
Biscuit Franz Rambox Shift Station 参考資料 2019.6.25 Qiita: ブラウザ Biscuit の開発で得た知見その１ - プロトタイプ/本実装/Electron 2019.8.4 お菓子じゃないよ！ Web アプリ統括ブラウザの「biscuit」が使いやすい 2019.7.13 Web サービスの 1 画面統合アプリは「Station」が最高でしたが、グループ化して見やすい「Biscuit」も最高でした 2019.11.7 アプリ管理ツール、Station と Rambox と Biscuit からふたつ使う！</description></item><item><title>技術系の情報収集</title><link>https://iimuz.github.io/scrapbook/software/technology_info/</link><pubDate>Sun, 05 Jan 2020 21:25:01 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/technology_info/</guid><description>情報収集が出来そうなリソース群。 脚注は、知らなかったサイトを最初に知った記事に対して付与しています。
ニュース系サイト [Hacker News][ycombinator]: 海外の技術系ニュースメディア [Menthas][menthas]: 個人で開発されたキュレーションサイト [TechCrunch][techcrunch]: テクノロジーニュースメディア [TechFeed][techfeed]: テクノロジー系が中心のニュースメディア1 []: https://menthas.com/ [techcrunch]: https://jp.techcrunch.com/ [techfeed]: https://techfeed.io/ [ycombinator]: https://news.ycombinator.com/
ソーシャルメディア Frasco: 海外の話題記事を翻訳して掲載1 POSTD: 海外サイトのブログ記事を翻訳記事を掲載1 Qiita: エンジニアの情報共有サイト Qrunch: 後発の技術ブログサイト 企業ブログ DeNA Engineers&amp;rsquo; Blog: DeNA が運営している技術ブログ Developers.IO: クラスメソッド発「やってみた」系技術メディア: クラスメソッド社が運営している技術ブログ Hatena Developer Blog -はてな開発者ブログ-: はてなブログの技術ブログ Mercari Engineering Blog: メルカリが運営している技術ブログ Q&amp;amp;A CodeProject: ソースコード Tips を提供している海外のサイト1 Quora: QA サイト Reddit: 技術特価ではないが海外の QA サイト Stack Overflow: 英語だが巨大な QA サイト Stack Overflow(JP): 日本版の Stack Overflow teratail: Stack Overflow に似た日本の QA サイト 勉強 connpass TECH PLAY Udemy その他 技術書典 2019.</description></item><item><title>Hugo Tips</title><link>https://iimuz.github.io/scrapbook/software/hugo_tips/</link><pubDate>Sun, 05 Jan 2020 16:39:47 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hugo_tips/</guid><description>Hugo の Tips を記載します。
脚注の記載方法 footnote を利用することができます。(1) 書き方は下記のようになります。
hoge text[^a] [^a]: footnote hoge 2018.10.31 Hugoで脚注（footnote）を使用する方法&amp;#8617;</description></item><item><title>Flask</title><link>https://iimuz.github.io/scrapbook/software/flask/</link><pubDate>Fri, 03 Jan 2020 19:44:50 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/flask/</guid><description> Wikipedia: Flask</description></item><item><title>Matplotlib</title><link>https://iimuz.github.io/scrapbook/software/matplotlib/</link><pubDate>Fri, 03 Jan 2020 19:36:21 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/matplotlib/</guid><description> Wikipedia: Matplotlib</description></item><item><title>Transmission Control Protocol</title><link>https://iimuz.github.io/scrapbook/software/tcp/</link><pubDate>Fri, 03 Jan 2020 19:24:42 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/tcp/</guid><description> Wikipedia: Transmission Control Protocol</description></item><item><title>PowerShell</title><link>https://iimuz.github.io/scrapbook/software/powershell/</link><pubDate>Fri, 03 Jan 2020 19:21:24 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/powershell/</guid><description> Wikipedia: PowerShell</description></item><item><title>C Sharp#</title><link>https://iimuz.github.io/scrapbook/software/csharp/</link><pubDate>Fri, 03 Jan 2020 19:17:57 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/csharp/</guid><description> Wikipedia: C Sharp</description></item><item><title>GNU Compiler Collection</title><link>https://iimuz.github.io/scrapbook/software/gcc/</link><pubDate>Fri, 03 Jan 2020 19:15:28 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcc/</guid><description> Wikipedia: GNU コンパイラコレクション</description></item><item><title>C++</title><link>https://iimuz.github.io/scrapbook/software/cpp/</link><pubDate>Fri, 03 Jan 2020 19:10:58 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cpp/</guid><description> Wikipedia: C++</description></item><item><title>timeout</title><link>https://iimuz.github.io/scrapbook/software/timeout/</link><pubDate>Fri, 03 Jan 2020 19:06:18 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/timeout/</guid><description> gnu.org timeout-invocation</description></item><item><title>ldd</title><link>https://iimuz.github.io/scrapbook/software/ldd/</link><pubDate>Fri, 03 Jan 2020 19:03:58 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/ldd/</guid><description> Wikipedia: Ldd (Unix)</description></item><item><title>Unix</title><link>https://iimuz.github.io/scrapbook/software/unix/</link><pubDate>Fri, 03 Jan 2020 19:02:35 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/unix/</guid><description> Wikipedia: UNIX</description></item><item><title>Linux</title><link>https://iimuz.github.io/scrapbook/software/linux/</link><pubDate>Fri, 03 Jan 2020 19:01:16 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/linux/</guid><description> Wikipedia: Linux</description></item><item><title>cURL</title><link>https://iimuz.github.io/scrapbook/software/curl/</link><pubDate>Fri, 03 Jan 2020 18:58:30 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/curl/</guid><description> Wikipedia: cURL</description></item><item><title>Bash</title><link>https://iimuz.github.io/scrapbook/software/bash/</link><pubDate>Fri, 03 Jan 2020 18:55:39 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/bash/</guid><description> [Wikipedia: Bash]</description></item><item><title>Windows Subsystem for Linux</title><link>https://iimuz.github.io/scrapbook/software/wsl/</link><pubDate>Fri, 03 Jan 2020 18:50:36 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/wsl/</guid><description> Wikipedia: Windows Subsystem for Linux</description></item><item><title>Julia</title><link>https://iimuz.github.io/scrapbook/software/julia/</link><pubDate>Fri, 03 Jan 2020 18:41:15 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/julia/</guid><description> Wikipedia: Julia(プログラミング言語)</description></item><item><title>Vue.js</title><link>https://iimuz.github.io/scrapbook/software/vue/</link><pubDate>Fri, 03 Jan 2020 18:39:19 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vue/</guid><description> Wikipedia: Vue.js</description></item><item><title>Vue CLI</title><link>https://iimuz.github.io/scrapbook/software/vue_cli/</link><pubDate>Fri, 03 Jan 2020 18:35:26 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vue_cli/</guid><description> Vue CLI</description></item><item><title>Clean Architecture</title><link>https://iimuz.github.io/scrapbook/software/clean_architecture/</link><pubDate>Fri, 03 Jan 2020 18:31:22 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/clean_architecture/</guid><description> Wikipedia: Robert C. Martin Clean Architecture: A Craftsman's Guide to Software Structure and Design</description></item><item><title>A3rt</title><link>https://iimuz.github.io/scrapbook/software/a3rt/</link><pubDate>Fri, 03 Jan 2020 18:23:03 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/a3rt/</guid><description> A3RT</description></item><item><title>Transport Layer Security</title><link>https://iimuz.github.io/scrapbook/software/tls/</link><pubDate>Fri, 03 Jan 2020 18:20:16 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/tls/</guid><description> Wikipedia: Transport Layer Security</description></item><item><title>SSL</title><link>https://iimuz.github.io/scrapbook/software/ssl/</link><pubDate>Fri, 03 Jan 2020 18:19:42 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/ssl/</guid><description> Wikipedia: Transport Layer Security</description></item><item><title>HTTPS</title><link>https://iimuz.github.io/scrapbook/software/https/</link><pubDate>Fri, 03 Jan 2020 18:16:59 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/https/</guid><description> Wikipedia: HTTPS</description></item><item><title>Hypertext Transfer Protocol</title><link>https://iimuz.github.io/scrapbook/software/http/</link><pubDate>Fri, 03 Jan 2020 18:15:52 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/http/</guid><description> Wikipedia: Hypertext Transfer Protocol</description></item><item><title>Java</title><link>https://iimuz.github.io/scrapbook/software/java/</link><pubDate>Fri, 03 Jan 2020 18:12:16 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/java/</guid><description> Wikipedia: Java</description></item><item><title>Go Language</title><link>https://iimuz.github.io/scrapbook/software/golang/</link><pubDate>Fri, 03 Jan 2020 17:56:35 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/golang/</guid><description> Wikipedia: Go(プログラミング言語)</description></item><item><title>TopCoder</title><link>https://iimuz.github.io/scrapbook/software/topcoder/</link><pubDate>Fri, 03 Jan 2020 17:51:48 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/topcoder/</guid><description> Wikipedia: TopCoder</description></item><item><title>Kaggle</title><link>https://iimuz.github.io/scrapbook/software/kaggle/</link><pubDate>Fri, 03 Jan 2020 17:50:06 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/kaggle/</guid><description> Wikipedia: Kaggle</description></item><item><title>AtCoder</title><link>https://iimuz.github.io/scrapbook/software/atcoder/</link><pubDate>Fri, 03 Jan 2020 17:48:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/atcoder/</guid><description> Wikipedia: AtCoder</description></item><item><title>Trello</title><link>https://iimuz.github.io/scrapbook/software/trello/</link><pubDate>Fri, 03 Jan 2020 13:09:18 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/trello/</guid><description> Wikipedia: Trello</description></item><item><title>Integromat</title><link>https://iimuz.github.io/scrapbook/software/integromat/</link><pubDate>Fri, 03 Jan 2020 13:08:12 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/integromat/</guid><description> Integormat</description></item><item><title>Speaker Deck</title><link>https://iimuz.github.io/scrapbook/software/speaker_deck/</link><pubDate>Fri, 03 Jan 2020 13:03:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/speaker_deck/</guid><description> Speaker Deck</description></item><item><title>Scratch</title><link>https://iimuz.github.io/scrapbook/software/scratch/</link><pubDate>Fri, 03 Jan 2020 13:00:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/scratch/</guid><description> Wikipedia: Scratch(プログラミング言語)</description></item><item><title>Qiita</title><link>https://iimuz.github.io/scrapbook/software/qiita/</link><pubDate>Fri, 03 Jan 2020 12:46:14 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/qiita/</guid><description> Wikipedia: Qiita</description></item><item><title>Slack</title><link>https://iimuz.github.io/scrapbook/software/slack/</link><pubDate>Fri, 03 Jan 2020 12:41:49 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/slack/</guid><description> Wikipedia: Slack(ソフトウェア)</description></item><item><title>Metatrader</title><link>https://iimuz.github.io/scrapbook/software/metatrader/</link><pubDate>Fri, 03 Jan 2020 12:39:22 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/metatrader/</guid><description> Wikipedia: Metatrader</description></item><item><title>Portable Document Format</title><link>https://iimuz.github.io/scrapbook/software/pdf/</link><pubDate>Fri, 03 Jan 2020 12:33:04 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/pdf/</guid><description> Wikipedia: Portable Document Format</description></item><item><title>Pandoc</title><link>https://iimuz.github.io/scrapbook/software/pandoc/</link><pubDate>Fri, 03 Jan 2020 12:28:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/pandoc/</guid><description> Wikipedia: Pandoc</description></item><item><title>Jasper</title><link>https://iimuz.github.io/scrapbook/software/jasper/</link><pubDate>Fri, 03 Jan 2020 12:23:27 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jasper/</guid><description> [Jasper][jasper]</description></item><item><title>Cabocha</title><link>https://iimuz.github.io/scrapbook/software/cabocha/</link><pubDate>Fri, 03 Jan 2020 12:11:07 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cabocha/</guid><description> Wikipedia: 構文解析</description></item><item><title>Hubot</title><link>https://iimuz.github.io/scrapbook/software/hubot/</link><pubDate>Fri, 03 Jan 2020 12:05:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hubot/</guid><description> Hubot</description></item><item><title>Gmail</title><link>https://iimuz.github.io/scrapbook/software/gmail/</link><pubDate>Fri, 03 Jan 2020 12:01:03 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gmail/</guid><description> Wikipedia: Gmail</description></item><item><title>JavaScript</title><link>https://iimuz.github.io/scrapbook/software/javascript/</link><pubDate>Fri, 03 Jan 2020 11:55:20 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/javascript/</guid><description> Wikipedia: JavaScript</description></item><item><title>CoffeeScript</title><link>https://iimuz.github.io/scrapbook/software/coffeescript/</link><pubDate>Fri, 03 Jan 2020 11:54:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coffeescript/</guid><description> Wikipedia: CoffeeScript</description></item><item><title>Electron</title><link>https://iimuz.github.io/scrapbook/software/electron/</link><pubDate>Fri, 03 Jan 2020 11:52:47 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/electron/</guid><description> Wikipedia: Electron(ソフトウェア)</description></item><item><title>Secure Shell</title><link>https://iimuz.github.io/scrapbook/software/ssh/</link><pubDate>Fri, 03 Jan 2020 10:21:54 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/ssh/</guid><description> Wikipedia: Secure Shell</description></item><item><title>Apache Subversion</title><link>https://iimuz.github.io/scrapbook/software/svn/</link><pubDate>Fri, 03 Jan 2020 10:12:31 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/svn/</guid><description> Wikipedia: Apache Subversion</description></item><item><title>Markdown</title><link>https://iimuz.github.io/scrapbook/software/markdown/</link><pubDate>Fri, 03 Jan 2020 03:31:53 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/markdown/</guid><description> Wikipedia: Markdown</description></item><item><title>SPICE</title><link>https://iimuz.github.io/scrapbook/software/spice/</link><pubDate>Fri, 03 Jan 2020 03:18:10 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/spice/</guid><description> SPICE</description></item><item><title>.NET Framework</title><link>https://iimuz.github.io/scrapbook/software/dotnetframework/</link><pubDate>Fri, 03 Jan 2020 03:13:22 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/dotnetframework/</guid><description> Wikipedia: .NET Framework</description></item><item><title>GhostText</title><link>https://iimuz.github.io/scrapbook/software/ghosttext/</link><pubDate>Fri, 03 Jan 2020 02:58:54 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/ghosttext/</guid><description> GitHub: GhostText/GhostText</description></item><item><title>Fess</title><link>https://iimuz.github.io/scrapbook/software/fess/</link><pubDate>Fri, 03 Jan 2020 02:47:19 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/fess/</guid><description> 全文検索サーバFess</description></item><item><title>Google Drive</title><link>https://iimuz.github.io/scrapbook/software/google_drive/</link><pubDate>Fri, 03 Jan 2020 02:43:49 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google_drive/</guid><description> Wikipedia: Google ドライブ</description></item><item><title>CUDA</title><link>https://iimuz.github.io/scrapbook/software/cuda/</link><pubDate>Fri, 03 Jan 2020 02:40:49 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cuda/</guid><description> Wikipedia: CUDA</description></item><item><title>cmd.exe</title><link>https://iimuz.github.io/scrapbook/software/cmd/</link><pubDate>Fri, 03 Jan 2020 02:39:01 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cmd/</guid><description> Wikipedia: Cmd.exe</description></item><item><title>Chocolatey</title><link>https://iimuz.github.io/scrapbook/software/chocolatey/</link><pubDate>Fri, 03 Jan 2020 02:33:39 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chocolatey/</guid><description> Wikipedia: NuGet#Chocolatey</description></item><item><title>Travis CI</title><link>https://iimuz.github.io/scrapbook/software/travisci/</link><pubDate>Fri, 03 Jan 2020 01:58:20 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/travisci/</guid><description> Wikipedia: Travis CI</description></item><item><title>GitLab</title><link>https://iimuz.github.io/scrapbook/software/gitlab/</link><pubDate>Fri, 03 Jan 2020 01:29:28 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gitlab/</guid><description> Wikipedia: GitLab</description></item><item><title>GNU Privacy Guard</title><link>https://iimuz.github.io/scrapbook/software/gpg/</link><pubDate>Fri, 03 Jan 2020 01:15:01 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gpg/</guid><description> Wikipedia: GNU Privacy Guard</description></item><item><title>Terminal</title><link>https://iimuz.github.io/scrapbook/software/terminal/</link><pubDate>Fri, 03 Jan 2020 00:34:55 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/terminal/</guid><description> Wikipedia: 端末エミュレータ TUI ツール docui: docker の操作ができるツール1 ff: ファイラーツール1 lazygit: git を操作できるツール1 json: jq: json を操作できるツール1 tson: json を操作できるツール1 プロセスビューワ gotop: top コマンドの便利版 pst: プロセスを簡単に kill するためのツール1 2019.11.26 Qiita [おすすめ]ターミナルでの作業効率が爆上げする TUI ツール 5 選&amp;#8617;</description></item><item><title>Google Photos</title><link>https://iimuz.github.io/scrapbook/software/google_photos/</link><pubDate>Thu, 02 Jan 2020 23:21:58 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google_photos/</guid><description> Wikipedia: Google フォト</description></item><item><title>Google Compute Engine</title><link>https://iimuz.github.io/scrapbook/software/gce/</link><pubDate>Thu, 02 Jan 2020 23:08:48 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gce/</guid><description> Google Compute Engine</description></item><item><title>Google Chrome</title><link>https://iimuz.github.io/scrapbook/software/chrome/</link><pubDate>Thu, 02 Jan 2020 23:06:54 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chrome/</guid><description> Wikipedia: Google Chrome</description></item><item><title>Google Apps Script (GAS)</title><link>https://iimuz.github.io/scrapbook/software/gas/</link><pubDate>Thu, 02 Jan 2020 23:04:30 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gas/</guid><description> Wikipedia: Google Apps Script</description></item><item><title>Microsoft Windows</title><link>https://iimuz.github.io/scrapbook/software/windows/</link><pubDate>Thu, 02 Jan 2020 22:54:01 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/windows/</guid><description> Wikipedia: Microsoft Windows</description></item><item><title>Unity</title><link>https://iimuz.github.io/scrapbook/software/unity/</link><pubDate>Thu, 02 Jan 2020 21:43:42 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/unity/</guid><description> Wikipedia: Unity(ゲームエンジン)</description></item><item><title>Visual Studio Code</title><link>https://iimuz.github.io/scrapbook/software/vscode/</link><pubDate>Thu, 02 Jan 2020 19:53:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode/</guid><description> Wikipedia: Visual Studio Code</description></item><item><title>Microsoft Visual Studio</title><link>https://iimuz.github.io/scrapbook/software/visualstudio/</link><pubDate>Thu, 02 Jan 2020 19:51:44 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/visualstudio/</guid><description> Wikipedia: Microsoft Visual Studio</description></item><item><title>Neovim</title><link>https://iimuz.github.io/scrapbook/software/neovim/</link><pubDate>Thu, 02 Jan 2020 19:49:12 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/neovim/</guid><description> Neovim Wikipedia: Vim#Neovim</description></item><item><title>vim</title><link>https://iimuz.github.io/scrapbook/software/vim/</link><pubDate>Thu, 02 Jan 2020 19:48:07 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vim/</guid><description> Wikipedia: Vim</description></item><item><title>Qt</title><link>https://iimuz.github.io/scrapbook/software/qt/</link><pubDate>Thu, 02 Jan 2020 19:47:07 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/qt/</guid><description> Wikipedia: Qt</description></item><item><title>Point Cloud Library</title><link>https://iimuz.github.io/scrapbook/software/point-cloud-library/</link><pubDate>Thu, 02 Jan 2020 19:46:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/point-cloud-library/</guid><description> Wikipedia: Point Cloud Library</description></item><item><title>Minecraft</title><link>https://iimuz.github.io/scrapbook/software/minecraft/</link><pubDate>Thu, 02 Jan 2020 19:43:18 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/minecraft/</guid><description> Minecraft Wikipedia: Minecraft</description></item><item><title>Jenkins</title><link>https://iimuz.github.io/scrapbook/software/jenkins/</link><pubDate>Thu, 02 Jan 2020 19:42:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jenkins/</guid><description> Wikipedia: Jenkins</description></item><item><title>Jekyll</title><link>https://iimuz.github.io/scrapbook/software/jekyll/</link><pubDate>Thu, 02 Jan 2020 19:40:50 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jekyll/</guid><description> Wikiepdia: Jekyll(Software)</description></item><item><title>Hyper</title><link>https://iimuz.github.io/scrapbook/software/hyper/</link><pubDate>Thu, 02 Jan 2020 19:36:27 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hyper/</guid><description> Hyper</description></item><item><title>Hugo</title><link>https://iimuz.github.io/scrapbook/software/hugo/</link><pubDate>Thu, 02 Jan 2020 19:35:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hugo/</guid><description> Hugo</description></item><item><title>Homebrew</title><link>https://iimuz.github.io/scrapbook/software/homebrew/</link><pubDate>Thu, 02 Jan 2020 19:33:38 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/homebrew/</guid><description> Wikipedia: Homebrew(パッケージ管理システム)</description></item><item><title>Heroku</title><link>https://iimuz.github.io/scrapbook/software/heroku/</link><pubDate>Thu, 02 Jan 2020 19:32:08 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/heroku/</guid><description> [Wikipedia: Heroku][heroku]</description></item><item><title>git</title><link>https://iimuz.github.io/scrapbook/software/git/</link><pubDate>Thu, 02 Jan 2020 19:30:52 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/git/</guid><description> Wikipedia: Git</description></item><item><title>Google Cloud Platform</title><link>https://iimuz.github.io/scrapbook/software/gcp/</link><pubDate>Thu, 02 Jan 2020 19:29:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcp/</guid><description> Wikipedia: Google Cloud Platform</description></item><item><title>Google Colaboratory</title><link>https://iimuz.github.io/scrapbook/software/colaboratoy/</link><pubDate>Thu, 02 Jan 2020 19:27:30 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/colaboratoy/</guid><description> Wikipedia: Project Jupyter#Colaboratory</description></item><item><title>Blender</title><link>https://iimuz.github.io/scrapbook/software/blender/</link><pubDate>Thu, 02 Jan 2020 19:26:14 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blender/</guid><description> Wikipedia: Blender</description></item><item><title>GitHub</title><link>https://iimuz.github.io/scrapbook/software/github/</link><pubDate>Thu, 02 Jan 2020 19:14:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/github/</guid><description> [GitHub.co.jp][gihtub-jp] Wikipedia: GitHub</description></item><item><title>Atom</title><link>https://iimuz.github.io/scrapbook/software/atom/</link><pubDate>Thu, 02 Jan 2020 19:11:57 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/atom/</guid><description> Atom Wikipedia: Atom(テキストエディタ)</description></item><item><title>画像処理</title><link>https://iimuz.github.io/scrapbook/software/image_processing/</link><pubDate>Thu, 02 Jan 2020 18:45:34 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/image_processing/</guid><description> Wikipedia: 画像処理</description></item><item><title>Python</title><link>https://iimuz.github.io/scrapbook/software/python/</link><pubDate>Thu, 02 Jan 2020 18:36:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/python/</guid><description> Python Japan Wikipedia: Python</description></item><item><title>Ruby</title><link>https://iimuz.github.io/scrapbook/software/ruby/</link><pubDate>Thu, 02 Jan 2020 18:34:15 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/ruby/</guid><description> Ruby Wikipedia: Ruby</description></item><item><title>Docker</title><link>https://iimuz.github.io/scrapbook/software/docker/</link><pubDate>Thu, 02 Jan 2020 17:22:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker/</guid><description> Wikipedia: Docker</description></item><item><title>Google Cloud Functions</title><link>https://iimuz.github.io/scrapbook/software/gcf/</link><pubDate>Thu, 02 Jan 2020 14:15:21 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcf/</guid><description> Google Cloud Functions</description></item><item><title>Google Cloud Build</title><link>https://iimuz.github.io/scrapbook/software/google_cloud_build/</link><pubDate>Thu, 02 Jan 2020 14:01:30 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google_cloud_build/</guid><description> Google Cloud Build</description></item><item><title>Kernel-based Virtual Machine</title><link>https://iimuz.github.io/scrapbook/software/kvm/</link><pubDate>Thu, 02 Jan 2020 13:51:15 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/kvm/</guid><description> Wikipedia: Kernel-based Virtual Machine</description></item><item><title>Chainer</title><link>https://iimuz.github.io/scrapbook/software/chainer/</link><pubDate>Mon, 30 Dec 2019 12:04:24 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer/</guid><description> Chiner.org 2019.12.5: Preferred Networks、深層学習の研究開発基盤をPyTorchに移行 Wikipeida: Chainer</description></item><item><title>Rootless Docker を動かす</title><link>https://iimuz.github.io/scrapbook/software/rootless_docker/</link><pubDate>Sun, 13 Oct 2019 03:48:38 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/rootless_docker/</guid><description>docker 19.03 より rootless docker が使えるようになっていました。 幾つかの制限はあるようですが、 rootless で実際に環境構築をしてみました。
実行環境 実行用には下記のコマンドで GCE のインスタンスを作成して利用しています。
gcloud compute \ instances create rootless-docker-test \ --machine-type=n1-standard-1 \ --subnet=default \ --network-tier=PREMIUM \ --no-restart-on-failure \ --maintenance-policy=TERMINATE \ --preemptible \ --image=centos-7-v20190916 \ --image-project=centos-cloud \ --boot-disk-size=50GB \ --boot-disk-type=pd-standard \ --boot-disk-device-name=$INSTANCE_NAME CentOS で動かすスクリプト CentOS で最初から環境構築する場合は、下記の順に実行することで動作することを確認しました。
cat &amp;lt;&amp;lt;EOF | sudo sh -x cat &amp;lt;&amp;lt;EOT &amp;gt; /etc/sysctl.d/51-rootless.conf user.max_user_namespaces = 28633 EOT sysctl --system EOF sudo bash -c &amp;#39;echo &amp;#34;username:100000:65536&amp;#34; &amp;gt;&amp;gt; /etc/subuid&amp;#39; sudo bash -c &amp;#39;echo &amp;#34;username:100000:65536&amp;#34; &amp;gt;&amp;gt; /etc/subgid&amp;#39; curl -fsSL https://get.</description></item><item><title>複数の git リポジトリの履歴を残して単一のリポジトリに統合する</title><link>https://iimuz.github.io/scrapbook/software/merge_git_repositories/</link><pubDate>Mon, 23 Sep 2019 06:26:52 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/merge_git_repositories/</guid><description>当初は複数のリポジトリに分割して作成していたが、 途中から単一のリポジトリでよくなる場合があります。 その場合に、複数のリポジトリの履歴を残して一つのリポジトリに統合する方法です。
変更前には、リポジトリ A, B, C がそれぞれ別にあるとします。
- repository A - repository B - repository C 最終的に、統合用に作ったリポジトリにリポジトリ A, B, C のフォルダと git の履歴を残すようにします。
- repository parent |- repository A |- repository B |- repository C 下記のコマンドを順に実行することで実現できます。
# 親リポジトリのクローン $ git clone https://example.com/username/repository_parent.git # 子リポジトリの取り込み(リポジトリ A の場合を記載するが、 B, C についても同じように行う) $ git remote add repo_a https://example.com/username/repository_a.git $ git fetch repo_a $ git read-tree --prefix=repo_a/ repo_a/master $ git checkout -- . $ git add .</description></item><item><title>スクラム開発用ツール</title><link>https://iimuz.github.io/scrapbook/software/scrum_tools/</link><pubDate>Thu, 08 Aug 2019 12:28:15 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/scrum_tools/</guid><description> スクラム開発におけるプロジェクト管理ツール比較 優良なら Jira 無料なら OpenProject Redmine の Scrum プラグイン KPT には mindmap を使う事例もある</description></item><item><title>Hugo でビルドした結果を Cloud Build を利用してデプロイ</title><link>https://iimuz.github.io/scrapbook/software/deploy-hugo-project-using-cloud-build/</link><pubDate>Sat, 03 Aug 2019 05:06:35 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/deploy-hugo-project-using-cloud-build/</guid><description>memo cloud build のトリガーを scratchpad リポジトリに対して設定する。 coudbuild.yml を利用する設定とした。 image には gcloud のほかに docker hub も指定できる。
GCP の公式イメージは、 GitHub cloud-builders にある。
Cloud Build を使って Hugo をビルド＆デプロイする
cloud build で複数行書く場合は下記のようにする。
限定公開 GitHub リポジトリへのアクセス
# Decrypt the file containing the key steps: - name: &amp;#34;gcr.io/cloud-builders/gcloud&amp;#34; args: - kms - decrypt - --ciphertext-file=id_rsa.enc - --plaintext-file=/root/.ssh/id_rsa - --location=global - --keyring=my-keyring - --key=github-key volumes: - name: &amp;#34;ssh&amp;#34; path: /root/.ssh # Set up git with key and domain.</description></item><item><title>VSCode の Remote development で locale 警告が発生したときの対処</title><link>https://iimuz.github.io/scrapbook/software/vscode-locale-error/</link><pubDate>Sun, 28 Jul 2019 08:00:10 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode-locale-error/</guid><description>vscode の remote development 機能で git fetch origin を実行したときに以下の警告が発生した。
perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LANG = &amp;#34;en_US.UTF-8&amp;#34; are supported and installed on your system. perl: warning: Falling back to the standard locale (&amp;#34;C&amp;#34;) docker の環境で locale がうまく設定できていないようで、下記のようにすることで警告は発生しなくなった。
sudo apt install -y --no-install-recommends locales locales-all Can't configure locale in Docker image 失敗方法 最初は、 locale-gen などで必要なもののみ追加しようとしたが、うまくいかなかった。 下記の方法では失敗しました。</description></item><item><title>Scratch3.0とpythonを接続する</title><link>https://iimuz.github.io/scrapbook/software/scratch_python/</link><pubDate>Sun, 30 Jun 2019 03:18:27 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/scratch_python/</guid><description>memo autobuild と gh-pages による公開機能を確認する。 ローカルサーバと通信できるか確認する。 初回の動作確認 とりあえず公式サイトの拡張機能を作成するのに基づいて docker 環境で環境を構築し始めた。
github で gui の方を fork した。
github にリポジトリを作成し、submodule で 2 つのリポジトリを接続する。
git clone --depth 1 https://github.com/llk/scratch-vm.git git clone --depth 1 https://github.com/llk/scratch-gui.git npm install
cd scratch-vm npm i npm link cd ..\scratch-gui npm i npm link scratch-vm とりあえず一回起動してみる。
npm start 接続ポートは 8601 起動しない。 大量のエラーが発生し、正常に起動しないです。 npm i の時点で、 npm audit fixを行えとあるのでやってみる。 ダメだった。 とりあえずコンテナ削除お vm なしで gui のみ起動してみる。 yarn でもコンパイルエラーが出る。 node8 が対象っぽい。 node10 で行っていたのでコンテナの内容を変えてみる。</description></item><item><title>Google Photoへの自動画像アップロード</title><link>https://iimuz.github.io/scrapbook/software/google_photos_api/</link><pubDate>Sun, 02 Jun 2019 13:51:11 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google_photos_api/</guid><description>メモ Google APIを利用可能にする Get Started with REST 方法は2つ紹介されているが、今回はプロジェクトの設定なども行うため後者(B)の手法を利用した。 おそらく、こっちの方法の方がめんどくさい。 Go to the Google API Console. From the menu bar, select a project or create a new project. To open the Google API Library, from the Navigation menu, select APIs &amp;amp; Services &amp;gt; Library. Search for &amp;ldquo;Google Photos Library API&amp;rdquo;. Select the correct result and click Enable. OAuth2認証用のjsonを取得する 今回の場合は、認証用jsonを利用してブラウザ経由でアクセス権を付与する。 ここで、アクセス権の付与にはブラウザが必要だが、今回はコンソール上に認証用のURLを出力し、 URLへは別の環境でアクセスし、認証用のtokenだけをコンソールから入力するようにしている。 これは、Raspberry Piで利用することが前提のため、UI付きの環境ではない可能性があるため。 SSHなどで入っていても対応できるようにするためです。 参考資料 [追記あり] Google Photos APIsでアルバム作成と写真のアップロード Google Photos API を使用した画像の自動アップロード nasu-tomoyuki/mugencamera</description></item><item><title>Windows環境におけるショートカット</title><link>https://iimuz.github.io/scrapbook/software/windows_shortcut/</link><pubDate>Sun, 02 Jun 2019 13:17:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/windows_shortcut/</guid><description>概要 Windows環境におけるショートカットの備忘録
仮想デスクトップ 仮想デスクトップを増やす: Win + Crtl + d 仮想デスクトップを削除する: Win + Ctrl + F4 仮想デスクトップとタスク一覧: Win + Tab この時見えるタスク一覧は、選択している仮想デスクトップに置かれているタスクの一覧となります。 仮想デスクトップ間のアプリの移動: Win + Tabで移動したいアプリをドラッグアンドドロップ。 ショートカットキーで行いたいが、方法が分からず。 隣の仮想デスクトップにフォーカスを移動する: Win + Ctrl + → or ← 任意の仮想デスクトップに飛ぶショートカットキーは見つからず。 参考資料 Windows 10のタスクビュー（仮想デスクトップ）をショートカットキーで素早く操作する</description></item><item><title>VSCodeの拡張機能</title><link>https://iimuz.github.io/scrapbook/software/vscode_extensions/</link><pubDate>Mon, 13 May 2019 08:44:11 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode_extensions/</guid><description>VSCodeのオススメ拡張機能 24 選 (とTipsをいくつか) VSCodeのオススメ拡張機能 24 選 (とTipsをいくつか)
vscode-icons: アイコンが見やすくなる GitLens: ファイル比較やblameが使えるらしい GitHistory: git logが見やすくなる Prettier: 多言語コードフォーマッタ Blacket Pair Colorizer: 対応かっこの色付け Settings Sync: 設定ファイルの同期 REST Client: HTTPリクエストの操作を便利にしてくれる Bookmarks: ブックマークしてジャンプしたり、リスト化したり Plant UML: UMLを書くときに TODO Highlight: TODOやFIXMEなどのコメントハイライトを細かく設定できる Japanese Language Pack: 日本語パック Path Autocomplete: パスの入力補完 Rainbow CSV: CSVの色付け Partial Diff: 選択範囲の差分を見れる Duplicate action: ファイルやディレクトリの複製をボタン一つで可能になる GitHub Pull Requests: 公式拡張 gitignore: 自動でgitignoreを作ってくれる?? Todo +: TODO Highlightよりも高機能なToDo管理らしい Output Colorizer: 出力結果を色付けしてくれる Log File Highlighter: ログファイルの色付け proto3: protocol bufferのハイライト機能など Bash Debug: bashのお供に Trailing Spaces: 行末の空白を強調表示してくれる Regex Previewer: 正規表現をチェックするときに便利らしい Add jsdoc comments: jsdocの入力支援</description></item><item><title>gcloud のプロジェクト設定の変更</title><link>https://iimuz.github.io/scrapbook/software/gcloud_change_account/</link><pubDate>Sun, 05 May 2019 03:19:16 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcloud_change_account/</guid><description>概要 複数プロジェクトある場合に設定を保存しておいて一括で変更する方法。
最初だけ行うこと
$ gcloud config configurations create hoge # hoge 設定の追加 $ gcloud config configurations activate hoge # hoge 設定に変更 # hoge 設定に設定情報を追加 $ gcloud config set compute/region asia-northeast1 $ gcloud config set compute/zone asia-northeast-a $ gcloud config set core/account hoge@example.com $ gcloud config set core/project hoge-project $ gcloud cofnig set core/disable_usage_reporting False # 設定を作った後に認証が必要なため認証は実行しておく $ gcloud auth login 設定ができてしまえば、あとは切り替えるだけ。
$ gcloud config configurations activate hoge 参考情報 gcloud configで複数の設定を持って切り替える</description></item><item><title>Windows 10 の検索窓で検索ができなくなった場合の対処</title><link>https://iimuz.github.io/scrapbook/software/windows_search_window_restart/</link><pubDate>Sat, 04 May 2019 02:45:23 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/windows_search_window_restart/</guid><description>検索窓から検索用文字列を打ち込んでも、 検索候補が表示されなくなった場合は、 タスクマネージャから Cortana プロセスを強制終了すると復活する。 Cortana 自体は、強制終了しても勝手に復活するので問題はないようです。
Windows 10で Cortanaの検索ボックスが動作しなくなる</description></item><item><title>VSCode のリモート操作用ツールのお試し</title><link>https://iimuz.github.io/scrapbook/software/vscode_remote_tools/</link><pubDate>Fri, 03 May 2019 08:12:54 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode_remote_tools/</guid><description>概要 下記ページで VSCode の Insider 版で remote ツールがいくつか開発されているらしい情報を得ました。
Remote Python Development in Visual Studio Code 上記のページでは、下記のツールに関して記述されていたので、 順番に試してみようと思います。
Remote - Containers Remote - SSH Remote - WSL Remote - Containers 導入してみたのですが、 remote の docker container をつかえるわけではないようです。 ローカルにある docker daemon に接続しに行っているようで、 ローカルに docker daemon がないと失敗しました。
Developing inside a Container Architecture Containers dummy . 他のツールも同様だが、 Remote - Extentionpack というのが必要となるみたいである。</description></item><item><title>Chainer Tutorial Chapter 3: ディープラーニング入門</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter03/</link><pubDate>Thu, 02 May 2019 06:33:31 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter03/</guid><description>概要 ディープラーニング入門 メモ ニューラルネットワークは、部分可能な変換をつなげて作られた計算グラフである。 ニューラルネットワークのイメージ dummy . 層は、入力層、出力層と、中間層または隠れ層からなる。 上図は、 3 層アーキテクチャとなる。 各層には、全結合型 (fully-connected)、畳み込み型 (convolutional)、再起型 (recurrent) などがある。 一つのネットワークでは、異なる層の型を用いることが普通である。 入力層近くは、 covolutional であり、出力層近くは fully-connected であったりする。 ネットワークを入力層から出力層までたどることを順伝搬と呼ぶ。 活性化関数 シグモイド関数: $ h = \frac{1}{1 + \exp(-u)} $ シグモイド関数は近年では、層の数が多くなると使わない。 理由は、勾配消失が発生し、学習が進行しにくくなるため。 ReLU: $ h = max(0, u) $ 勾配消失問題に効くことが知られている。 シグモイド関数 ReLU 数式から実際の値を利用することなく求まる答えを解析解と呼ぶ。 繰り返し計算により数値的に求まる解を数値解と呼ぶ。 目的関数の主な種類 平均二乗誤差 交差エントロピー: $ - \sum_k t_k \log y_k $ 全サンプルを考慮すると $ L = - \sum_n \sum_k t_k \log y_k $ 最適化手法 勾配降下法 勾配とは、 L を増加させる方向を示す。 最適化では、 L を減少させたいため、 - 方向へ進める。 ミニバッチ学習 複数のデータを入力し、それぞれの勾配を計算する。その後、勾配の平均値で更新する。 全体を一度の学習に使うとバッチ学習と呼ぶ。 ミニバッチを用いた学習方法を確率的勾配降下法 (stochastic gradient descent: GSD) と呼ぶ。 誤差逆伝搬法 勾配消失 シグモイド関数では、原点から離れるに従い勾配の値が小さくなる。 シグモイド関数の勾配は最大でも 0.</description></item><item><title>Chainer Tutorial Chapter 2: 機械学習とデータ分析入門</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter02/</link><pubDate>Wed, 01 May 2019 07:21:24 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter02/</guid><description>概要 機械学習とデータ分析入門 メモ 単回帰分析と重回帰分析 この辺から実装が出てくると書かれている。 それぞれの実装はあるようです。 単回帰分析と重回帰分析は、ディープラーニングの基礎である。 機械学習手法は、教師あり学習、教師なし学習、強化学習に大別される。 単回帰分析は教師あり学習に分類される。 チュートリアルは大体教師あり学習だよ。 教師あり学習も、実測値を予測する回帰 (regression) と カテゴリを予測する分類 (classification) に大別される。 単回帰分析は、 1 変数を入力として、 1 変数を予測する。 重回帰分析は、多変数を入力として 1 変数を予測する。 データの前処理 平均 0 による中心化 (centering) メリットは、調整すべきパラメータを減らすことができる。 バイアス項がなくなるため単に 1 変数になる。 以降では中心化はしてある前提とする。 目的関数は二乗誤差 (sum of squares error) を利用する。 $ L = \sum_{n=1}^N (t_n wx_n)^2 $ $ \frac{\partial}{\partial w} L = - \sum_{n=1}^N 2x_n(t_n - wx_n) $ 導関数が 0 となる点で、目的関数が最小となるため、 $ \frac{\partial}{\partial w} L = 0 $ を求める。 結局 $ w = \frac{\sum_n x_n t_n}{\sum_n x_n^2} $ になる。 重回帰分析: $ \bold{y} = \bold{w}^T \bold{x} $ 交換法則が成り立つので、 $ \bold{y] = \bold{x}^T \bold{w} $ $ \bold{y} = \bold{X} \bold{w} $ 各列が各入力変数を表す行列 $ \bold{X} $ をデザイン行列と呼ぶ。 目的変数: $ L = (\bold{t} - \bold{y})^T (\bold{t} - \bold{y}) $ 変形すると、 $ L = (\bold{t}^T - \bold{w}^T\bold{X}^T)(\bold{t} - \bold{X}\bold{w}) $ 導出すると $ \bold{w} = (\bold{X}^T \bold{X})^{-1} \bold{X}^T \bold{t} $ となる。 導出には $ \bold{X}^T \bold{X} $ に逆行列が存在することを仮定している。 この式を正規方程式と呼ぶ。 導出で謝りやすい点として $ \bold{X}^T $ の逆行列をかけて単位行列とするパターンがある。 $ \bold{X} $ に逆行列が存在するためには、正方行列である必要があり、 $ \bold{X} $ はサンプルデータと独立変数の数が一致する必要があり、 一般には成り立たない。 NumPy 入門 python の int 型は自動的に Numpy の int64 型</description></item><item><title>Chainer Tutorial Chapter 1: 準備編</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter01/</link><pubDate>Wed, 01 May 2019 06:46:54 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter01/</guid><description>概要 準備編
医療用のオンライン講義資料と前半部は、ほとんど一緒な気がする。 行列の参考資料も一緒だった。
メモ 大学の学部生向け deep learning が開始できるところまで一通り網羅する予定。 Google Colaboratory の使い方説明 python の説明 チュートリアルは python 3.6 以上を対象としている。 変数宣言と代入 コメントの書き方 変数の型 エラーメッセージを読みましょう。 浮動小数点が as_integer_ratio() という関数を持つ。 これは、 0.5 という値に対して、 (1, 2) というように、 分数での分子と分母を返す。 list の説明 tuple の説明 list は mutable であり、 tuple は immutable dict の説明 for, if, while enumerate で idx が取れるよ。 他によく使うものとして、 zip で複数のペアを作れるよ。 関数 引数の書き方 引数のデフォルト値 返り値 変数のスコープ クラス 定義 継承 機械学習に使われる数学 教師あり学習の考え方 微分の基礎 微分は接線の傾きを求めるよ。 何気に lim が出てくるよ。 簡単な微分の公式 線形性の説明 合成関数の微分。要は、一時変数を置いて、 2 回微分する。 偏微分 線形代数の基礎 スカラー、ベクトル、行列、テンソル 加算、減算、スカラー倍 内積 行列積 高校くらいで習う積の計算。 その他に、外積、要素積 (アダマール積) などがある。 転置 単位行列 逆行列 逆行列が存在すれば正則行列である。 線形結合と二次形式 線形結合: $ \bold{b}^T \bold{x} $ 二次形式: $ \bold{x}^T \bold{A} \bold{x} $ ベクトルの微分 合成関数の微分 (ベクトルバージョン) 確率と統計の基礎 確率変数と確率分布 同時確率: $ p(X=x, Y=y) $ 周辺化: $ p(Y=y) = \sum_x p(X=x, Y=y) $ 条件付き確率: $ p(Y=y | x) $ ベイズの定理: $ p(y, x) = p(y | x) p(x) $ $ p(x) $: 事前確率 $ p(y | x) $: 事後確率 尤度と最尤推定 対数尤度: $ L(\theta) = \prod_{i=1}^N f(x_i; \theta)$ コイントスのパラメータ推定 Maximum a posteiori(MAP) 推定 事前確率を定義し、事前条件を有効にすることで効果的な推定を行う 統計量 平均 分散 不偏分散 ($ n-1 $ で割る) と標本分散 ($ n $ で割る) 標準偏差 相関係数: $ r = \frac{E[(X - \mu_x)(Y - \mu_y)]}{\sqrt{(E[(X - \mu_x)^2(Y - \mu_y)^2])}} $ 相関の有り無しは、無相関検定などの手法が必要となる。</description></item><item><title>Keepass</title><link>https://iimuz.github.io/scrapbook/software/keepass/</link><pubDate>Tue, 30 Apr 2019 11:20:48 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/keepass/</guid><description> Wikipedia: KeePass</description></item><item><title>Grow with Google</title><link>https://iimuz.github.io/scrapbook/software/grow_with_google/</link><pubDate>Mon, 29 Apr 2019 11:31:36 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/grow_with_google/</guid><description>概要 Google が提供している学習サイトです。 Machine Learning 関連以外にもあり、結構広範な内容をカバーしています。 働き方改革、 YouTuber 向けなどがありました。
Glow with Google JP Glow with Google Machine Learning Machine Learning 関連に関しては 2 コース用意されています。 初心者と中級者に分かれているのですが、中級者の方はほとんどのコースが英語のみになっています。</description></item><item><title>Hugo の Theme 作成</title><link>https://iimuz.github.io/scrapbook/software/hugo_create_theme/</link><pubDate>Wed, 24 Apr 2019 06:39:58 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hugo_create_theme/</guid><description>メモ github.com/gohugoio/hugoBasicExample 公式 Theme の作り方 github.com/vjeantet/hugo-theme-docdock Hugoのテーマを何個か作ったので知見をまとめてみる</description></item><item><title>楽天 Market Speed 2</title><link>https://iimuz.github.io/scrapbook/software/market_speed2/</link><pubDate>Sun, 21 Apr 2019 15:30:51 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/market_speed2/</guid><description>リンク オンラインヘルプ</description></item><item><title>楽天 Market Speed FX</title><link>https://iimuz.github.io/scrapbook/software/market_speed_fx/</link><pubDate>Sun, 21 Apr 2019 15:30:46 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/market_speed_fx/</guid><description>リンク MarketSpeed FX MarketSpeed FX Online Documents 取引可能時間 注文受付時間 日本時間 月曜日 07:00:00 から土曜日 06:59:59 (冬時間) 日本時間 月曜日 07:00:00 から土曜日 05:59:59 (夏時間) 下記メンテナンス時間を除きます。 リーブオーダー（OCO、IFD、IFOを含む）は下記メンテナンス時間を除き土日も発注可能です。 メンテナンス時間 日本時間 6:55～7:10 (冬時間) 日本時間 5:55～6:10 (夏時間) 注文の種類 ASストリーミング注文 ストリーミング注文 リーブオーダー注文 OCO注文 IFD注文 IFO注文 通貨ペア全決済注文 全決済注文 取引数量上限 1回の注文数量の上限は200万通貨まで 建玉及び注文の最大合計額は日本円で30億円まで</description></item><item><title>2. 機械学習ライブラリの基礎</title><link>https://iimuz.github.io/scrapbook/software/medical-ai002/</link><pubDate>Sun, 21 Apr 2019 15:03:28 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medical-ai002/</guid><description>リンク 2. 機械学習ライブラリの基礎 メモ</description></item><item><title>5. 実践編: MRI画像のセグメンテーション</title><link>https://iimuz.github.io/scrapbook/software/medicalai_chap5/</link><pubDate>Sun, 21 Apr 2019 15:03:28 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medicalai_chap5/</guid><description>概要 5. 実践編: MRI画像のセグメンテーション メモ 画像セグメンテーションには2種類ある。 Instance-aware Segmentation: 個別の物体を区別する Semantic Segmentation: 同一物体クラスであれば個を区別しない</description></item><item><title>1. 機械学習に必要な数学の基礎</title><link>https://iimuz.github.io/scrapbook/software/medical-ai001/</link><pubDate>Sun, 21 Apr 2019 12:56:33 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medical-ai001/</guid><description>リンク 1. 機械学習に必要な数学の基礎 メモ 大体は、覚えている範囲で済んでいます。 ただ、公式系は結構忘れています。あとは、たまに導出をやってみると意外と思い出す感じです。
機械学習は関数のパラメータ決定である。 ex.) $ f(x; a, b) = ax + b $ ex.) $ L(\theta) = \sum_{n=1}^N (y_i - f(x_i; \theta))^2 $ テンソルは、ベクトルや行列の一般化概念である。 1 階テンソル = ベクトル 2 階テンソル = 行列 逆行列が存在する = 正則行列 $ \bold{b}^T \bold{x} $: 線形結合 $ \bold{x}^T \bold{A} \bold{x} $: 二次形式 ベクトル微分 $ \frac{\partial}{\partial \bold{x}}( c ) = 0 $ $ \frac{\partial}{\partial \bold{x}}(\bold{b} \bold{x}) = \bold{b} $ $ \frac{\partial}{\partial \bold{x}}(\bold{x}^T \bold{A} \bold{x}) = (\bold{A} + \bold{A}^T)\bold{x} $ memo dummy .</description></item><item><title>Speaker Deck のスライド埋め込み (Embed) でサイズ指定</title><link>https://iimuz.github.io/scrapbook/software/speaker_deck_slide_size/</link><pubDate>Sun, 21 Apr 2019 11:06:02 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/speaker_deck_slide_size/</guid><description>Speaker Deck の Embed リンクをそのまま利用すると、 横幅を全て使うようにスライドが埋め込まれます。 その結果、非常に巨大な資料が埋め込まれる場合があります。 資料のサイズは、親の要素に影響を受けているようですので、 下記のように div 要素でサイズを指定して囲むことでサイズ指定が可能となります。
&amp;lt;div style=&amp;#34;width: 50%&amp;#34;&amp;gt; &amp;lt;script async class=&amp;#34;speakerdeck-embed&amp;#34; data-id=&amp;#34;55cac880f4d34c31b145afeffba11a77&amp;#34; data-ratio=&amp;#34;1.33333333333333&amp;#34; src=&amp;#34;//speakerdeck.com/assets/embed.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div&amp;gt; 資料は、ちょうど読んでいたスライドを使わせていただいております。
サイズ指定しない場合の埋め込み &amp;lt;script async class=&amp;#34;speakerdeck-embed&amp;#34; data-id=&amp;#34;55cac880f4d34c31b145afeffba11a77&amp;#34; data-ratio=&amp;#34;1.33333333333333&amp;#34; src=&amp;#34;//speakerdeck.com/assets/embed.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; サイズ指定した場合の埋め込み &amp;lt;div style=&amp;#34;width: 50%&amp;#34;&amp;gt; &amp;lt;script async class=&amp;#34;speakerdeck-embed&amp;#34; data-id=&amp;#34;55cac880f4d34c31b145afeffba11a77&amp;#34; data-ratio=&amp;#34;1.33333333333333&amp;#34; src=&amp;#34;//speakerdeck.com/assets/embed.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div&amp;gt;</description></item><item><title>VSCode で windows のリモートファイルを同期する</title><link>https://iimuz.github.io/scrapbook/software/vscode_sshfs/</link><pubDate>Wed, 17 Apr 2019 23:48:24 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode_sshfs/</guid><description>概要 VSCode を利用しているとリモートファイルも VSCode で修正したくなる場合があります。 Linux 系のサーバであれば、 ssh が使えれば ssh fs や remote workspace などで、 リモートファイルを修正することができるようになります。 Windows の場合は、共有フォルダ設定とかを利用してもよいのですが、 同じような方法でできないかということで OpenSSH を導入して ssh fs で動作できることを確認しました。 簡単な手順としては、下記のようになります。
Windows に OpenSSH を導入する VSCode の ssh fs プラグインを導入する IP とポートを設定する ルートを /C:/Users/hoge のようにする SSH FS のルート設定 SSH FS の設定では、ルートは / または ~/ のみが許容されています。 そのため、普通に windows のパスを C:/ のように記述すると入力が受け付けれない状態になります。 そこで、ルートの / を付けて、それ以降を windows のパス形式で入力することで、 普通に欲しいディレクトリを設定することができます。</description></item><item><title>Jenkins の pipeline 設定における timeout 処理の方法</title><link>https://iimuz.github.io/scrapbook/software/jenkins_timeout/</link><pubDate>Mon, 15 Apr 2019 02:17:35 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/jenkins_timeout/</guid><description> How to add a timeout step to Jenkins Pipeline タイムアウト処理としては、下記の方法で記述できるようです。
timeout(20) { node { sh 'foo' } } 最近 (2018/8 月頃 ?) から、下記のようにも書けるようになり、一括指定ができるようです。
pipeline { options { timeout(time: 1, unit: 'HOURS') } stages { .. } // .. }</description></item><item><title>Julia の入門</title><link>https://iimuz.github.io/scrapbook/software/julia_tutorial/</link><pubDate>Sun, 14 Apr 2019 11:39:38 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/julia_tutorial/</guid><description>julia 今なら julia も人が少なそうなので、少し先取りできるか？
julia で機械学習するには、下記のパッケージが良さそう。
flux.jl mxnet.jl knet.jl https://amp.reddit.com/r/Julia/comments/8jq9nr/julia_and_deep_learning/</description></item><item><title>Google Drive の docker 環境での運用</title><link>https://iimuz.github.io/scrapbook/software/docker_google_drive/</link><pubDate>Sun, 14 Apr 2019 11:38:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker_google_drive/</guid><description>Google Drive の docker sync Grive – A Dockerized Google Drive Client for Linux
grive2 を docker にまとめたものが用意されています。 docker hub を確認したところ、最新イメージの生成が 2 年前と古いこと、 また、 Dockerfile が公開されていないため内容物に判断がつきません。 記事自体は、 2018/5 に公開されています。</description></item><item><title>VSCode の設定メモ</title><link>https://iimuz.github.io/scrapbook/software/vscode_settings/</link><pubDate>Sat, 13 Apr 2019 16:51:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode_settings/</guid><description>VSCodeをVimmerが満足できる設定にしてみた VSCodeをVimmerが満足できる設定にしてみた
vim plugins 無名レジスタとクリップボードの同期: &amp;quot;vim.useSystemClipboard&amp;quot;: true, 検索結果をハイライトする: &amp;quot;vim.hlsearch&amp;quot;: true, カーソル配下の文字列を検索する: &amp;quot;vim.visualstar&amp;quot;: true, EasyMotion の有効化: &amp;quot;vim.easymotion&amp;quot;: true, Leader の設定: &amp;quot;vim.leader&amp;quot;: &amp;quot;&amp;lt;space&amp;gt;&amp;quot;, neovim の有効化: &amp;quot;vim.enableNeovim&amp;quot;: true, vim の ctrl キー系を有効にする: &amp;quot;vim.useCtrlKeys&amp;quot;: true, VSCode の設定 スニペットを候補の上部に表示する: &amp;quot;editor.snippetSuggestions&amp;quot;: &amp;quot;top&amp;quot;, プレフィックスが一致する場合はスニペットを挿入する: &amp;quot;editor.tabCompletion&amp;quot;: true, Monokai テーマ: &amp;quot;workbench.colorTheme&amp;quot;: &amp;quot;Monokai&amp;quot;, ターミナルを cmd にする: &amp;quot;terminal.integrated.shell.windows&amp;quot;: &amp;quot;C:\\WINDOWS\\Sysnative\\cmd.exe&amp;quot;, 規定の改行コードを LF にする: &amp;quot;files.eol&amp;quot;: &amp;quot;\n&amp;quot;, 文字コードの推測変換を有効化: &amp;quot;files.autoGuessEncoding&amp;quot;: true, ミニマップのスライダーを常に表示する: &amp;quot;editor.minimap.showSlider&amp;quot;: &amp;quot;always&amp;quot;, ミニマップの文字をきちんと表示しない: &amp;quot;editor.minimap.renderCharacters&amp;quot;: false, おすすめプラグイン GitHistory: git のコミットグラフがきれいに見れる GitLens: git の状態を確認する Code Runner: コードスニペットを実行できる Japanese Language Pack for Visual Studio Code: 日本語 OS だと自動でおすすめされる?</description></item><item><title>Medical AI 専門コース オンライン講義資料</title><link>https://iimuz.github.io/scrapbook/software/medical_ai/</link><pubDate>Sat, 13 Apr 2019 15:44:46 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medical_ai/</guid><description>主要リンク オンライン資料 GitHub メモ 前半は、 chainer tutorials と一緒で読み物になっています。</description></item><item><title>Google Colaboratory のチートシート</title><link>https://iimuz.github.io/scrapbook/software/colab_cheatsheet/</link><pubDate>Sat, 13 Apr 2019 15:39:21 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/colab_cheatsheet/</guid><description>セル操作 Markdownモードへ変更: Ctrl + M → M Codeモードへ変更: Ctrl + M → Y セルの実行: Shift + Enter セルを上に追加: Ctrl + M → A セルを下に追加: Ctrl + M → B セルのコピー: Ctrl + M → C セルの貼り付け: Ctrl + M → V セルの消去: Ctrl + M → D コメントアウト: Ctrl + /</description></item><item><title>Chainer Tutorial</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial/</link><pubDate>Sat, 13 Apr 2019 15:33:21 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial/</guid><description>主要リンク Chainer Tutorials Chainer Tutorials の Github メモ google colaboratory を利用する前提で進められています。 初学者向けであることが強調されています。 前半は、ほぼ読み物のようです。通勤時間にでも読むようにします。</description></item><item><title>Vim Tips</title><link>https://iimuz.github.io/scrapbook/software/vim_tips/</link><pubDate>Sat, 13 Apr 2019 11:08:37 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vim_tips/</guid><description>Normal mode :e!: ファイルのリロード Insert mode Ctrl + j: 改行 Marks :marks: mark の一覧1 Terminal :term: ターミナルの起動2 :vert term: 垂直分割して開く :bo term: 水平分割して画面最下部にウィンドウを開く :top term: 水平分割して画面最上部にウィンドウを開く :vert term ++close git log: git のログ確認2 :term ++close git blame %: 現在開いているファイルの blame 確認 2019.4.12 Qiita vim をおすすめする理由 【gif画像あり】&amp;#8617;
2019.8.13 Qiita Vim のターミナルの真の力お見せしますよ&amp;#8617;</description></item><item><title>VSCode のチートシート</title><link>https://iimuz.github.io/scrapbook/software/vscode_cheatsheet/</link><pubDate>Sat, 13 Apr 2019 10:50:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode_cheatsheet/</guid><description>移動 タブの移動: Ctrl + Tab ペイン切り替えまたは新規に作成: Ctrl + 数字 折り返しの有無を切り替え: Alt + z カーソル位置はそのままでスクロール: Ctrl + ↑ or ↓ カーソル位置はそのままでスクロール: Ctrl + PageUP or PageDown 対応する括弧へ移動: Ctrl + Shift + \ windows の場合、右上の円マークは反応するが、右下のバックスラッシュは反応しない。 指定した行へ移動: Ctrl + G エディタを分割: Ctrl + \ windows では右上の円マークでしか反応しない。 アクティブなエディタのペインを移動する Ctrl + Alt + ← or → Shift + Alt + 数字 エディタグループの縦方向分割と横方向分割の切り替え: Alt + Shift + 0 カーソルのあるインデントを折りたたむ: Ctrl + Shift + [ カーソルのあるインデントを開く: Ctrl + Shift + ] フォントサイズの拡大と縮小: Ctrl + Shift + ; or - 全参照検索して移動: Ctrl + Shift + o シンボルの定義を表示: Ctrl + マウスホバー 参照または定義の結果をインライン表示: Shift + F12 or Alt + F12 シンボルのリネーム: F2 警告やエラーのリスト表示: Ctrl + Shift + m ファイル編集 補完: Ctrl + Space カーソルの下に空行を挿入: Ctrl + Enter カーソルの上に空行を挿入: Ctrl + Shift + Enter 選択行を上または下へ移動: Alt + ↑ or ↓ 選択行を上または下へコピー: Alt + ↑ or ↓ インテリセンス: Ctrl + Space 検索 or 置換 ファイル検索: Ctrl + P エディタ内 検索: Ctrl + f 置換: Ctrl + h 検索結果の移動: F3 or Shift + F3 全体 検索: Ctrl + Shift + f 置換: Ctrl + Shift + h 検索結果の移動: F4 or Shift + F4 検索ボックス内で履歴表示: Alt + ↑ or ↓ 何かを開く 設定画面を開く: Ctrl + , エクスプローラを開く: Ctrl + Shift + f 検索を開く: Ctrl + Shift + f ソース管理を開く: Ctrl + Shift + g デバッグを開く: Ctrl + Shift + d 拡張機能を開く: Ctrl + Shift + x 出力を開く: Ctrl + Shift + u デバッグコンソールを開く: Ctrl + Shift + y ターミナルを開く: Ctrl + @ 問題(Problems)を開く: Ctrl + Shift + m 次の問題へフォーカスを移動する: Alt + F8 quickfix を開く: Ctrl + .</description></item><item><title>ローカルサービスの Jenkins をアップデートする方法</title><link>https://iimuz.github.io/scrapbook/software/update_jenkins/</link><pubDate>Fri, 12 Apr 2019 00:49:42 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/update_jenkins/</guid><description>Jenkins がローカルで動作している場合は、下記の手順でアップデートできます。
$ wget http://updates.jenkins-ci.org/download/war/2.164.2/jenkins.war $ sudo mv jenkins.war /usr/share/jenkins/ $ service jenkins restart jenkins が実行している状態で既にある jenkins.war を書き換えて大丈夫でした。 ただし、動かなくなって困る可能性はあるので、以前の jenkins.war は一時的にでも保管しておいた方が良いです。</description></item><item><title>Ruby on Rails の基礎習得するための教材 el-training</title><link>https://iimuz.github.io/scrapbook/software/el_training/</link><pubDate>Fri, 12 Apr 2019 06:45:26 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/el_training/</guid><description>万葉で必須とされるRuby on Railsと その周辺技術の基礎を習得するための新入社員教育用カリキュラムです。
el-training</description></item><item><title>一定時間でコマンドを終了させる Timeout コマンド</title><link>https://iimuz.github.io/scrapbook/software/timeout_command/</link><pubDate>Thu, 11 Apr 2019 05:51:37 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/timeout_command/</guid><description>常に動き続けるコマンドを一定時間で終了させたい場合には、 timeout コマンドが利用できます。
下記のようなコマンドオプションが利用可能です。
Usage: timeout [OPTION] DURATION COMMAND [ARG]... or: timeout [OPTION] Start COMMAND, and kill it if still running after DURATION. Mandatory arguments to long options are mandatory for short options too. --preserve-status exit with the same status as COMMAND, even when the command times out --foreground when not running timeout directly from a shell prompt, allow COMMAND to read from the TTY and get TTY signals; in this mode, children of COMMAND will not be timed out -k, --kill-after=DURATION also send a KILL signal if COMMAND is still running this long after the initial signal was sent -s, --signal=SIGNAL specify the signal to be sent on timeout; SIGNAL may be a name like &amp;#39;HUP&amp;#39; or a number; see &amp;#39;kill -l&amp;#39; for a list of signals --help display this help and exit --version output version information and exit 今回は、ローカル実行時に hugo の実行時に watch を付与しているのですが、 一定時間で終了してほしかったので下記のように実行しています。 1 分後に終了させることができます。</description></item><item><title>CUDA の atomic 関数</title><link>https://iimuz.github.io/scrapbook/software/cuda_atomic_function/</link><pubDate>Mon, 08 Apr 2019 02:19:34 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/cuda_atomic_function/</guid><description>CUDA の atomic 関数では、 CUDA Kernel 内において、 他のスレッドとは排他的に読み書き処理が可能となります。 atomicAdd や atomicSub などの基本的な関数は一通り用意されています。
ただし、 公式ドキュメント には、注意点として下記が書かれています。
Atomic functions do not act as memory fences and do not imply synchronization or ordering constraints for memory operations
Memory funces や同期、制御順に関する制約は行わないです。
Atomic functions can only be used in device functions.
atomic 関数は、デバイス関数の中でのみ有効となります。</description></item><item><title>Chapter 2</title><link>https://iimuz.github.io/scrapbook/software/coursera_gcp002/</link><pubDate>Sun, 07 Apr 2019 22:00:43 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coursera_gcp002/</guid><description>Module Introduction</description></item><item><title>curl で Cloudn't resolve host エラーが出た時の対処法</title><link>https://iimuz.github.io/scrapbook/software/curl_cloud_not_resolve_host/</link><pubDate>Sat, 06 Apr 2019 14:30:50 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/curl_cloud_not_resolve_host/</guid><description>WSL 環境で突然に curl が通じなくなって、下記エラーが出ました。 直前まで使えていたので、理由が分からずだったので調べました。
curl: (6) Couldn&amp;#39;t resolve host &amp;#39;www.google.co.jp&amp;#39; 調べたところ、 /etc/resolv.conf の nameserver がおかしくなっていたようです。 下記の行を追加したところ、正常に curl が使えるようになりました。
nameserver 8.8.8.8 8.8.8.8 は Google Public DNS です。 上記以外でも有効な DNS を指定すれば動作します。
再起動の方法は、 sudo netplan apply でできます。
Ubuntu 18.04 Server の場合 Ubuntu 18.04 Server の場合は、 /etc/resolv.conf には記載しておらず、 /etc/system.d/resolved.conf に下記のように記載する必要があります。
[Resolve] DNS=8.8.8.8 そして再起動の方法は、 systemctl restart systemd-resolved になります。
/etc/resolv.conf を修正した場合 WSL のように /etc/resolv.conf を修正し、 sudo netplan apply を利用した場合は、 設定をしても自動で書き換えられるため、有効な設定になりませんでした。</description></item><item><title>VS2010 のデバッグ時に例外発生時で中断する方法</title><link>https://iimuz.github.io/scrapbook/software/debugexception/</link><pubDate>Fri, 05 Apr 2019 08:38:16 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/debugexception/</guid><description>Visual Studio 2010 でデバッグ実行時に例外が発生したときに、 発生した時点で中断する設定です。 例外は発生したところがわからないとデバッグしにくく調べました。
&amp;ldquo;デバッグ&amp;rdquo; -&amp;gt; &amp;ldquo;例外&amp;rdquo; をクリックし、 出てきたウィンドウでチェックを ON にすれば例外発生時に中断できます。
例外設定画面</description></item><item><title>vim-fugitive の利用方法</title><link>https://iimuz.github.io/scrapbook/software/vim_fugitive/</link><pubDate>Thu, 04 Apr 2019 23:58:49 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/vim_fugitive/</guid><description>概要 vim-fugitive を今までも導入していましたが、 主に diff と blame を見ることにしか利用していませんでした。 しかしながら、調べてみるとかなり便利なようなので、使い方をメモしておきます。 注意点として、 vim-fugitive は git コマンドを実行することにフォーカスしているのではなく、 現在開いているファイルに対して git コマンドを適用するイメージです。
ほとんどが公式の README.md と :help fugitive 意訳ですが、 一部コメントや他の使用方法も記載しています。
git status git status と同様の結果を vim 上で見られるのが、 :Gstatus になります。 修正があったファイル一覧が得られるので、対象としたいファイルの行で下記のことができます。
c: コミット p: パッチの表示 D: diff の表示 -: git add または git reset =: インラインで変更点を表示または非表示 :Gcommit %: コミット作業 git commit git commit と同様に :Gcommit が使えます。 そのまま、 vim 上でコメントを入力することが可能です。
git blame git blame の出力をコードと対応付けて縦方向分割で見られるようになります。 q キーで表示を終了できます。 さらに表示された部分で下記の操作が可能です。</description></item><item><title>Chapter 1</title><link>https://iimuz.github.io/scrapbook/software/coursera_gcp001/</link><pubDate>Tue, 02 Apr 2019 06:47:56 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coursera_gcp001/</guid><description>Introducing Google Cloud Platform</description></item><item><title>Google Cloud Platform Fundamentals: Core Infrastructure</title><link>https://iimuz.github.io/scrapbook/software/coursera_gcp/</link><pubDate>Mon, 01 Apr 2019 22:01:34 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coursera_gcp/</guid><description> course</description></item><item><title>Vue CLI を利用して a3rt の設計しなおしメモ</title><link>https://iimuz.github.io/scrapbook/software/a3rt_js_vue_cli/</link><pubDate>Fri, 22 Feb 2019 22:57:34 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/a3rt_js_vue_cli/</guid><description>概要 a3rt の API を利用したリポジトリは公開できるし、 単純に 1 画面しか含まれていないのでとても勉強に利用しやすいです。 UI の実装練習用に調べながら進めます。
Vue CLI v3 Vue CLI 3を使ってアプリケーションを爆速で立ち上げる
画像なども貼ってあり、 vue create コマンドでプロジェクトを立ち上げるには十分だと思います。 一方で、コマンドの中身に関しては説明がほとんどないので、 詳細はわからず、ただなぞるだけならちょうどよいです。
Vue CLI 3入門 01
5 章まであります。 コマンドのオプションに関する説明などもあるため、 もう少しきちんと知りたいときには、こっちのほうが使いやすいです。
Bulma UI 用の css として、 a3rt のサンプルで利用していた bulma を利用する。
bulma.io Vue.js + Vue-cli + bulmaで作るSPA BulmaとVue.jsでできたUIコンポーネント「Buefy」【紹介とチュートリアル】 Buefy がよくわからなかったので、とりあえずスルー Vue.js + bulma + Vue-cliでシンプルにおしゃれな静的サイトを作る npm i bulma
npm i --save-dev sass-loader node-sass
style 部分の例</description></item><item><title>Flask を利用して GCF のローカル環境を作成する</title><link>https://iimuz.github.io/scrapbook/software/python_flask_api/</link><pubDate>Sat, 16 Feb 2019 18:06:27 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/python_flask_api/</guid><description>Flaskを使ってAPIサーバを公開する Flaskを使ってAPIサーバを公開する</description></item><item><title>Google Apps Script (GAS) の調査</title><link>https://iimuz.github.io/scrapbook/software/gas_survey/</link><pubDate>Tue, 12 Feb 2019 22:52:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gas_survey/</guid><description>GAS を使うべきか否かの判断材料 GAS を使うべきか否かの判断材料
選択する理由
Google サービスへのアクセス Google Calendar Spread Sheet Google Drive Admin Directory (G Suite 限定) 定期実行 開発環境の準備が不要 エディタとバージョン管理の問題から、結局ローカル管理 (clasp?) を利用したくなる。 あきらめたほうがいい理由
処理時間が 6 分を超える場合 大量の処理をする必要がある Google Apps Script Quotas トリガーの実行時間は 90 min / day 処理時間が 1 回で 5 分とすると 18 回のみ UrlFetch の実行時間は無料アカウントの場合で 20,000 回 / day 大容量のデータを扱う 体感的には 40 ~ 50 MB あたりが限界のようです。 複数人開発がしにくい 結局 clasp で git 管理にして対応する必要がありそう。 複数人トリガーの管理 G Suite とかだと関係してくるようです。 複数人での Web アプリケーション公開設定の管理 ローカルファイルへのアクセス GAS でよくはまる制約まとめ GAS でよくはまる制約まとめ</description></item><item><title>Google Cloud Functions に Travis CI からデプロイする</title><link>https://iimuz.github.io/scrapbook/software/gcf-continuous-deploy/</link><pubDate>Sat, 09 Feb 2019 16:27:55 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcf-continuous-deploy/</guid><description>Circle CI で Cloud Function をデプロイする Circle CI で Cloud Function をデプロイする
Circle CI を利用した方法ですが、 GCF のデプロイ方法が載っています。 GitHub から Circle CI で Google Cloud Source Repository へ push し、 その結果から GCF でデプロイすることになっているようです。
Google Cloud Functions(Beta)の基本的な仕組み、使い方を学ぶ Google Cloud Functions(Beta)の基本的な仕組み、使い方を学ぶ
Cloud Functions のデプロイ方法を学ぶために利用しました。 とりあえず、初めて Cloud Functions をデプロイしてみました。
https://hogehoge.cloudfunctions.net/gcf-deploy-sample
上記 URL でデプロイされたようです。
curl https://hogehoge.cloudfunctions.net/gcf-deploy-sample とすることで Hello World と表示されることを確認しました。 また、 gcloud コマンドを利用しても呼び出せることを確認しました。
gcloud functions call gcf-deploy-sample --region asia-northeast1 記事では、 beta 関数となっていますが、現在は既に通常レベルに公開されているようです。 あと、 region を付けないと authrized されている環境でも us-east あたりの region を確認しに行っていました。</description></item><item><title>Windows に SPICE のクライアントをインストールする</title><link>https://iimuz.github.io/scrapbook/software/install-spice-win/</link><pubDate>Wed, 06 Feb 2019 21:40:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/install-spice-win/</guid><description>kvm で構築し GPU Passthrough した windows 環境で、 OpenGL を利用したソフトウェアを動かしました。 そのとき、 Spice というリモート接続するソフトウェアを利用したのですが、 windows 版のインストーラのダウンロード方法が分かりにくかったので、メモしておきます。
windows の SPICE クライアントインストールは、なぜか virt viewer のインストールで行います。 (わかる人には分かるのでしょうが、インストールも SPICE Client とかの名称なら直感的に分かったのですが。) virt viewer というソフトウェアがそのまま spice のクライアントになります。 そのため、インストールには下記の手順でたどった先のファイルをダウンロードする必要があります。
SPICE へ行く &amp;ldquo;Download&amp;rdquo; を開く 下記画像中(SPICE ダウンロードページ)の &amp;ldquo;virt-manager download page&amp;rdquo; を開く 下記画像中(Virt Manager ダウンロードページ)の &amp;ldquo;Win64 MSI&amp;rdquo; をクリックしてダウンロード SPICE ダウンロードページ Virt Manager ダウンロードページ</description></item><item><title>Qt におけるリモートデバッグ</title><link>https://iimuz.github.io/scrapbook/software/qt-remote-debug/</link><pubDate>Wed, 06 Feb 2019 21:38:27 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/qt-remote-debug/</guid><description>Qt Creator を利用した場合にリモートデバッグを行うこと自体は公式に方法がああります。
Launching the Debugger
サンプルの OpenGL を利用していると思われるプロジェクトでリモートデバッグできることを確認しました。 下記のような用語を用いるとします。
ホスト PC: 開発した exe を実行する PC exe の実行に必要なバイナリやインストールのみを実行 サーバ PC: 開発用環境を構築した PC ビルドするために QtCreator や Visual Studio をインストール 事前条件として下記の作業を行っています。
ホスト PC Visual Studio Professional 2013 Update5 のインストール QtCreator 5.6.4 のインストール Windows SDK のインストール(他のチェックボックスはすべて外しています。) サーバ PC Windows SDK の Remote Debugger ツールをインストール(他のチェックボックスはすべて外しています。) サーバ PC の qtcreatorcdbext.dll (32bit or 64bit) を任意のディレクトリ (qtlib) へコピー その上で下記のような手順でデバッガを起動します。</description></item><item><title>Git for Windows で proxy を設定する</title><link>https://iimuz.github.io/scrapbook/software/proxy-using-git-for-windows/</link><pubDate>Sat, 02 Feb 2019 22:09:59 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/proxy-using-git-for-windows/</guid><description>WSL がインストールできない環境で、 git for windows をインストールしたところ、 nc コマンドが使えず git の proxy 指定ができなかったので調べました。 nc コマンドの代わりに connect.exe が利用できるようです。
ProxyCommand connect.exe -H hoge.proxy.jp:8080 %h %p 22番ポートが使えなくても、SSHでGitしたい！</description></item><item><title>CDB の使い方を調べた時のメモ</title><link>https://iimuz.github.io/scrapbook/software/cdb-debug/</link><pubDate>Sat, 02 Feb 2019 21:45:10 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cdb-debug/</guid><description>Qt で開発されているソフトウェアのデバッグ作業で調べたので、メモしておきます。 単にデバッグ実行するだけであれば、 Qt の開発環境をデバッグ実行するだけなので、意識する事はないと思います。 今回は開発環境が入っている PC では実行できなかったため、 リモート PC で実行して開発環境からチェックするということを行いました。 Visual Studio だと、開発環境からリモートの操作ができるのですが、 Qt 開発環境の場合は、リモート PC のコマンドラインからステップ実行などをする必要がありました。 ブレークポイントの設定などは Qt 環境からできますが、 なぜか、一回止めると、再度進めるためにはコマンドラインの入力待ちになってしまいました。 変数のチェックとかは、 Qt 開発環境からできます。
cdb/Windbgの使い方のメモ にまとめられていました。
コマンド一覧の取得は単純に ? でできます。
0:000&amp;gt; ? 実行関連
順にgdbにおけるcontinue、nexti（関数の中に入らない）、stepi（関数の中に入る）、finish（リターンするまで進める）に対応する。
0:000&amp;gt; g 0:000&amp;gt; p 0:000&amp;gt; t 0:000&amp;gt; gu</description></item><item><title>powershell でファイルをダウンロードする</title><link>https://iimuz.github.io/scrapbook/software/download-using-powershell/</link><pubDate>Wed, 30 Jan 2019 22:28:29 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/download-using-powershell/</guid><description>いろいろな方法を試しましたが、結局上記スクリプトでないとダウンロードできませんでした。
Power Shell でファイルをダウンロードする で基本のダウンロードスクリプトが見つかったのですが、 https からのダウンロードのせいか SSL/TLS のチャネル生成失敗エラーが発生していました。
&amp;#34;2&amp;#34; 個の引数を指定して &amp;#34;DownloadFile&amp;#34; を呼び出し中に例外が発生しました: &amp;#34;要求は中止されました: SSL/TLS のセキュリティで保護されているチャネルを作成できませんでした&amp;#34; SSL/TLS のセキュリティ用に Invoke-RestMethod、Invoke-WebRequestが失敗する の方法で SecurityProtocol の 2 行を追加する必要がありました。 SSL/TLS 関連では、 PowershellのInvoke-RestMethodをhttpsに実施すると失敗する の方法では失敗してしまいました。 よくわかっていないので求めていることが違ったのかもしれません。</description></item><item><title>svn のリポジトリ構成がデフォルトではない場合における git svn コマンド</title><link>https://iimuz.github.io/scrapbook/software/git-svn-for-strange-folder/</link><pubDate>Wed, 30 Jan 2019 22:21:53 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/git-svn-for-strange-folder/</guid><description>svn の中が歴史的経緯により複雑な環境となっている場合があります。 例えば、下記のような構成です。
root |- trunk | |- project_a | |- project_b |- branches | |- project_a | |- project_b |- tags |- project_a_v1.0.0 |- project_b_v1.0.1 root の下にプロジェクトごとの trunk などがあるわけではなく、各プロジェクトの turnk が trunk ディレクトリの下に配置されています。
この場合は、下記のようなコマンド群を使っていく必要があります。
git svn clone -T project_a svn://hoge/trunk/ trunk の直前までの URL を書き、最後の trunk フォルダ名を -T オプションにつなげます。 branches とかの取得方法もあるのかもしれませんが、あきらめました。
上記方法論だと、 branch は取り込め無いのが問題ですが、とりあえず trunk だけは移行できます。</description></item><item><title>情報系の資格</title><link>https://iimuz.github.io/scrapbook/software/skills/</link><pubDate>Sat, 19 Jan 2019 13:29:51 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/skills/</guid><description>画像処理エンジニア検定 画像処理エンジニア検定 Qiita: 画像処理初心者が、画像処理エンジニア検定エキスパートに合格した時の学習法 G 検定 日経経済新聞: AIの知識を問う「G検定」 合格者の裾野広がる</description></item><item><title>Go 言語でテストカバレッジを可視化する</title><link>https://iimuz.github.io/scrapbook/software/go-coverage/</link><pubDate>Sat, 22 Dec 2018 12:58:56 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/go-coverage/</guid><description>Go 言語を使っていて、テストカバレッジが簡単に 100% にならなかったので、 どこが通過させられていないのか調べるのに使いました。
下記のコマンドでテスト実行時に、プロファイルを出力し、 html に変換できました。
$ go test --cover ./... -coverprofile=./bin/cover.out $ go tool cover -html=./bin/cover.html 上記で出力先として、 bin フォルダを指定しているのは、 出力結果をトップディレクトリに作成したくなかったからです。 (git で変更履歴として検出されてしまうので) 別に出力先はどこでもよいと思います。
Goのテスト作成とカバレッジ率＆カバレッジ行表示をしてみる</description></item><item><title>Windows で OpenSSH をドメイン環境下でインストール</title><link>https://iimuz.github.io/scrapbook/software/install-windows-openssh-under-domain/</link><pubDate>Sat, 22 Dec 2018 12:06:17 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/install-windows-openssh-under-domain/</guid><description>Windows10 において、 &amp;ldquo;オプション機能の追加&amp;quot;から OpenSSH Server をインストールしたら失敗したので、 対処したときのメモです。
結論としては、 WSUS (Windows Server Update System) が有効になっていて、 インストールできない場合があるようなので、 一時的に WSUS を無効にしてあげることで対応できるようです。
OpenSSH Server のインストール手順 下記に手順を示します。
Win + R を押して、 regedit で OK を押す。
管理者権限に昇格してレジストリエディタを開く。
HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU に移動する。
UseWUServer の値を 0 とする。
WSUS を再起動する。
$ net stop wuauserv &amp;amp;&amp;amp; net start wuauserv OpenSSH Server をインストールする。
$ Get-WindowsCapability -Online | ? { $_.Name -like &amp;#39;OpenSSH*&amp;#39; } $ Add-WindowsCapability -Online -Name &amp;#39;OpenSSH.</description></item><item><title>競技プログラミング</title><link>https://iimuz.github.io/scrapbook/software/coder/</link><pubDate>Sat, 08 Dec 2018 17:55:37 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coder/</guid><description>コンテスト Kaggle TopCoder AtCoder AtCoder AtCoder Problems(β版) ac-predictor レーティング レーティング 色 AtCoderJobs ランク レベル感 2800- 赤 SSS 世界レベルのトップ選手です。現在日本に 20人 前後しかいません。 2400-2800 橙 SS 各大学で数年に 1 人レベルのトップ選手です。 2000-2400 黄 S 各大学のエース級選手です。世間的にはアルゴリズム特化のリサーチャーなど、エキスパートとして活躍できる実力です。 1600-2000 青 A 世間的にはアルゴリズムスペシャリストとして活躍できる実力です。 1200-1600 水 B 世間的にはソフトウェアエンジニアとしてトップレベルの実力です。Paiza の S ランクと同等とされています。 800-1200 緑 C ソフトウェアエンジニアとして申し分ない実力です。 400-800 茶 D 各大学の情報系学部でしっかりとプログラミングを勉強して上位 3 割の成績を収めている学生さんの実力です 1-400 灰 E 初心者ですが伸びしろがたくさんある状態です AtCoder コンテストについての tips より抜粋</description></item><item><title>Jenkins の構築時メモ</title><link>https://iimuz.github.io/scrapbook/software/jenkins-settings/</link><pubDate>Mon, 03 Dec 2018 09:07:12 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jenkins-settings/</guid><description>Jenkins slave を docker で起動 Qiita: jenkinsコンテナでmaster-slaveクラスタを作るPOC
slave のスポット起動までは、オフィシャルの環境で出きるっぽいです。 加えて、 DooD の環境構築方法も載っています。 ただ、 Dockerfile をコピーしてきて書き換えているので、 ベースイメージ指定でできないか試します。
ssh キーペアの登録 slave へ通信するためのキーになるようです。
$ ssh-keygen -f jenkins $ docker cp jenkins master:/tmp/ $ docker cp jenkins.pub master:/tmp/ jenkins master の設定 docker plugin を導入することで、 jenkins のシステム設定画面に &amp;ldquo;クラウド&amp;rdquo; という項目が追加されます。 &amp;ldquo;クラウド&amp;rdquo; 項目で &amp;ldquo;docker&amp;rdquo; という選択肢がとれるようになるため、 docker に環境を追加していきます。 設定項目と値に関しては、下記の画像を確認してください。
注意点として、 docker を利用するため、 jenkins master の docker container 起動時にユーザを root にする必要があります。
docker 設定 1 docker 設定 2 テストパイプライン まだ、 slave 側では docker は起動できませんが、 master 側が docker slave を起動できるようになっているか確認します。 確認のためには、タスクを作成するのが早いです。 タスクはパイプラインとした場合、下記のようなテストが動作します。</description></item><item><title>アジャイルソフトウェア開発</title><link>https://iimuz.github.io/scrapbook/software/agile-software-development/</link><pubDate>Fri, 23 Nov 2018 11:43:02 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/agile-software-development/</guid><description>アジャイルソフトウェア開発宣言 アジャイルソフトウェア開発宣言の原文
私たちは、ソフトウェア開発の実践あるいは実践を手助けをする活動を通じて、 よりよい開発方法を見つけだそうとしている。この活動を通して、私たちは 以下の価値に至った。
プロセスやツールよりも 個人と対話 を、 包括的なドキュメントよりも 動くソフトウェア を、 契約交渉よりも 顧客との協調 を、 計画に従うことよりも 変化への対応 を、 価値とする。すなわち、左記のことがらに価値があることを認めながらも、 私たちは右記のことがらにより価値をおく。
Kent Beck,Mike Beedle,Arie van Bennekum,Alistair Cockburn, Ward Cunningham,Martin Fowler,James Grenning,Jim Highsmith, Andrew Hunt,Ron Jeffries,Jon Kern,Brian Marick,Robert C. Martin, Steve Mellor,Ken Schwaber,Jeff Sutherland,Dave Thomas
© 2001, 上記の著者たち
この宣言は、この注意書きも含めた形で全文を含めることを条件に自由にコピーしてよい。
アジャイル宣言の背後にある原則 アジャイル宣言の背後にある原則の原文
アジャイル宣言の背後にある原則
私たちは以下の原則に従う:
顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。 要求の変更はたとえ開発の後期であっても歓迎します。 変化を味方につけることによって、お客様の競争力を引き上げます。 動くソフトウェアを、2-3週間から2-3ヶ月という できるだけ短い時間間隔でリリースします。 ビジネス側の人と開発者は、プロジェクトを通して 日々一緒に働かなければなりません。 意欲に満ちた人々を集めてプロジェクトを構成します。 環境と支援を与え仕事が無事終わるまで彼らを信頼します。 情報を伝えるもっとも効率的で効果的な方法は フェイス・トゥ・フェイスで話をすることです。 動くソフトウェアこそが進捗の最も重要な尺度です。 アジャイル･プロセスは持続可能な開発を促進します。 一定のペースを継続的に維持できるようにしなければなりません。 技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。 シンプルさ（ムダなく作れる量を最大限にすること）が本質です。 最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。 チームがもっと効率を高めることができるかを定期的に振り返り、 それに基づいて自分たちのやり方を最適に調整します。 なぜアジャイル宣言が誕生したのか 下記のまとめによると、 アジャイル宣言とは文字通り&amp;quot;宣言&amp;quot;であり、 細かいことは何も決めていないということになります。 技術変化の速い現代において、変化に適応し、 適切な選択をもって対応していこうといっていることになるようです。</description></item><item><title>Hugo で baseurl を有効にする</title><link>https://iimuz.github.io/scrapbook/software/hugo-baseurl/</link><pubDate>Mon, 19 Nov 2018 06:51:02 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hugo-baseurl/</guid><description>Hugo で baseurl を有効にする場合の設定です。 root のみで運用する場合は、 baseURL を設定するだけでよいそうですが、 baseurl にサブディレクトリを指定する場合は、追加の設定が必要になります。
Issue when baseurl have subdirectory によると、 config.toml において、 baseURL の指定に加えて、 RelativeURLs と CanonifyURLs を有効にする必要があります。
baseURL = https://example.com/ RelativeURLs = true CanonifyURLs = true Using Hugo によると、 server モードの起動時に設定する場合は下記のようなコマンドになります。
$ hugo server --baseURL=http://yoursite.org/ \ --port=80 \ --appendPort=false \ --bind=xxx.xxx.xxx.xxx 注意点として、 1024 番以下のポートを利用する場合は、 sudo でないと権限がなく失敗するようです。</description></item><item><title>GCP のインスタンス起動でエラーが発生する</title><link>https://iimuz.github.io/scrapbook/software/gcp-resource-error/</link><pubDate>Mon, 19 Nov 2018 06:41:46 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcp-resource-error/</guid><description>GCP で作成したインスタンスを起動する場合に、 下記のようなエラーが発生する場合があります。
Starting instance(s) ubuntu-dev...failed. ERROR: (gcloud.compute.instances.start) The zone &amp;#39;projects/hoge/zones/asia-northeast1-b&amp;#39; does not have enough resources available to fulfill the request. Try a different zone, or try again later. プリエンプティブインスタンスである場合に、 GCP 側で起動できないようにすることがあるようです。
GCP(GCE)でプリエンプティブインスタンスが起動しない場合の対処法
上記情報によれば復活するまでに 2 日とかかかる場合もあるようです。</description></item><item><title>GitLab CI/CD を利用して GitHub にコミットする</title><link>https://iimuz.github.io/scrapbook/software/gitlab-ci-to-github/</link><pubDate>Sat, 17 Nov 2018 16:17:34 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gitlab-ci-to-github/</guid><description>TL;DR 非常に完結に手順を書くと下記のようになります。
GitHub でアクセストークンを取得 GitLab の CI/CD で Variables にアクセストークンを設定 Variables に設定したアクセストークンで .gitlab-ci.yml でビルドとコミットを記述 GitLab の Variables GitLab の Variables で protected という項目があるのですが、 ON にすると push 時にトークンを読み込めませんでした。
GitLab Variables どうも GitLab のブランチで下記のような保護を適用したブランチでないと読めなくなるようです。
GitLab: Protected variables
Variables could be protected. Whenever a variable is protected, it would only be securely passed to pipelines running on the protected branches or protected tags.</description></item><item><title>Qiita API を利用して記事を操作する</title><link>https://iimuz.github.io/scrapbook/software/qiita-api/</link><pubDate>Thu, 15 Nov 2018 22:44:47 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/qiita-api/</guid><description> Python を利用した Qiita の操作方法 Python, RequestsでWeb APIを呼び出し（データ取得・操作）
Python を利用して Qiita の記事を操作する方法が一通り記載されています。
Auth の Bearer トークン トークンを利用した認証・認可 API を実装するとき Authorization: Bearer ヘッダを使っていいのか調べた
API でアクセスするときにトークンの使用方法で、 Bearer というのが使われていました。 Bearer が何かはよくわかりませんでしたが、 とりあえずアクセストークンを利用して処理するときの方法のようです。
自動投稿関連の記事 Qiita API v2 を使って自身の全投稿をエクスポートする Python スクリプトを書いた Qiitaの記事をGitHubで管理してTravisCI経由で自動投稿する GitHub 上のマークダウンを Travis CI 経由で Qiita に記事として投稿する 自動投稿にするかは別として、 3 番目の記事で js を利用して記事を投稿する方法が記載されています。 環境構築してしまうのが楽そうです。
3 番目の記事を見ましたが、参照先のリポジトリが 2 年前と古いです。 あと、たぶん直接 API を利用しても、それほど変わらなそうです。
API に関するリンク Qiita API (公式) Qiita API 概要 (非公式) Qiita APIで記事を投稿してみた！ (Qiita API v2 活用) 記事を「効率的」に Qiita に投稿する方法</description></item><item><title>VS2017 と Intel2011 の利用</title><link>https://iimuz.github.io/scrapbook/software/vs2017-intelxe-error/</link><pubDate>Thu, 15 Nov 2018 13:20:53 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vs2017-intelxe-error/</guid><description>TL;DR Intel IPP や MKL などを利用して Visual Studio 2010 で開発していたリポジトリで、 パフォーマンス解析を行いたくなり、VS2017 にアップデートしようとしました。 しかしながら、 色々とエラーが起きるので素直に Intel のバージョンを上げるのと、 コスト的にかわらなそうになり、あきらめました。
ただし、今回のリポジトリは特殊で、Intel のライブラリを使っていますが、 Intel Compiler は利用していないことに起因している部分で発生しているエラーです。 もし、普通に Intel Compiler を利用できるなら (コンパイラが変わっていないので、それでよいのであれば)、 今回の問題は起こらない可能性もあります。
経緯 ソリューションファイルのアップデート CMake を利用しているため、 VS2017 のソリューションファイルは、 簡単に作成することができました。
ビルドの失敗 IPP で標準ヘッダ (float.h) が見つからない c の標準ヘッダである float.h が見つからないと起こられました。 参照しているのは、 IPP のコードです。
エラー C1083 include ファイルを開けません。 &amp;#39;../../vc/include/float.h&amp;#39;:No such file or directory (ソース ファイルをコンパイルしています hoge.cpp) libHoge c:\program files (x86)\intel\composer xe 2011 sp1\compiler\include\float.h 37 上記エラーメッセージにあるように、 IPP の内部でもつ float.</description></item><item><title>Windows 10 環境で .NetFramework 3.5 をインストールする</title><link>https://iimuz.github.io/scrapbook/software/install-net35-win10/</link><pubDate>Wed, 14 Nov 2018 18:02:17 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/install-net35-win10/</guid><description>Windows 10 Pro 環境に .NetFramework をインストールすると、 エラーが返る場合があります。 その場合は、下記のような方法で解決する場合があるようです。 (どうもネットワーク越しに適切なインストーラが取得できていないようです。)
グループポリシーエディタを開く(gpedit.msc の実行) &amp;ldquo;コンピュータの構成&amp;rdquo; -&amp;gt; &amp;ldquo;管理用テンプレート&amp;rdquo; -&amp;gt; &amp;ldquo;システム&amp;rdquo; &amp;ldquo;オプションコンポーネントのインストールおよびコンポーネントの修復のための設定&amp;rdquo; を開く &amp;ldquo;有効&amp;rdquo; を選択 &amp;ldquo;Windows Server Update Services(WSUS)の代わりに、 Windows Updateから修復コンテンツとオプションの機能を直接ダウンロードする&amp;rdquo; にチェック &amp;ldquo;適用&amp;rdquo; を選択 &amp;ldquo;windows機能の有効化または無効化&amp;rdquo; で .NetFramework 3.5 を有効にする Windows 10に.NET Framework 3.5がインストールできない場合の解決方法</description></item><item><title>Git で GPG を利用してアクセストークンの暗号化</title><link>https://iimuz.github.io/scrapbook/software/git-with-gpg/</link><pubDate>Sat, 10 Nov 2018 22:48:47 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/git-with-gpg/</guid><description>下記の記事を参考にして GPG を利用して GitHub へ push するときに、 .netrc を利用してアクセストークンを入力するようにしました。
Qiita: gitレポジトリとhttpで通信する場合にユーザ情報の入力を省略する
GPG で暗号化が可能な状態にする
GitHub でアクセストークンを発行する
トークンの発行時に repo にだけチェックを入れておけば、 push はできるようです。 GitLab の場合は、最初の api の部分だけで push できました。 .netrc を下記のように作成します
machine github.com login username password access_token gpg で暗号化すると .netrc.gpg が作成される
$ gpg -e -r hoge .netrc 暗号化した .netrc.gpg をホームディレクトリ下に配置する
最初に作成した .netrc は削除する
git credential helper を設定する。 git-credentail-netrc は、 git 環境に付属しているようです。 また、環境によって微妙にインストールされている場所が異なるので、 それぞれの環境に合わせてください。</description></item><item><title>GPG の導入</title><link>https://iimuz.github.io/scrapbook/software/gpg_settings/</link><pubDate>Sat, 10 Nov 2018 11:28:36 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gpg_settings/</guid><description>GPG の設定処理 GPG では最低でも 2 つの鍵を作るようにしたほうが良い。
master key: 署名のためのキー。秘密鍵の方は、絶対に流出させてはいけない。 sub key: 暗号化に用いるキー。普段は、 sub key を運用する。 GPG も GPG と GPG2 などバージョンがいくつかある。 2018/11/10 現在では、 GPG2 を利用したほうが利便性が高いとのことです。 GPG2 は、暗号化が別のライブラリを利用しているため、 必要な機能のみ利用できて便利とのことです。 また、 master key を別管理するのが楽とのことです。 普通の利用では、 master key を別管理するのが楽というのが大きなメリットになりそうです。
環境構築 GPG のインストール
$ sudo apt install gnupg gnupg-agent gpgsm master key の作成
$ gpg --gen-key gpg (GnuPG) 2.2.4; Copyright (C) 2017 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it.</description></item><item><title>Jasper の良い点、悪い点</title><link>https://iimuz.github.io/scrapbook/software/jusper-pros-cons/</link><pubDate>Wed, 07 Nov 2018 12:14:04 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jusper-pros-cons/</guid><description>Jusper を使ってみてよい点と悪い点を記録しておきます。 複数リポジトリの issue を収集して表示するツールを作成するときの、 参考用のメモです。
Good 検索条件が一つの区切りになっているのは非常に面白く、よい点だと思います。
Bad 毎回外部接続をして画面描画するためワンテンポ遅れている。 せっかくローカルで動いているのに、レスポンスが遅れるのはもったいない。</description></item><item><title>gist の使い方</title><link>https://iimuz.github.io/scrapbook/software/usage-gist/</link><pubDate>Wed, 07 Nov 2018 12:01:27 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/usage-gist/</guid><description>GitLab の snipetts だと private も自由に作れるのですが、 web 環境でのエディタの動きが特殊で少し使いにくかったので、 Gist のほうでどのくらいできるのか調べた時のメモです。
目標 自分の作った Gist を簡単に検索する方法を確認する Gist を手軽に管理できるツールを調べる エディタの選択肢はあるのか 自分の作った Gist の検索方法 Gist の Search 部分で user:hoge と入れると hoge ユーザの範囲で調べられました。 GitHub の方の検索と同じ挙動でした。
Gist を手軽に管理できるツール Cacher 旧名 GistBot らしいです。 Free プランでも Public のメモなら自由に管理できそうです。 Web 環境と デスクトップ用アプリもあるようなので、うまく管理できれば便利だと思います。 さすがにモバイル版はなかったです。 web アクセスで十分な気もします。
private gist の数に制限があるのが少々めんどくさいところです。 全て public でもよいような気がしますが、できれば Gist にない制限を加えたくはないです。 有償プランでもいいですが、 gist のためだけに $7/month は少々厳しいです。
jdowner/gist python で Gist の作成などを提供してくれています。 ただ、データの管理が自分でやらなくてはならなそうです。 エディットするときは自分のローカルで、現在のフォルダにクローンするようです。</description></item><item><title>Point Cloud Library で利用しているデータフォーマット</title><link>https://iimuz.github.io/scrapbook/software/point-cloud-library-data-format/</link><pubDate>Tue, 30 Oct 2018 10:35:12 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/point-cloud-library-data-format/</guid><description>Point Cloud Library で使用しているデータフォーマット Point Cloud Library で使用しているデータフォーマットの調査です。
参考資料 Qiita: https://qiita.com/gou_koutaki/items/3c430db5e99e8771ed94 PCD format: http://pointclouds.org/documentation/tutorials/pcd_file_format.php PCD viewer: https://github.com/cloudcompare/cloudcompare</description></item><item><title>GONEM Keyring を利用した git credential の管理</title><link>https://iimuz.github.io/scrapbook/software/git-credential-gnome-keyring/</link><pubDate>Mon, 29 Oct 2018 15:32:04 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/git-credential-gnome-keyring/</guid><description>Git の認証情報を ssh から https の credential 管理に移行できるか確認。
現状は GNOME keyring のインストール方法が deprecated であるという情報を得たので、 いったんペンディングです。
ArchLinux の GNOME Keyring ArchiLinux のページに GNOME Keyring に関する説明が載っていました。 もう少し使い方がわかったら読み直してみます。
GNOME keyring は deprecated ?? git credential を使おう によると、 gnome keyring は deprecated になっているようです。 本当かは確認が必要ですが、下記のコマンドで行う作業は deprecated のようです。 (他の方法を利用して gnome keyring を利用するようにしろということでしょうか??)
$ apt install -y libgnome-keyring-dev $ make --directory=/usr/share/doc/git/contrib/credential/gnome-keyring $ git config --global credential.helper /usr/share/doc/git/contrib/credential/gnome-keyring/git-credential-gnome-keyring</description></item><item><title>Markdown から pdf のエクスポート</title><link>https://iimuz.github.io/scrapbook/software/markdown-to-pdf/</link><pubDate>Mon, 29 Oct 2018 14:50:54 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/markdown-to-pdf/</guid><description>markdown ファイルを pdf でエクスポートする方法のメモです。
やらなきゃいけないことのメモ docker で pandoc + latex の一番簡単なフルインストールで生成できるか確認 svg 画像入りに対応する reveal.js の slide に対応できるか確認 latex docker のビルド フル版をインストールした docker 環境を作成しようとしたところ、非常に時間がかかることがわかりました。 また、インストール途中で入力が必要となっていました。
Please select the geographic area in which you live. Subsequent configurationquestions will narrow this down by presenting a list of cities, representingthe time zones in which they are located. 1. Africa 2. America 3. Antarctica 4. Australia 5. Arctic 6. Asia 7. Atlantic 8.</description></item><item><title>Windows で Point Cloud Library(PCL) の環境構築</title><link>https://iimuz.github.io/scrapbook/software/windows-point-cloud-library/</link><pubDate>Mon, 29 Oct 2018 10:26:38 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/windows-point-cloud-library/</guid><description>HAHAHUGOSHORTCODE-TOC0-HBHB
実行手順 vcpkg のインストール とりあえず、 vcpkg を vendor 下に取り込み、 vcpkg のビルドを実施します。
$ git submodule add https://github.com/Microsoft/vcpkg.git vendor/vcpkg $ cd vendor/vcpkg $ powershell -ex bypass -f ./scripts/bootstrap.ps1 この時、 wsl を利用していると下記のようなエラーが出る場合があります。
Building vcpkg.exe ... pch.cpp CL : fatal error C1083: コンパイラの中間生成物 ファイルを開けません。&amp;#39;c:\users\hoge\point-cloud-library-sample\vendor\vcpkg\toolsrc\vcpkglib\release\vcpkglib.pch&amp;#39;:No such file or directory [C:\Users\hoge\point-cloud-library-sample\vendor\vcpkg\ toolsrc\vcpkglib\vcpkglib.vcxproj] C:\Users\hoge\point-cloud-library-sample\vendor\vcpkg\scripts\bootstrap.ps1 : Building vcpkg.exe failed. Please ensure you have installed Visual Studio with the Desktop C++ workload and the Windows SDK for Desktop C++. 発生場所 行:1 文字:4 + &amp;amp; {&amp;amp; &amp;#39;C:\Users\hoge\point-cloud-library-sample .</description></item><item><title>Golang でクロスビルドする Makefile の設定</title><link>https://iimuz.github.io/scrapbook/software/golang-cross-build/</link><pubDate>Mon, 22 Oct 2018 18:44:17 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/golang-cross-build/</guid><description>Golang で一括で各プラットフォー用のバイナリを生成するコマンドの書き方を調べた時のメモです。 結論としては、下記のコードで一括でバイナリを生成できます。 対象のプラットフォームを増やす場合は、 for 文の要素を増やせばできます。
一点だけ問題があり、 windows のみ実行ファイルの拡張子として .exe を付ける必要があります。 そのため、上記のままでは windows 側で実行ファイルとして認識してくれません。 リネームすればよいのですが、 簡単な if 文程度で分岐できないでしょうか。</description></item><item><title>Hyper で最終行付近が見切れる場合の対処法</title><link>https://iimuz.github.io/scrapbook/software/hyper-sytle-reflesh/</link><pubDate>Mon, 22 Oct 2018 18:38:11 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hyper-sytle-reflesh/</guid><description>Hyper を利用している場合に、たまに最終行付近が見切れることがあります。 どうも、タブを追加したときに一段下がる動作をするのですが、 この時に描画範囲がうまくリセットされないために起こっているようです。 Ctrl + L とかで再描画してもダメな場合が多かったですが、 単に Window サイズを変更してあげると、描画サイズのリセットがかかるようです。
Windows とかの場合は、 Win + ↓ とかを押して、 いったん画面サイズを小さくしてから Win + ↑ とかで最大化すると正常に描画されます。</description></item><item><title>複数リポジトリを横断したタスク管理</title><link>https://iimuz.github.io/scrapbook/software/watch-multi-repositories-issues/</link><pubDate>Sun, 21 Oct 2018 19:42:45 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/watch-multi-repositories-issues/</guid><description>GitHub と GitLab に複数のリポジトリがあると、 全体で一括した issue の状態を見たくなります。 細かい情報は各 issue を見に行くとして、 タイトルとアップデート日くらいを連携できるツールはないでしょうか。
結局、 Integromat を利用して GitHub と GitLab の issue を全て Trello へ移動するようにしました。 しかしながら、このような方法では、機能的に冗長な部分も多く逆に使いにくい状態になっています。 例えば、 issue でもコメントなどを記載でいますし、 Trello 側でもコメントができます。 また、更新があった時にどうするかということを Integromat で設定することもできますが、 色々設定を始めると複雑になります。 また、ラベルが 2 重管理になり双方向でできないので結構めんどくさくなっています。
Githubで自分にアサインされたIssueをTodoistに追加する方法
Todoist と GitHub の連携に IFTTT を利用しています。 確かに、 IFTTT か Zapier あたりを利用すれば、 新規チケットとクローズくらいは連携できるでしょうか。
Integromat による Trello・GitHub 連携
Waffle というアプリは GitHub のアカウントを利用して連携ができるそうです。 後で確認しますが、 GitLab が対応していないとすると少々めんどくさそうです。
Integromat という IFTTT や Zaiper の類似サービスもあるようです。
CodeTree
GitHub のみになりますが、複数リポジトリ管理が出来そうです。 GitLab 連携していないのが残念です。</description></item><item><title>プロジェクト単位で git config の設定を変更する</title><link>https://iimuz.github.io/scrapbook/software/git-config-include-if/</link><pubDate>Wed, 17 Oct 2018 19:13:04 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/git-config-include-if/</guid><description>GitHub と GitLab に加えて、社内リポジトリで git の履歴にのこるユーザ名やメールを変更したい場合があります。 今までは、 git clone してから git config --local で設定をリポジトリ単位でしていました。 しかしながら、 Go 言語のディレクトリ構成をとっているため、 あるフォルダしたからは全て一定になります。 また、数が増えてくると設定し忘れることが良くあります。 どうしたら管理が楽になるか調べていたところ、 include に条件設定できることが分かりました。 これを用いれば解くてフォルダ下は全て任意の設定にできます。
git 2.13.0 から git config の include で if が利用できます。 書き方は下記のようになります。
[includeIf &amp;#34;&amp;lt;条件&amp;gt;&amp;#34;] path = &amp;lt;設定ファイル&amp;gt; GitHub と GitLab でユーザ名やメールアドレスが異なる場合は、下記のように設定します。 ghq を利用してディレクトリを管理していると想定します。
[includeIf &amp;#34;gitdir:~/src/github.com/&amp;#34;] path = ~/.gitconfig.github [includeIf &amp;#34;gitdir:~/src/gitlab.com/&amp;#34;] path = ~/.gitconfig.gitlab ~/.gitconfig.github
[user] name = hoge.github email = hoge.github@example.com ~/.gitconfig.gitlab
[user] name = hoge.gitlab email = hoge.</description></item><item><title>Hyper のシェルとして git for windows を利用した場合の画面リフレッシュ方法</title><link>https://iimuz.github.io/scrapbook/software/reflesh-git-for-windows-on-hyper/</link><pubDate>Wed, 17 Oct 2018 19:09:33 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/reflesh-git-for-windows-on-hyper/</guid><description>hyper.js に下記のようにターミナルの設定を入れるといいようです。
env: { TERM: &amp;#39;msys&amp;#39;, }, Hyper の起動時に cmd と powershell なども選択して起動できるようにしているため、 起動するシェルによって TERM の設定を変えなければいけないような気がします。 powershell と cmd の範囲では、 TERM に msys を設定したままでも、普通に動いているように見えます。 WSL と Git for Windows の両方を選択する状況は発生していないため、 これは設定しっぱなしでもよいのかもしれません。
参考情報: &amp;ldquo;clear&amp;rdquo; broken on Windows when using with Git BASH</description></item><item><title>git for windows の ターミナル出力で文字化けする場合の対処法</title><link>https://iimuz.github.io/scrapbook/software/encoding-git-for-windows/</link><pubDate>Wed, 17 Oct 2018 19:06:43 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/encoding-git-for-windows/</guid><description>git for windows の bash を利用していて日本語文字列が文字化けする場合は、 エンコーディングを UTF-8 に変更すればよいそうです。 コマンドラインから利用する場合などでも同様に修正できるようです。
変更方法は、下記のようになります。
$ export LANG=ja_JP.UTF-8 恒常的に適用する場合は、 git for windows の場合の .bashrc は C:\Program Files\Git\etc\bash.bashrc になるので、 これに書いておけばよさそうです。
参考文献
Git for Windows で漢字等非ASCII文字が文字化けする場合 Windows Git 2.6.1で~/.bashrcがGit Bashから読み込まれるようにする</description></item><item><title>gcc でライブラリを静的リンクする方法</title><link>https://iimuz.github.io/scrapbook/software/gcc-static-link/</link><pubDate>Tue, 16 Oct 2018 21:30:34 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcc-static-link/</guid><description>ライブラリを動的リンクではなく、強制的に静的リンクをしてしまいたい場合があります。 そういう時は、 gcc のオプションで &amp;ndash;static を利用します。 pkg-config を利用している場合は、 pkg-config が対応していれば、 下記のように記載することで適切に処理してくれます。
`pkg-config --static hoge` ただ、 pkg-config が対応してない場合もあるため、 対応していない場合は、下記のように直前に &amp;ndash;static を記載しても静的リンクできるようです。
--static `pkg-config hoge` 参考文献: How to use pkg-config to link a library statically</description></item><item><title>linux 環境の場合は、共有ライブラリの依存関係は ldd コマンドで調べられる</title><link>https://iimuz.github.io/scrapbook/software/ldd-shared-library/</link><pubDate>Tue, 16 Oct 2018 21:14:16 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/ldd-shared-library/</guid><description>docker で必要なバイナリのみを移動するときに、 依存するライブラリを調べるために利用しました。 linux では、 ldd コマンドが使えます。 ldd コマンドは、下記のようにして利用します。
$ ldd hoge.so 例えば、適当に共有ライブラリのファイルを調べると下記のような結果になります。
$ ldd libhandle.so.1.0.3 linux-vdso.so.1 (0x00007fffef3c2000) libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffc79340000) /lib64/ld-linux-x86-64.so.2 (0x00007ffc79a00000)</description></item><item><title>windows10 環境で cuda + visual studio integration のインストールが失敗する</title><link>https://iimuz.github.io/scrapbook/software/cuda-vs-integration/</link><pubDate>Mon, 17 Sep 2018 15:33:53 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cuda-vs-integration/</guid><description>いったんは、下記の手順で CUDA をインストールできることを確認しました。 ただ、その後、バージョンアップなどでもインストールに失敗したので、 OS のクリーンインストールを行い、 windows ドライバのアップデートを初期に切ってから行うと、 アップデートなども正常にできるようになりました。 たぶん、他にも影響がある項目があるのだと思いますが、 詳細は分かっていないです。 できれば最初に windows のデバイスドライバの自動アップデートを 切ってしまったほうが楽だと思います。
解決策としては、下記に記載の方法をとりました。
CUDA 9.1 cannot install due to failed Visual Studio Integration 上記のうち実行したのは下記のような手順です。
NVIDIA ドライバで動いているディスプレイをデバイスマネージャからドライバの更新で別のドライバに設定する NVIDIA と名前の付くアプリをすべてアンインストール NVIDIA 関連のディレクトリを Program Files, Program Files (x86), ProgramData から削除 再起動 ここで、ディスプレイに NVidia のドライバが当たっていないことを確認 CUDA をインストール</description></item><item><title>docker 環境で KVM を利用する</title><link>https://iimuz.github.io/scrapbook/software/docker-kvm-privileged/</link><pubDate>Mon, 17 Sep 2018 15:24:58 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker-kvm-privileged/</guid><description>KVM + GPU Passthrough ができることまでは確認しました。 これに加えて、 docker を利用することで、 GPU の passthrough 設定のみしておけば、 package 類はインストールしなくても利用できました。
docker image を生成する Dockerfile と、 docker-compose.yml のサンプルを下に置いておきました。
GitHub: iimuz/docker-kvm</description></item><item><title>KVM + GPU Passthrough + windows で仮想環境を構築</title><link>https://iimuz.github.io/scrapbook/software/docker-kvm-windows/</link><pubDate>Mon, 17 Sep 2018 14:16:22 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker-kvm-windows/</guid><description>windows 環境を仮想化し、 GPU を利用可能な環境を作成する方法です。 windows10 を利用した場合は、 GPU Passthrough が正常に動作することを確認しました。 一方で、 windows7 では GPU Passthrough が正常に動いていないです。
あと、今回の試し範囲では GPU Passthgough した後に、 再起動なしで GPU をホスト PC で利用する方法が分かっていません。 そのため、 NVIDIA Docker などと使い分けができていないです。 多分、普通に使うなら GCP とかで GPU インスタンスを利用したほうが簡単です。
環境構築手順 ハードウェア要件 GPU Passthrough するにあたり、ホスト PC には2つ以上の GPU が必要となります。 ひとつは、ホスト PC の UI を出力するためのグラフィックボードであり、 もうひとつはゲスト PC に Passthrough するグラフィックボードになります。 ホスト PC のグラフィックボードは、 CPU などに内蔵されているオンボード GPU でも可能です。
その他に、 Intel VT や AMD-V などの仮想化に対応している CPU か マザーボードである必要があります。 また、 UEFI ブートに対応している必要もあります。 これらは BIOS の設定画面から有効化することができますが、 有効化できない場合は、そのホスト PC では GPU Passthrough した仮想環境を用意することができないことになります。</description></item><item><title>c++ の new 演算子によるメモリ確保</title><link>https://iimuz.github.io/scrapbook/software/cpp-new/</link><pubDate>Sat, 08 Sep 2018 15:21:01 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cpp-new/</guid><description>c++ のデバッグで new を置き換えていた時に、 コンパイルエラーが発生して new の挙動に関して調べた時のメモです。 placement new というのがあるのを知りませんでした。 よほどの状態でないと使わないと思いますが、 メモリ確保を何度も行うような状況では有効な方法に思えます。
c++ の new の挙動には下記の 3 種類があるようです。 実際には、それぞれに対応した配列バージョンがあり、 開放のための delete バージョンも定義されています。
// デフォルト void* operator new(std::size_t) throw(std::bad_alloc); // (非推奨) c++規格化前との互換性のため void* operator new(std::size_t, const std::nothrow_t&amp;amp;) throw(); // placement new(配置構文new) void* operator new(std::size_t, void*) throw(); それぞれを呼び出すには下記のようにする必要があります。
// デフォルト auto pDefault = new int; // (非推奨) c++規格化前との互換性のため auto pDeprecated = new(std::nothrow) int; // placement new (配置構文 new) int buff; auto pPlacement = new(&amp;amp;buffer) int; placement new は、既存の確保済み領域を用いて new と同等の挙動を行うために利用します。 これはデフォルトの new では動作が遅い場合に、 一括で巨大なメモリ領域を確保し、内部の割り振りを手動で行う場合などに利用します。 new は下記に示す動作を行います。</description></item><item><title>windows で c++ を用いてメモリ使用量を取得する</title><link>https://iimuz.github.io/scrapbook/software/cpp-windows-memory-usage/</link><pubDate>Sat, 08 Sep 2018 14:25:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cpp-windows-memory-usage/</guid><description>windows 環境において、 コード中の特定位置で現在のプロセスが利用しているメモリ使用量を取得したかったので、 調べた時のメモです。
結論 windows.h と psapi.h を利用して、 PROCESS_MEMORY_COUNTERS_EX という構造体にメモリ使用量が取得できます。 psapi.h は psapi.lib をリンクする必要がありましたが、 下記のようなコードで構造体中にメモリ使用量を取得できます。
GetProcessMemoryInfo メモリを取得する際には、 GetProcessMemoryInfo という関数を利用します。 GetProcessMemoryInfo は、プロセスのハンドルを渡す必要があります。 実際に作った exe を動かし、その時のメモリ情報を必要とする場合は、 GetCurrentProcess で取得できます。
一方で、他のプロセスのハンドルを取得すれば、そのプロセスのメモリを取得することも可能です。 ただ、多くの場合はリソースモニタとかで取得したり記録しておけば十分な気もします。
PROCESS_MEMORY_COUNTERS_EX メモリ情報は PROCESS_MEMORY_COUNTERS_EX という構造体に取得できます。 結構色々取得できるのですが、 private usage を取得しておけば、 とりあえずのメモリ量監視としては十分な気がします。
各種用語の開設に関しては、下記が非常に参考になりました。
Windows の使われてるメモリの量
visual studio でのお試しプロジェクト 動作テストのために、 Visual Studio 2010 と古いですが、プロジェクトを作成したサンプルを置いておきます。
iimuz/visualstudio-private-bytes-sample</description></item><item><title>VS Code 上で vim キーバインドの実現</title><link>https://iimuz.github.io/scrapbook/software/vscode-vim/</link><pubDate>Sun, 02 Sep 2018 16:38:04 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode-vim/</guid><description>VS Code 上で vim キーバインドが使えないか調べたら、 GitHub: VSCodeVim/Vim というのがありました。 ほかのキーバインドとかぶったり、いくつか挙動が怪しかったりしますが、 モードの切り替えができるようになったので楽になりました。 本格的な作業自体は、 vim を使うのでちょっとした編集とかができれば十分なので、 これで問題ないような気がします。
一点だけちょっと使いにくかったのが、 w での単語移動が日本語が続いていると次の行まで行ってしまいます。 多分半角スペースとか改行で判定されています。 せめて、ひらがなとかカタカナ、漢字の変わり目で止まってくれると嬉しいのですが。</description></item><item><title>windows のプロダクトキーを変更する</title><link>https://iimuz.github.io/scrapbook/software/change_windows_product_key/</link><pubDate>Sun, 02 Sep 2018 12:50:12 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/change_windows_product_key/</guid><description>MSDN のサブスクリプションとかに登録していると windows キーが複数手に入るのですが、 どの環境にどのキーを入れているかわからなくなって、 位置から対応させたくなったので、 windows のプロダクトキーを修正する方法です。 基本的には、下記のコマンドで登録・削除などができるようです。
参考情報
（違法じゃなく）無理やりプロダクトキーを変更する方法</description></item><item><title>chrome のテキスト入力をローカルのエディタで行う</title><link>https://iimuz.github.io/scrapbook/software/inputs_text_on_browser_using_local_editor/</link><pubDate>Sun, 02 Sep 2018 12:19:27 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/inputs_text_on_browser_using_local_editor/</guid><description>chrome でテキスト入力が多くなってくると、ローカルのエディタで編集したくなってきたので、 Chrome拡張のGhostText導入手順(Visual Studio Code編) に書いてあった GhostText と VSCode で実現できることを確認しました。 Chrome と VSCode のそれぞれにプラグインを導入すると chrome 側でテキスト入力したいときに、 Ctrl + K + L を押すと下記のような青枠がついた状態となって、 VSCode にテキストが同期されます。 すでに入力済みのテキストがあっても動作するので楽です。</description></item><item><title>c++ の std::unique_ptr におけるデリータ指定</title><link>https://iimuz.github.io/scrapbook/software/cpp-unique-ptr-deleter/</link><pubDate>Sun, 02 Sep 2018 11:38:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cpp-unique-ptr-deleter/</guid><description>win32api を利用するときに CreateHandle は CloseHandle を呼部必要のある Handle を返すのですが、 Handle 型で返すために単純に std::unique_ptr でいつも通りのデリータを指定することができませんでした。
std::unique_ptr, deleters and the Win32 API によると、 CreateHandle のようにポインタ以外が帰ってきてしまう場合に std::unique_ptr を利用したい場合は、 下記のように関数オブジェクトを定義してデリータに指定すると利用できることが分かりました。
普通にポインタを返してくれるタイプであれば、 デリータ指定自体は、一般的には下記の方法が利用できるはずです。
関数オブジェクト
default_delete の特殊化
関数
状況により使い分けは必要ですが、関数版が一番記述量が少なくて好きです。 default_delete の特殊化は、どこに書くべきなのかがよくわからなくて、使ったことがないです。 cpp ファイルの方に書くと、必要なところで毎回記述が必要になります。 自作クラスならヘッダファイルに宣言して、 cpp に実体を記述することもできますが、 自作クラスを std::unique_ptr で利用する前提で書くのも何かなと思ったりします。</description></item><item><title>httpsとSSLとTLSのメモ</title><link>https://iimuz.github.io/scrapbook/software/https-ssl-tls/</link><pubDate>Sun, 26 Aug 2018 17:52:18 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/https-ssl-tls/</guid><description>HTTPSとSSL、TLSで何が違うのかよくわかっていなかったので、簡単に調べた時のメモです。 結論としては、下記のような感じでしょうか。
TLSは、暗号化などのセキュリティ機能を実現する方法の規約 TLSは、SSLのバージョンアップ版 SSL3.0は脆弱性が分かっているので、利用してはいけない wikipedia TLS#SSL3.0 HTTPS = HTTP + TLS SSLとTLSはセキュア通信のための仕組みであり、SSLにはバージョンが1.0(非公開)、2.0、3.0とあった。 ただし、SSL3.0は脆弱性が見つかっているので利用してはいけないことになっている。 TLS1.0はSSLの進化系になる。 そのため、TLS1.0はSSL3.1と呼ばれることもあるとのことです。
TLSが提供する機能は主に下記のようになるそうです。
通信相手の認証 通信内容の暗号化 改竄の検出 現在の最新バージョンはTLS1.3であり、ネゴシエーションに利用するバージョンはSSL3.4になるそうです。</description></item><item><title>powershell でシンボリックリンクを生成する</title><link>https://iimuz.github.io/scrapbook/software/ps1-symboliclink/</link><pubDate>Sun, 26 Aug 2018 17:46:01 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/ps1-symboliclink/</guid><description>powershellにおいてシンボリックリンクをpowershellのコマンドで作ることができるようです。 従来はcmdの mklink を利用していた部分を new-item で置き換えることができます。
$ cmd /c mklink dst src # 従来のcmdによるコマンド $ New-Item -Type SymbolicLink -Path dst -Value src</description></item><item><title>Enter-PSSession後のNew-PSDrive</title><link>https://iimuz.github.io/scrapbook/software/new-psdrive/</link><pubDate>Sun, 26 Aug 2018 17:39:35 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/new-psdrive/</guid><description>windows環境ではsshのようなことが Enter-PSSession コマンドにより可能になります。 (ただし、リソース制限などいくつかできないことがあります。) Enter-PSSession 後の操作において New-PSDrive というネットワークドライブのマウント作業において、 権限情報が不足し使用できなくなります。 そのため、 New-PSDrive を Enter-PSSession 後に利用する場合は -Credential オプションを付与する必要があるみたいです。
$ Enter-PSSession ip $ New-PSDrive DriveName -PSProvider FileSystem -Root \\remote-address -Credential domain@username 最後の -Credential オプションがないとマウントできなくなっています。</description></item><item><title>git worktree を用いた別作業ディレクトリの用意</title><link>https://iimuz.github.io/scrapbook/software/git-worktree/</link><pubDate>Sun, 26 Aug 2018 15:30:22 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/git-worktree/</guid><description>git で作業中に複数の作業を並行しなければならない場合があります。 例えば、バグを修正中に、別件の依頼を受けて別のバグ修正や動作確認をしなければならないような場合です。 そのような場合は、 git stash を利用していったん変更を保存して、必要な環境にcheckoutするという方法も可能です。 ただ、c++とかビルドする場合は、stashを利用してしまうと、ビルドの中間ファイルはコミット対象外なので、 戻ってきたときに一からビルドが必要になります。 一瞬でビルドが終わるようなプロジェクトならいいのですが、 一からビルドすると1時間以上かかるようなプロジェクトだとスイッチする気がうせてしまいます。 そのような場合に、 git worktree を利用することで、 もう一つ別のディレクトリを作成して作業ができるようになるので便利です。
コマンドとしては、下記のような構文になります。
$ git worktree add path/to/dir -b new/branch source/branch 上記のようにすると、 source/branch をもとにして new/branch を作成し、 path/to/dir に新規でファイルが作成されます。 作業ディレクトリが干渉しないため、非常に使いやすいです。
作業が終わったら作成したディレクトリは削除して、pruneすることでworktreeは削除できます。
$ rm -rf path/to/dir $ git worktree prune</description></item><item><title>Qiita: ロシアの天才ハッカーによる【新人エンジニアサバイバルガイド】を読んで</title><link>https://iimuz.github.io/scrapbook/software/russia-engineer-survival-guide/</link><pubDate>Sun, 26 Aug 2018 15:21:16 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/russia-engineer-survival-guide/</guid><description>Qiita: ロシアの天才ハッカーによる【新人エンジニアサバイバルガイド】 が心にとどめておいたほうがよさそうな部分が結構あったので抜粋しておきます。
コードのクオリティに腹をたてるな。同僚の2倍のスピードでリリースをするよう心がけろ。 この部分は痛いほどわかりますが、どうしてもできないときもあります。 でも今後なるべく気を付けようと思います。 (別プロジェクトに参加していきなりエラーのデバッグを割り当てられて、 コードを見た時によく思ってしまう。)
Chef,Ansible,Puppetを学ぼう。運用エンジニアの時間を浪費するのはやめよう。 環境には寄ると思いますが、Dockerというのもありかな。
常に４つの環境を用意しておこう。 開発環境で動いても、本番環境で想定通りに動くかは別問題だからテスト環境はよく準備するようにします。
常にTLSを使おう。社内サービスであってもだ。 社内利用だとあまりTLSを気にしていませんでした。 どうしても甘くなってしまいます。</description></item><item><title>C#でキャンセル処理を利用したタイムアウトの実現</title><link>https://iimuz.github.io/scrapbook/software/cs-cancellation-task/</link><pubDate>Sun, 26 Aug 2018 12:31:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cs-cancellation-task/</guid><description>C#で一定時間内に処理が終わらなければ終了する中断する処理を書きたかったので、調べた時のメモです。 タスクを起動し、キャンセル処理を一定時間後に起動するようにします。 本来のタスクとキャンセル処理のいずれかが完了した時点で、処理を終了するようにすることで、 タイムアウト処理が実現できるようです。</description></item><item><title>技術向上ガイド</title><link>https://iimuz.github.io/scrapbook/software/google-technical-guide/</link><pubDate>Fri, 24 Aug 2018 22:36:25 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google-technical-guide/</guid><description>Qiita: [翻訳] 技術向上ガイドにGoogleのTechnical Development Guideの翻訳があったので読んだ感想です。 色々と書かれているのですが、英語文献が多いので読むのには時間がかかりそうです。 ただ、その中でも課題プロジェクトに取り組むという部分はとっかかりやすいように思いました。
ウェブサイトを作成し維持する、自分自身のサーバーを構築する、またはロボットを構築する
&amp;hellip;
CodeJamやACMの国際大学対抗プログラミングコンテストのようなコーディング競技を通して自分のアルゴリズム知識を磨く
例えば、プログラミングコンテストで日本語でやりやすそうなのはAtCoderやISUCONなどでしょうか。 この辺であれば、過去問なども記載されており取り組むのによいような気がします。
その他に系統は違いますが、Kaggleなどは機械学習の知識をつけるにはよさそうです。</description></item><item><title>gitで一時的に変更の検出を止める</title><link>https://iimuz.github.io/scrapbook/software/stop-git-temp-diff/</link><pubDate>Fri, 03 Aug 2018 20:22:31 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/stop-git-temp-diff/</guid><description>docker-composeを利用していたりすると環境変数ファイル(.env)とかに、 ローカル環境の変数をまとめていたりします。 その状態で、環境に合わせて環境変数ファイルを変更すると、 コミットしなくてよい変更が検出された状態になります。 add対象を慎重に選ぶという方法もあるのですが、 git statusとかで検出しないほうが楽なので、検出を停止する方法です。
$ git update-index --assume-unchanged {ファイル名} # 除外 $ git update-index --no-assume-unchanged {ファイル名} # 解除 $ git ls-files -v | grep ^h # 設定ファイルの確認 注意点として、対象ファイルを本当に変更したときにコミット対象から外れていることに気づけないので、 そこは若干問題です。
参考情報 A4 WORKS Official BLOG: Gitで一時的に”Changes not staged for commit”リストから外す</description></item><item><title>プログラマが知るべき97のこと</title><link>https://iimuz.github.io/scrapbook/software/97-things-that-programmers-should-know/</link><pubDate>Fri, 08 Jun 2018 18:45:05 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/97-things-that-programmers-should-know/</guid><description>プログラマが知るべき97のことという内容で著名な方々のコメント(?)がまとめられたページがありました。 &amp;ldquo;シンプルさは美に宿る&amp;quot;とか&amp;quot;リファクタリングの際に注意すべきこと&amp;quot;ととか、 結構ためになる内容なので一通り目を通すと面白いです。
プログラマが知るべき97のこと 97のことと言いつつ、107個のっている理由は不明です。</description></item><item><title>GitHub の Issue をコミットのマージ時に自動でクローズする</title><link>https://iimuz.github.io/scrapbook/software/close-issues-when-merge/</link><pubDate>Thu, 07 Jun 2018 09:41:36 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/close-issues-when-merge/</guid><description>ブランチの最初で、下記のような空コミットを作成することで、 メインブランチへ取り込まれたときにクローズできます。
$ git commit --allow-empty -m &amp;#34;resolve #id&amp;#34; また、このクローズ動作はGitHubの設定画面で指定したメインブランチに対してマージされたときに発生するようです。 そのため、例えばmasterブランチはCIなどによって自動でコミットされる対象となっている場合は、 可能ならばメインの開発ブランチ(developとか?)をメインブランチに設定しておくと対象のブランチにマージされた段階で発生します。</description></item><item><title>chrome のみで GCE にアクセスする環境構築した時のメモ</title><link>https://iimuz.github.io/scrapbook/software/gce_ssh_using_chrome/</link><pubDate>Wed, 06 Jun 2018 16:53:55 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gce_ssh_using_chrome/</guid><description>概要 アクセスするだけなら GCE は cloud console でできます。 ポートフォワードしたい場合は、 secure shell という chrome アプリを利用すればできます。
フロー GCE の cloud console でアクセス用のキーを作成(ssh-keygen)し、メタデータとして登録 本当はよくないかもしれないが、とりあえず動かしたいだけなら gce 用のキーがすでにあるのでそれで対応する。 secure shell では public キーと pvivate キーの両方が必要となるため、両方ダウンロード ssh client として chrome app の secure shell を利用する。 設定画面では、 user name と ip (外部IP)、port を指定する ID(Identify?)のところに pub と private の両方のキーを import する SSH 引数に -L 8888:localhost:8888 gce 側で何かport 8888で待ち受けさせる(適当なweb serverを立てる) client pc 側でブラウザから localhost:8888 にアクセス 所感 手元の端末の環境(Linux, Windows, Mac)によらず動かせるようにしたかったので試してみました。 これで chromebook とかの安いPCに移行することができるかもしれません。 (chromebook の開発者モードを利用するとかいろいろありそうですが、 できれば通常モードの範囲でやりくりしたいのです。)</description></item><item><title>Travis CIから更新する設定を行った時のメモ</title><link>https://iimuz.github.io/scrapbook/software/travis-ci-blog/</link><pubDate>Sat, 03 Mar 2018 12:56:02 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/travis-ci-blog/</guid><description>このサイトを元記事をmarkdownで書いたらTravisCIでビルドするようにしたので、その際に行ったことのメモです。
概要 TravisCIの登録 TravisCIから自動ビルド対象のリポジトリを設定 Travis Clientをインストールしてsshキーの暗号化 .travis.ymlからビルド方法を設定 sshキーの暗号化 TravisCIからpushするためには、sshを用いる設定としました。 この時、対象とするリポジトリのみに公開鍵を設定し、最悪秘密鍵が漏洩しても他には影響がないようにします。 また、秘密鍵はリポジトリに含める必要があるので、TravisClientを用いて暗号化します。
暗号化するための環境 今回は、dockerを利用してtravis clientの環境を用意しました。 rubyが必要なので、ベースをrubyにして簡単に用意できます。
FROMruby:2.5.0-stretchRUN gem install travis -v 1.8.8 --no-rdoc --no-ri上記で作成したイメージを利用して、下記のように起動すればtravisコマンドが利用できる環境が使えます。
$ docker run --rm -it -v $(pwd):/src:rw localhost:travis-client bash 暗号化方法 travisコマンドを利用して暗号化します。
$ travis login $ ssh-keygen -f travis_key $ travis encrypt-file travis_key 出来上がった.encファイルをコミットします。 また、作成時に openssl ... という行が出力されるのでコピーしておきます。 これは.travis.ymlに記載します。
travis_key.pubはgithubに登録したら消してしまっていいと思います。 また、travis_keyはコミットせずに消去します。
.travis.ymlの記述 ビルド方法はいろいろあると思います。 ビルドし終わった後のデータをpushする部分のみを下記に記載します。
after_success: - openssl # ここに先ほどコピーした内容を記述します。 - chmod 600 ~/.ssh/id_rsa # 権限を書き換えないと正しく動作しないです。 - echo -e &amp;#34;Host github.</description></item><item><title>powershell で tcp のテスト用にサーバとクライアントを用意する方法のメモ</title><link>https://iimuz.github.io/scrapbook/software/powershell-tcp/</link><pubDate>Fri, 02 Mar 2018 21:56:07 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/powershell-tcp/</guid><description>powershellで、ncコマンドのようなことをするために調べたメモです。
成果物 下記のようなpowershellスクリプトを用意し、実行することでncコマンドのようなことが実現できました。
参考資料 bashでtcpや利用して文字列を送信する方法 ncコマンドの使い方 windowsでtcpのポート確認方法 powershellでnetcatスクリプト powershellで繰り返しバッファ送信</description></item><item><title>C#におけるAysncとAwaitの動作に関して調べたときのメモ</title><link>https://iimuz.github.io/scrapbook/software/cs-async-await/</link><pubDate>Fri, 02 Mar 2018 19:43:56 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cs-async-await/</guid><description>C#でasyncとawaitを利用して並列処理を行ったので、その時のメモです。 結構簡単に並列処理を記述できた感じがします。
最終的なコードの雛形 複数のタスクが完了した段階で次のタスクを起動する場合の書き方です。
public async Task methodAsync() { var task1 = Task.Run(() =&amp;gt; { // 何か処理1 }); var task2 = Task.Run(() =&amp;gt; { // 何か処理2 }); var taskAll = Task.WhenAll(task1, task2).ContinueWith(() =&amp;gt; { // 何か処理3 }); return await taskAll.ConfigureAwait(false); } Task Taskは、一連の処理をひとまとまりにした単位になるようです。 また、Taskは呼び出した際に別スレッドで実行されるようになっているようで、 連続で記述した場合は、どんどん別スレッドで並列処理されるようになっているようです。
Task.WhenAll と ContinueWith TaskはContinueWith関数を利用して、その後の処理を連続して実行できるようです。 そのため、2つ以上の関数を実行して、両方が終わった場合に続きの処理を書く場合は、 ContinueWithを利用するか、awaitで全て終了するのを待つかの2パターンありそうです。
(パターン1)
var task1 = Task.Run(() =&amp;gt; { // 何か処理 }); var task2 = Task.Run(() =&amp;gt; { // 何か処理 }); var taskAll = Task.</description></item><item><title>C#においてTCPClientを利用したときのメモ</title><link>https://iimuz.github.io/scrapbook/software/cs-tcp-client/</link><pubDate>Fri, 02 Mar 2018 19:43:39 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cs-tcp-client/</guid><description>C#でTCP Clientを実際に利用したので、その際に作成したコードの雛形をメモしておきます。 本当は、色々と追加で必要な処理とかがあるのかもしれませんが、今回は下記のコードで十分でした。
成果物 下記のコードでクライアントとしてサーバに接続し、文字列送信することが可能です。
注意点 実際には、接続失敗した場合の処理などが別途必要です。 また、このサンプルで利用では Connect 関数を利用していますが、 同期関数となるため接続が完了するまでスレッドが停止してしまいます。 停止させるのが問題になる場合は、 ConnectAsync 関数を利用するか、 Taskなどを利用して非同期に実行する必要があります。</description></item><item><title>Jenkinsでのparallel処理</title><link>https://iimuz.github.io/scrapbook/software/jenkins-parallel/</link><pubDate>Wed, 14 Feb 2018 09:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jenkins-parallel/</guid><description>jenkinsでpallalelしたときの挙動に関してです。 きちんと調べればわかるのかもしれませんが、動作させたときに起こった現象をまとめておきます。
下記のようにnodeの下にparallelを記載した場合は、同一ノード中で処理が並列で実施されるようです。
pipeline {
agent { node { label &amp;quot;slave&amp;quot; } }
stages {
stage ('hoge') {
pallalel {
stage ('p1') { step { hoge } }
stage ('p2') { step { hoge } }
}
}
}
}
一方で、下記のようにステージにノードが含まれている場合は、複数ノードで並列で実施されるようです。
pipeline {
agent none
stages {
stage ('hoge') {
pallalel {
stage ('p1') {
agent { node { label &amp;quot;slave&amp;quot; } }
step { hoge }
}
stage ('p2') {
agent { node { label &amp;quot;slave&amp;quot; } }
step { hoge }
}
}
}
}
}</description></item><item><title>Gmailで+付きのメールアドレスから送信する方法</title><link>https://iimuz.github.io/scrapbook/software/gmail-alias/</link><pubDate>Sun, 28 Jan 2018 15:49:46 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gmail-alias/</guid><description>結論 送信アドレスを直接設定できないのでGMailのアドレスに追加する。
方法 GMailのページをPC環境で開き、設定から &amp;ldquo;アカウントとインポート&amp;rdquo; -&amp;gt; &amp;ldquo;名前&amp;rdquo; -&amp;gt; &amp;ldquo;他のメールアドレスを追加&amp;rdquo; で任意のアドレスを追加する。
例 hoge@gmail.com の追加パターン hoge+geho@gmail.com を追加すると、送信アドレスに hoge+geho@gmail.com が追加される。
注意 スマホとかだと設定画面へ行けませんでした。</description></item><item><title>powershellスクリプトを書くときのテンプレート</title><link>https://iimuz.github.io/scrapbook/software/powershell-template/</link><pubDate>Sat, 13 Jan 2018 21:19:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/powershell-template/</guid><description>powershellスクリプトを書くときに、helpコメントやwhatifなどの標準機能を利用できるように調べたときのメモです。
最終テンプレート 何ができるか 上記テンプレートに従って書いた場合に何ができるようになるかというと、下記の標準機能が利用できます。
Get-Help ヘルプ表示をすることでスクリプトの処理内容をチェックすることができます。 また、引数などについても確認できるようになります。
# Helpの取得 $ Get-Help hoge.ps1 # 使用例などを含めてHelpを取得 $ Get-Hellp hoge.ps1 -detailed # 全てのヘルプとピックを取得 $ Get-Help hoge.ps1 -full WhatIf 実行時にdryrunをするためには、powershellコマンドの場合はWhatIfが使われますが、 このWhatIfをスクリプト内に伝搬することが可能になります。 そのため、下記のようにスクリプトを実行すると、dryrunが実現できます。
$ .\hoge.ps1 -WhatIf その他のスクリプトを書くときの注意点 標準出力系 powershellの場合、出力に関しては下記のパターンが用意されているので、使った方がデバッグが楽に行えると思います。
Write-Verbose Write-Host Write-Warning Write-Error Write-Debug 上記のうち、Host、Warnng、Errorは何もしなくても出力されます。 一方、VerboseとDebugは下記のようにスクリプトを実行すれば、実行時のみ出力することができます。 注意点として、Debugフラグをつけた場合はInquireになるため、メッセージの場所で続行するか否かの選択肢が毎回発生します。
# output verbose message $ .\hoge.ps1 -Verbose # output debug message(inquire) $ .\hoge.ps1 -Debug 進捗バー 処理量が多い時などは、下記のように進捗バーを出すことが簡単にできます。
for ($I = 0; $I -le 100; ++$I) { Write-Progress -Activity &amp;quot;Hoge Process&amp;quot; -Status &amp;quot;Hoge $I&amp;quot; -PercentComplete $I } -PercentComplete は、100分率で記載すれば良いようです。</description></item><item><title>windowsのコマンドプロンプトでdokcer + vimを利用すると日本語を含む行で適切に表示されない</title><link>https://iimuz.github.io/scrapbook/software/cmd-vim-strange-cursor/</link><pubDate>Sun, 03 Dec 2017 21:28:02 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cmd-vim-strange-cursor/</guid><description>現象 日本語を含む行では、なぜか行末の位置を適切に表示できなくなり、編集などをすると表示とは別の位置に表示される。
対処方法 コマンドプロンプトをutf-8にしていることが問題でした。 下記コマンドで、cp932に変更することで正常に動作することを確認しました。
$ chcp 932 詳細 windows 7 + conemu + コマンドプロンプト + docker + vim で日本語表示した時に問題が発生していました。 他の環境での設定もあり、utf8にコマンドプロンプトの出力を変更していました。
$ chcp 65001 utf-8ファイルのgit diff出力などは、こうしておかないと文字化けしていたのですが、 今回はこの設定がダメだったようです。
他にもconemuで下記の設定にしています。
フォント: MS ゴシック monospace は OFF</description></item><item><title>DockerでJenkinsのmasterとslaveを用意</title><link>https://iimuz.github.io/scrapbook/software/jenkins_docker_master_slave/</link><pubDate>Sat, 12 Aug 2017 12:32:37 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jenkins_docker_master_slave/</guid><description>Jenkinsを利用したCI環境の構築 privateリポジトリなど個人用にCIを行うためにdockerを用いてjenkins環境を構築したときのメモです。
master環境の構築 dockerhubに用意されているimageを利用しました。
最終形のpluginと設定 pluginリスト
SSH Slaves plugin slaveをssh接続で利用するために必要です。 これをいれないとノードの追加で&amp;quot;SSH経由でUnixマシンのスレーブエージェントを起動&amp;quot;という選択肢が出ませんでした。 dockerのjenkins設定
master: image: jenkinsci/jenkins:latest environment: JAVA_OPTS: -Xmx1g JENKINS_OPTS: --prefix=/jenkins --httpPort=1313 volumes: - ./master:/var/jenkins_home:rw ports: - 1313:1313 slaveの設定画面 slave設定 今回は接続できることを確認するためなので、単にslaveを起動します。
slave: image: jenkinsci/ssh-slave:latest expose: - 22 depends_on: - master 経過ログ プラグイン類は全てなしで初期設定を行いました。
ただ、それだとslaveへの接続で&amp;quot;SSH経由でUnixマシンのスレーブエージェントを起動&amp;quot;という選択肢が現れなかったので、sshが選択できそうなプラグインのSSH Slaves pluginを導入して見ました。 最小構成の方法かどうかは不明ですが、とりあえず選択肢が現れたのでOKとします。
masterからslaveへ接続できなくて詰まりました。 結局のところ、sshキーの認証をslave側で適切にできていなかったことが原因のようです。
masterでsshキーを作成(パスなどは設定せず)
# master container $ ssh-keygen -t rsa slave側に ~/.</description></item><item><title>windowsでネットワークドライブからsymlinkを有効にする</title><link>https://iimuz.github.io/scrapbook/software/windows-symlink-from-remote/</link><pubDate>Mon, 29 May 2017 14:01:34 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/windows-symlink-from-remote/</guid><description>概要 windowsを利用していてネットワークドライブにあるsymlinkのディレクトリの情報を powershellから取得する方法を調べました。 セキュリティとしては甘くなるようです。
# 現在の設定を確認する $ fsutil behavior query symlinkevaluation # リモートでのシンボリックリンクを有効にする $ fsutil behavior set symlinkevaluation r2r:1 r2l:1</description></item><item><title>DockerでFessを動かします</title><link>https://iimuz.github.io/scrapbook/software/dockerfess/</link><pubDate>Sun, 04 Dec 2016 12:56:10 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/dockerfess/</guid><description>概要 dockerでfess環境を構築します。 ただ、どうやってローカルのファイル検索結果を開くようにするかが問題です。 単純にダウンロードなら動作させられますが、 直接開きたいのです。(セキュリティ上Web利用だとしにくいのはわかっているのですが。)
手順 docker hubからcodelib/fessのイメージをpullします。
下記コマンドで実行します。
$ docker run -p 8080:8080 -d codelib/fess:latest 変更 そのままでは、利用しにくいので設定を変更しています。
nginxのreverse proxy用設定 イメージをそのまま利用すると、localhost:8080に展開されます。 私の環境では、nginxを用いてリバースプロキシを設定しており、 サブディレクトリで複数のアプリケーションを分けています。 そこで、/opt/fess/bin/fess.in.shを変更しています。 デフォルトの状態から変更している部分のみ記載します。
# localhost:8888/fess/でアクセスできるように変更します FESS_JAVA_OPTS=&amp;#34;$FESS_JAVA_OPTS-Dfess.context.path=/fess/&amp;#34; FESS_JAVA_OPTS=&amp;#34;$FESS_JAVA_OPTS-Dfess.port=8888&amp;#34;</description></item><item><title>WindowsでDocker+Hugoサーバを動作させる方法です</title><link>https://iimuz.github.io/scrapbook/software/dockerwindows/</link><pubDate>Sat, 26 Nov 2016 12:08:10 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/dockerwindows/</guid><description>概要 Mac側でdockerを利用してhugoの実行環境を作成したのですが、 同じデータを共有しているwindows側でも ビルドとデプロイができるdocker環境を作成しました。 その際、windows側だと確認用のローカルhugoサーバを建てた時に、 接続IPの設定でハマったのでメモしておきます。
結論 Docker toolboxの場合は、virtualboxを利用しているため、 virtualboxのIPも設定した上で、 hugoサーバのアドレス設定を適切にする必要がありました。 (Port番号は、どこがどこに繋がっているのか明確にするためにわざと変えています。 別に変える必要はないので、本当は全部1313(hugoのデフォルト)にしています。)
virtualboxの設定画面(docker-machineに利用している仮想マシン) からネットワーク設定を開き、IPとポートを設定します。
例えば、ホストとゲストを下記のように設定します ホスト: IP = 127.0.0.1, Port = 1313 ゲスト: IP = 0.0.0.0 Port = 8888 dockerデーモンを起動する時に、下記に記載するようにポートフォワードしておきます
$ docker run -d -p 8888:80 -v source_volume:mount_dir hugo_image dokcerデーモン内では下記のようにhugoサーバーが起動するようにします。
$ hugo server -p 80 --baseURL=127.0.0.1 --bind=0.0.0.0 -w windows側からブラウザで127.0.0.1:1313にアクセスすると観れます。
構成状況 結論部分で記載したように構成を組むと下記のように設定がなされます。
(hugo: IP = 0.</description></item><item><title>今更ながらにDockerについて調べてみました</title><link>https://iimuz.github.io/scrapbook/software/docker_survey/</link><pubDate>Wed, 23 Nov 2016 21:24:50 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker_survey/</guid><description>Dockerとは何ができるのでしょうか? 色々調べましたが、Dockerの構成などは説明されているのですが、 何ができるようになるのかをわかりやすく書いている文献を見つけられませんでした。
調べた範囲では、下記のようなことができるという感じでしょうか。 実運用でしているわけではないので本当のメリットは不明です。
アプリケーションを実行する環境を構築できる 用意した実行環境が周りを汚さない(多分これは重要) 困ったら即消せる(まあ、環境構築してたら結構失敗するよね) 例えば、下記のようなサイトを参考にさせてもらいました。
paiza開発日誌 いまさら聞けないDocker入門(1) 「Docker」とは、 Docker社（旧dotCloud）が開発するオープンソースの コンテナー管理ソフトウェアの1つです。
ライセンスがオープンソースなのは使いやすいです。 githubのdocker/LICENSEによると、 Appache License2.0に従うようです。
重要なこととして、 NVIDIA Dockerなるdockerイメージがあり、TensorFlowの環境構築に使えるそうです。 NVIDIA Docker
sshによるdocker-machineのdefaultへのログイン 最初に作られたdocker-machineのdefaultへsshで入るときのIDとパスは下記になるそうです。 windowsの場合、 sshで入るにはgit-bashを利用するか(おそらくdockerインストール時に入っています。)、 Windows10であればBash on UBuntu on Windowsで入れます。 私の場合は、Bash on Windowsで入れることを確認しました。
user: docker pass: tcuser Dockerのインストールと起動 Dokcer Toolboxをインストールしてpowershellから起動しようとすると、 いくつかエラーが発生しました。
docker-machineでTLSエラー 下記のようなエラーが発生しました。
Error checking TLS connection: Error checking and/or regenerating the certs: There was an error validating certificates for host &amp;ldquo;192.</description></item><item><title>Python開発環境をDockerで構築します</title><link>https://iimuz.github.io/scrapbook/software/pythonenvwithdocker/</link><pubDate>Wed, 23 Nov 2016 21:17:23 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/pythonenvwithdocker/</guid><description>目標 深層学習の勉強で実際に実行できる環境を整えようと思ったのですが、 以前から入っているpython環境とは別にしたいのでDockerで構築してみました。
pythonにインストールするライブラリは、 O'REILLY ゼロから作るDeep Learningが動作する環境です。 したがって、下記の環境になります。
Python 3.x NumPy Matplotlib 結論 python環境を構築するdockerファイルは下記になりました。 もはやdockerfile必要なのかというレベルで何も書いていないです。(楽すぎます)
FROMpython:3.5.2RUN pip install numpy matplotlib理由 python環境であればpyenvとか利用すれば、環境は分離できるのですが、 利用しているPCがMacとWindowsの両方あります(Macの方が性能が低いです)、 Macの方がプログラミングはしやすいのですが、 深層学習には軽い実験をするのにもマシンパワーが必要となるため、 実行だけはWindowsでやりたいわけです。 MacとWindowsで同じように動く環境を構築するのがめんどくさいという理由です。
注意 Dokcerと深層学習のフレームワーク Tensorflowを利用するならばDockerに公式があります TensorflowのDockerイメージは、Docker Hubにあります。
PUBLIC REPOSITORY:tensorflow/tensorflow
上記イメージは、python2.7になります。 python3系のdockerイメージは公開されていないそうです。 python3系でTensorFlowを利用したい場合は、 公式からForkしてPython3対応を公開されている方がいらっしゃいましたので、 以下を利用すれば良いと思います。
khm/tensorflow: branch/feature-py3 TensorFlow の Docker Image を Python3 で動かす その他 Docker Habに公式イメージがあるフレームワーク PUBLIC | AUTOMATED BUILD chainer/chainer 公式が見つからなかったフレームワーク Caffe DeepDream MacとWindowsではGPUの利用はできません 深層学習で遊ぶためにはGPGPUを利用した方が高速に処理できます。 (場合によってはCPUでは現実時間で終わりません。) ただし、MacかWindowsでDockerを利用する場合、GPUデバイスにアクセスできないため、 CPU実行しかできません。 必要に応じてLinux環境が純粋に入っているPCを用意する必要がありそうです。</description></item><item><title>Bash On Ubuntu On WindowsのGPU利用は(現時点では)できないそうです</title><link>https://iimuz.github.io/scrapbook/software/bashonubuntuonwindows/</link><pubDate>Sun, 20 Nov 2016 18:36:25 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/bashonubuntuonwindows/</guid><description>概要 Windows環境下でTensorFlowをGPU利用で動作させたかったので、 最近追加されたWindows機能である Bash On Ubuntu On Windowsを利用できないか調査しました。 結論としては、現時点ではBash On Ubuntu On WindowsからGPUは使えないそうです。
WindowsでビルドしてGPUで動作させたい場合は、 cmakeに記載の方法を利用するしかなさそうです。
GPU利用できないソース OpenCL &amp;amp; CUDA GPU supportによると、 今のところは対応してくれなさそうです。 (コメントを見る限りTensorFlowで使いたいという人もいるようです。) MSさん頑張って対応してとしか言えないですね。
It’s on the backlog, but not currently planned.
We know many of you would like to be able to accelerate your numerical analysis code via CUDA/OpenCL, etc.
One thing to explore in the meantime is to try running your code in Windows. Windows actually has very powerful GPU-acceleration capabilities and you may well find that much of your existing code may well work already or require trivial effort to port to Windows itself.</description></item><item><title>C++で利用できそうなLoggerを調べました</title><link>https://iimuz.github.io/scrapbook/software/cpplogger/</link><pubDate>Wed, 16 Nov 2016 23:51:59 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/cpplogger/</guid><description>利用できそうなLogger Plog - portable and simple log for C++ ヘッダファイルのみで構成されているLoggerです。 License: Mozilla Public Lisense 2.0 log4cxx glog Boost.Log EasyLogging++ spdlog License: MIT License 各Loggerのちょっとしたメモ Plog 2016/11/16現在でも更新されています。 ヘッダファイルだけで構成されているため、cloneしてパスを通せば利用できそうです。 利用方法については、Qiitaで記事が書かれていたので、こちらを参照してください。
spdlog 2016/11/16現在も更新されています。 Plog同様にヘッダファイルのみで構成されているようです。 処理速度重視のようです。 利用方法については、ブログに記事がありましたので、こちらを参照してください。</description></item><item><title>Hugoで数式を導入します</title><link>https://iimuz.github.io/scrapbook/software/hugotex/</link><pubDate>Tue, 15 Nov 2016 21:41:53 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hugotex/</guid><description>Hugo + Tex 私の場合メモするときは、PC使えるならばmarkdown型式のテキストで保存します。 ただ、よく数式をメモしたいときに書けなかったので、かける方法を探したところ、 markdown+Texができるようでしたので導入しました。 (Tex記法には慣れていないと書きにくいかもしれません)
現在は、サイトジェネレーターとしてHugoを利用しており、今回はmathjaxを導入します。 (別にHugoでなくてもjsを読み込めば使えるはずです。) 導入すると下記のようにインラインと一行分の挿入の両方ができるようになります。
インライン表示: $F(x) = \sum_{n=1}^{N} \frac{1}{N}$
Markdownでは、$を一つ利用して下記のように記述しています。
$F(x) = \sum_{n=1}^{N} \frac{1}{N}$ 一行表示 $$ F(x) = \sum_{n=1}^{N} \frac{1}{N} $$
Markdownでは、$を二つ利用して下記のように記述しています。
$$F(x) = \sum_{n=1}^{N} \frac{1}{N}$$ 加えて、Atomの場合は、パッケージを追加することでプレビューしながら編集できます。
設定方法 Hugo編 設定方法については、下記の2つのページを参考にしています。
HuGo に Mathjax を入れて数式を表示できるようにした MathJax の導入 違いとしては、header.htmlではなくfooter.htmlに記載しました。 前半のスクリプトでインライン表示ができるようになります。
&amp;lt;!--tex --&amp;gt; &amp;lt;script type=&amp;#34;text/x-mathjax-config&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#34;\\(&amp;#34;,&amp;#34;\\)&amp;#34;]] } }); &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;#34; /&amp;gt; &amp;lt;/script&amp;gt; Atom編 追加するパッケージは、markdown-preview-plusとmathjax-wrapperになります。 markdown-preview-plusがインストールできた段階で、 インストール済みのパッケージからmarkdown-previewをdiableにします。</description></item><item><title>Hugoの初期設定</title><link>https://iimuz.github.io/scrapbook/software/hugosetup/</link><pubDate>Sat, 29 Oct 2016 19:49:51 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hugosetup/</guid><description>&lt;p>JekyllからHugoに環境を以降しました。
その時に行った作業のメモになります。
Macでの環境構築になりますが、
基本的にhugoをインストールしてthemeを設定しただけになります。
jekyllではread moreをプラグインで挿入しなければなりませんでしたが、
hugoでは標準で装備されていたりと設定が楽でした。&lt;/p>
&lt;p>(2016/11/20追記)
Bash On Ubuntu On Windowsを利用して、Hugo環境を構築した時のメモを追記しました。
基本的にUbuntuでのインストール方法と同じになります。
(今回はバイナリを公式サイトからダウンロードしてインストールする方法を利用しました。)&lt;/p>
&lt;h2 id="heading">作業手順&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Hugoをインストールします。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ brew file brew install hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ubuntuの場合は、.debファイルをダウンロードしてきてインストールします。
(環境に合わせて適切なファイルをダウンロードして下しさい。)&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo dpkg -i hugo_0.17-64bit.deb
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Hugoを利用して新規サイトを作成します。
今回の例では、新しくhoge-siteを作成する例になります。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ hugo new site hoge-site
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Hugoのテーマを設定します。
今回は、&lt;a href="http://themes.gohugo.io">Hugo Theme Site&lt;/a>さんから
&lt;a href="https://github.com/yoshiharuyamashita/blackburn">BLACKBURN&lt;/a>を選択しました。
理由は、シンプルな構成であることとcssのみで構成されており軽そうなことです。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cd hoge-site
$ mkdir themes
$ cd themes
$ git clone git@github.com:yoshiharuyamashita/blackburn.git blackburn
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Themeが適用されてサイトが構築できるかサーバーを建てて確認します。
今回は、blackburnのthemeになりますが、
任意のthemeを利用した場合はblackburnの部分を設定したthemeに変えてください。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cd ..
$ hugo server -t blackburn
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>サイトの設定を記載します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#a6e22e">title&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;hoge&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">baseurl&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">languageCode&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;ja-jp&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">theme&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;blackburn&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">canonifyurls&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># 相対パスではなくbaseurlを基準とした絶対パスとする&lt;/span>
[&lt;span style="color:#a6e22e">params&lt;/span>]
&lt;span style="color:#a6e22e">description&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;hoge&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">author&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;hoge&amp;#34;&lt;/span>
[&lt;span style="color:#a6e22e">taxonomies&lt;/span>]
&lt;span style="color:#a6e22e">category&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;categories&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">tag&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;tags&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>gitでCould Not Execute Editorと言われた時の対処法</title><link>https://iimuz.github.io/scrapbook/software/gitcouldnotexecuteeditor/</link><pubDate>Tue, 29 Dec 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gitcouldnotexecuteeditor/</guid><description>gitを利用していたら突然Could Not Execute Editorと言われたので解決方法です。 原因はよくわかっていないので、本当の対処方法があると思います。
対処方法は、.gitフォルダにあるconfigファイルに以下を記載します。
[core] editor = /usr/local/bin/vim ここで記載するvimへのパスは、以下のコマンドで確認できます。
$ which vim</description></item><item><title>Mac環境へのElectron導入方法</title><link>https://iimuz.github.io/scrapbook/software/electronenv/</link><pubDate>Mon, 28 Dec 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/electronenv/</guid><description>&lt;p>Mac(El Capitan)へのElectron + coffee-script環境の導入手順。&lt;/p></description></item><item><title>HerokuのFreeプランでアプリを最大限起動しっぱなしにする方法(1日18時間まで)</title><link>https://iimuz.github.io/scrapbook/software/hubotkeepalive/</link><pubDate>Wed, 11 Nov 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hubotkeepalive/</guid><description>&lt;p>HerokuのFreeプランでは1日6時間のSleep時間が設けられているが、それ以外の時間は起動し続けるように設定する方法。&lt;/p></description></item><item><title>Herokuアカウントの作成方法</title><link>https://iimuz.github.io/scrapbook/software/herokusignup/</link><pubDate>Tue, 03 Nov 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/herokusignup/</guid><description>&lt;p>Hubotの動作用にHerokuのアカウントを登録したので、そのときやったことを覚書として残しておきます。&lt;/p></description></item><item><title>HubotのHello Worldスクリプトの作成方法</title><link>https://iimuz.github.io/scrapbook/software/hubotscripttutorial/</link><pubDate>Tue, 03 Nov 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hubotscripttutorial/</guid><description>&lt;p>HubotをSlackと接続するところまでできたので、自分用にカスタマイズするためにスクリプトを作ろうと思う。
プログラムの練習をするのときの定番であるHello Worldを表示するまでの記録です。&lt;/p></description></item><item><title>HubotをHerokuで動かすまで</title><link>https://iimuz.github.io/scrapbook/software/hubotinheroku/</link><pubDate>Tue, 03 Nov 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hubotinheroku/</guid><description>&lt;p>SlackにHubotを導入してChatOpsをやってみようと思ったので、その実行環境を整えるための準備についての覚書です。&lt;/p></description></item><item><title>Minecraftのmod作成環境を構築した時のメモ(Mac編)</title><link>https://iimuz.github.io/scrapbook/software/envforminecraftmodcreator/</link><pubDate>Tue, 20 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/envforminecraftmodcreator/</guid><description>&lt;p>Minecraftのmod作成するためにMacに環境構築したので、その時のメモ。&lt;/p></description></item><item><title>Minecraft 1.8のmod構成メモ</title><link>https://iimuz.github.io/scrapbook/software/minecraftmods1_8/</link><pubDate>Wed, 07 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/minecraftmods1_8/</guid><description>&lt;p>Minecraftのバージョンが1.8(1.8.xではなく1.8)のときのmod構成&lt;/p></description></item><item><title>virtualenvを利用したpython環境の構築(Windows編)</title><link>https://iimuz.github.io/scrapbook/software/pythonwindows/</link><pubDate>Sun, 04 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/pythonwindows/</guid><description>&lt;p>Windows環境でvirtualenv環境を構築したときのメモ。&lt;/p></description></item><item><title>Homebrewでnot writableがでた時の対処方法</title><link>https://iimuz.github.io/scrapbook/software/homebrewpermission/</link><pubDate>Sat, 03 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/homebrewpermission/</guid><description>&lt;p>Homebrewでパッケージをインストールしたが、途中でNot writableと言われたので解消方法。&lt;/p></description></item><item><title>python3.4でmatplotlibを導入したらグラフ表示できない問題の対処法</title><link>https://iimuz.github.io/scrapbook/software/matplotlib_mac_settings/</link><pubDate>Sat, 03 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/matplotlib_mac_settings/</guid><description>&lt;p>Mac(Yosemite)のvirtualenv環境でmatplotlibを導入したら、導入できたのに表示できなかったので対処法メモ。&lt;/p></description></item><item><title>Windowsのパッケージ管理にchocolateyを導入したときのメモ</title><link>https://iimuz.github.io/scrapbook/software/chocolatey_settings/</link><pubDate>Sat, 03 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chocolatey_settings/</guid><description>&lt;p>Windowsのパッケージ管理にchocolateyを利用することにしてみたので、導入メモ。&lt;/p></description></item><item><title>Atomの設定をGitHubを利用して共有する方法</title><link>https://iimuz.github.io/scrapbook/software/shareatomsettings/</link><pubDate>Fri, 02 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/shareatomsettings/</guid><description>&lt;p>Atomの設定をvimの.vimrcとかbundlesとかのように共有する方法を調べた時のメモ。&lt;/p></description></item><item><title>homebrewでインストールした時に自動でbrewfileを更新する方法</title><link>https://iimuz.github.io/scrapbook/software/homebrew_update_brewfile/</link><pubDate>Fri, 02 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/homebrew_update_brewfile/</guid><description>&lt;p>homebrewでインストールしたら自動でbrewfileを更新してほしいので、どうすればできるか調べた時のメモ。&lt;/p></description></item><item><title>Windows環境のエディタをAtomに乗り換えようかと思ったのでメモ</title><link>https://iimuz.github.io/scrapbook/software/atomeditor/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/atomeditor/</guid><description>&lt;p>Windows環境ではVimが思ったよりも使いにくいので変更しようと思って&lt;a href="https://atom.io/">Atom&lt;/a>を試験的に導入したのでその時のメモ&lt;/p></description></item><item><title>Minecracft 1.7.10にmodを導入</title><link>https://iimuz.github.io/scrapbook/software/minecraftmods/</link><pubDate>Mon, 21 Sep 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/minecraftmods/</guid><description>&lt;p>久しぶりにminecraftにmodを導入しようと思ったので、メモ。
(IDが衝突しているみたいで適切な動作になっていないので注意。)&lt;/p></description></item><item><title>macでpandocを利用してpdfに変換しようとした時のトラブルメモ</title><link>https://iimuz.github.io/scrapbook/software/macpandocpdf/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/macpandocpdf/</guid><description>Macでpandocを利用してpdfに変換しようとしたら文字化けして変換できなかったので、 変換できるように設定した時のメモ。
概要 macのutf-8が特殊みたいで、一回変換をかませてあげる必要があるみたい。 コマンドとしては、以下のようにしてあげると変換できる。 長いので.bashrcとかにaliasか関数定義する方が早いかもしれない。
$ iconv -c -f UTF-8-MAC -t UTF-8 hoge.md | pandoc -o hoge.pdf -f markdown -V documentclass=ltjarticle --latex-engine=lualatex 必要パッケージの導入 homebrewを利用して以下のパッケージを導入する。
pandoc 今回の変換のためには、pandocが必要なので導入する。 pandoc自体は結構いろんな形式に変換できる。 mactex pandocでpdfに変換するためには、 一旦texに変換して、それをpdfに変換する必要がある。 コマンドとしては以下でインストールされるはず。
$ brew install pandoc $ brew cask install mactex pdf変換コマンドの説明 文字エンコードの変更(UTF-8-MAC to UTF-8) texへ変換する前に、macのutf-8を普通のutf-8に変換する。 ただし、以下のコマンドを実行するだけでは、単にコマンドラインにutf-8の文字列が出力されるだけ。 長い文章のファイルに対して行うと結構ずらっとでるので注意。
たまに変換エラーがでるので、変換できなくても無視して続けるようにするために、-cオプションを追加しておく。
$ iconv -c -f UTF-8-MAC -t UTF-8 hoge.md texからpdfへ ファイル形式がmarkdownのファイルを、texを利用してpdfに変換する。
$ pandoc -o hoge.</description></item><item><title>macにjava環境を構築した時のメモ</title><link>https://iimuz.github.io/scrapbook/software/javaenvironment/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/javaenvironment/</guid><description>macにjava環境を構築した時のメモ。 まだ成功していない。
概要 MacにJAVA環境を構築した時に行った作業一覧。 Eclipseを利用すれば早いし、環境としても良いのはしっているが、 Eclipseは重いという問題があるので、基本vimだけで動くことを目標として環境構築。
インストールパッケージ java
$ brew cask install java eclipse
$ brew cask install eclipse-java インストールしたらとりあえず、一回は起動しておく。
ant
この後のNeoBundleでEclimをビルドするのに必要なので導入。 javaを利用したビルドツール(要はmakeツール)
$ brew cask intall ant vimパッケージ NeoBundle .vimrcに記述してNeoBundleで管理するパッケージ。
ervandew/eclim 以下のコマンドを.vimrcに記載する。
NeoBundleLazy 'ervandew/eclim', { \ 'build': \ {'mac': 'ant -Declipse.home=/opt/homebrew-cask/Caskroom/eclipse-java/4.5/Eclipse.app/Contents/Eclipse -Dvim.files='.escape(expand('~/.vim/bundle/eclim'), '')}, \ } Declipse.home=の指す先は、brew cask install eclipseでインストールされたEclipseの場所。 -Dvim.files=の指す先は、vimのbundleを管理しているフォルダ。
結局よくわからないので、自分でビルドしに行った。
$ ant -Delipse.home=/opt/homebrew-cask/Caskroom/eclipse-java/4.5/Eclipse.app/Contents/Eclipse -Dvim.files=~/.vim/bundle/eclim 上記がエラーの原因だった。 ビルド時の出力みたらeclimフォルダの中にDvim.filesのパスが作成されていた。 この辺の挙動が不明で適当に書き換えているからエラーする。 とりあえず以下のように強引にeclimフォルダに出力されるようにビルドした。</description></item><item><title>今後学ぼうと考えているプログラム言語をまとめてみる</title><link>https://iimuz.github.io/scrapbook/software/progrmlanguage/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/progrmlanguage/</guid><description>何をするのに一般的に利用されているか、まとめてみる。
概要 用途によって利用する言語は変えれば良いと思うが、 いくつか比較してみると、とりあえず使えるようになっておけば良い言語は以下の感じかな。
C / C++: 現時点で一番利用しているから放置 Java: Androidアプリ開発で利用する Objective-C (Swift): iPhone/macアプリ開発で利用する Python: 学術系では強い Ruby: ??? 比較対象言語 julia go lang javascript java python c++ swift ruby or ruby on rails haskel c# TOIBE TOIBEは以下のような感じ。 そこから主観的に抜き出しておく。
C / C++ Java Objective-C C# Python Javascript Ruby TOIBEランキング C Java Objective-C C++ C# Basic PHP Python Perl Transact-SQL Delphi/Object Pascal Javascript VB .NET Visual Basic R Ruby Dart F# Swift Pacal</description></item><item><title>Macでpython環境の構築</title><link>https://iimuz.github.io/scrapbook/software/pythonenvironment/</link><pubDate>Sat, 29 Aug 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/pythonenvironment/</guid><description>MacでPython環境を構築した時のメモ。
概要 MacでPython環境を構築した時のメモ。
pyenv-virtualenvの導入 homebrew導入済みと仮定して、以下のコマンドでpyenv-virtualenvを導入する。
$ homebrew update $ homebrew install pyenv-virtualenv ついでに、.bash_profileに以下を記述して、パスを通す。
export PYENV_ROOT=&amp;quot;${HOME}/.pyenv&amp;quot; if [ -d &amp;quot;${PYENV_ROOT}&amp;quot; ]; then export PATH=${PYENV_ROOT}/bin:$PATH eval &amp;quot;$(pyenv init -)&amp;quot; fi pythonのインストールは、バージョン確認して好きなのを選択すれば良い。
$ pyenv install 3.4.3 以下のエラーがでた時はXCodeを導入すれば良いので、追加でXCodeのインストールコマンドも行う。
ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?
$ xcode-select --install 利用するバージョンを変更するために以下のコマンドを実行する。
$ pyenv global 3.4.3 $ pyenv rehash virtualenvの利用方法 virutalenvは、pythonの環境を構築できる。 pyenvがバージョンの管理とすると、virtualenvはライブラリなどの環境管理が可能。 pyenvの3.4.3に対して、インストールするライブラリを変更して用意することができる。
環境を新しく作る方法は、以下のコマンドを利用する。
$ pyenv virtualenv 3.4.3 3.4.3-develop 環境の切り替えは、pyenvでそのままできる。</description></item><item><title>ruby環境</title><link>https://iimuz.github.io/scrapbook/software/rubyenvironment/</link><pubDate>Sat, 29 Aug 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/rubyenvironment/</guid><description>&lt;p>jekyllがMac環境でうまく動作しなくなったので、そのときに見直したRuby環境のメモ。&lt;/p></description></item><item><title>Macbook 12インチ(1.1GHz)の設定</title><link>https://iimuz.github.io/scrapbook/software/macsettings/</link><pubDate>Sun, 23 Aug 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/macsettings/</guid><description>macbookの設定をメモ。 初のmacbookなので設定がおかしいかもしれないが、おかしいのに気付いた時に直す。
概要 macbookの設定で行ったことのまとめ。 ソフトウェアとか、設定の変更とか。
ソフトウェア とりあえずApple Storeでインストールできるソフトは、AppStoreでインストールするが、 それ以外のソフトはHomebrewで管理することにした。
デフォルト 初期から入っていたソフト
Safari メール カレンダー 連絡先 リマインダー メモ マップ メッセージ FaceTime Photo Boose iMovie 写真 Game Center iTunes iBooks App Store Pages Numbers KeyNote プレビュー App Storeでインストールしたソフト XCode Homebrewでインストールしたソフト Brewfileで管理しているので、Brewfileが最新版になっているはず。</description></item><item><title>Blenderで流体シミュレーション</title><link>https://iimuz.github.io/scrapbook/software/blenderfluidsimulation/</link><pubDate>Wed, 06 May 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blenderfluidsimulation/</guid><description>Blenderで流体シミュレーションを試した時のメモ。
概要 いろはメモ -Blender-: グラスに水を注いでみる 〈流体シミュレーション〉のページを参考に 流体シミュレーションの実験。
泥水ぶちまけてる感じだが、きちんとマテリアルとかテクスチャとか勉強してないから。 レンダリングについては後回し。 シミュレーションできることが分かったので良い。
Blender: GitHub: fluidSimulation
流体シミュレーションの準備 とりあえず液体を注ぐものを作成する。
法線方向を確認するためには、Edit modeでNキーで表示されるPropertiesから Mesh display -&amp;gt; Normals -&amp;gt; Display face normals as linesをONにする。
流体の注ぎ口を作成 UV球を作成する。(これが水の発生源になる。) 作成したUV球に物理演算から流体を設定する。
設定としては、以下の感じ。
タイプ: 流入口 ボリュームの初期化: 両方 流入速度: 適当に注ぎたい方向へ向ける いろはメモ -Blender-: グラスに水を注いでみる 〈流体シミュレーション〉によると、 各項目の説明は以下。
【流体のタイプ】 コントロール(Control) ： 流体の形状を変形させるようコントロール。 パーティクル(Particle) ： 飛沫。しずく・浮かぶ泡・トレーサー（霧みたいなもの）の3タイプがある。 流入口(Inflow) ： 液体が出てくる。給水栓。 流出口(Outflow) ： 液体が吸収されてなくなる。排水口。流入口とセットで使うとよいみたい。 障害物(Obstacle) ： 障害物。表面の滑り方（粘つき）を、滑る・滑らない・部分的に滑るの3タイプから選ぶ。 液体(Fluid) ： そこにあるだけの液体。流入口のように生成はされない。 ドメイン(Domain) ： 液体シミュレーションの領域。必ず必要。</description></item><item><title>Jekyllでサイト内検索(Googleカスタム検索)を入れる</title><link>https://iimuz.github.io/scrapbook/software/jekyllsearch/</link><pubDate>Tue, 05 May 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jekyllsearch/</guid><description>Jekyllでサイト内検索を作成するために、Googleカスタム検索を利用したのでメモ。 今のところ成功しておらず検索できない…。
⇒ Googleウェブマスターツールで処理してから、 一日程度ほったらかしにしといたら、きちんと全体のページから検索できるようになった。
たぶん結論 Googleカスタム検索を設定して、 Googleのウェブマスターツールでサイトマップを登録してあげると、たぶん検索できるようになる。 (検索できるようになるまでには、若干(1~数日程度)必要っぽい。
ウェブマスターツールのサイトマップも、登録後は勝手に更新されてる。
Googleカスタム検索を作成する Googleカスタム検索のページで、適当に検索したい検索クエリを作成する。
作成した検索クエリの&amp;quot;コードを取得&amp;quot;からHTMLに貼り付けるスクリプトを取得し、 default.htmlに記載しておく(別にここである必要はない)。
検索できるか試してみたができず…。
サイトマップを作成する とりあえず関連してそうなサイトマップなるものを作成する。 サイトマップは、検索エンジンに検索させるために必要らしい。 GitHub: Jekyll Plugin: Sitemap.sml Generatorを利用する。
config.ymlに以下を記述する。
url: https://iimuz.github.io
sitemap:
file: &amp;quot;/sitemap.xml&amp;quot;
include_posts:
- &amp;quot;/index.html&amp;quot;
change_frequency_name: &amp;quot;change_frequency&amp;quot;
priority_name: &amp;quot;priority&amp;quot;
やっぱり検索できない…。
Googleウェブマスターツールを利用する。 Google ウェブマスターツールのページからアクセスできるか確認したが、 データがありませんと表示される。 HELPには、しばらく待ってくださいとあったので、とりあえず放置してみる。
サイトマップを送信 とりあえずやってみた。
一部検索できるようになった! TOPページのみ検索可能になった。意味ないけどちょっと進歩。 なぜ下位のページが検索されないのか、こっちが本題なのに。
検索式を変更 検索式を正規表現っぽくiimuz.github.io/*に変更してみた。
参考資料 takemikami's note: blog用にjekyllを設定したメモ Googleカスタム検索 GitHub: Jekyll Plugin: Sitemap.sml Generator Google ウェブマスターツール</description></item><item><title>UnityとBlenderハンズオンの第3章を進めてみる</title><link>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender03/</link><pubDate>Tue, 05 May 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender03/</guid><description>&lt;p>&lt;a href="http://yaju3d.hatenablog.jp/entry/2015/04/07/015641">静岡Developers勉強会の「UnityとBlenderハンズオン第3章」の資料公開&lt;/a>
に沿って進めてみる。&lt;/p></description></item><item><title>Minecraftで侵略mod</title><link>https://iimuz.github.io/scrapbook/software/minecraftinvasionmod/</link><pubDate>Sat, 02 May 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/minecraftinvasionmod/</guid><description>Minecraft1.7.10で侵略mod環境を構築する。
導入mod Forge Optifine Shaders mod(updated by karyonix) Sonic Ether's Unbelievable Shaders v10.1 Invasion Mod - So you think your base is tough? NotEnoughItems Waila 1.5.7 for 1.7.10 / 1.6.0 for 1.8.1 Rei’s Minimap Mod 1.7.10, 1.7.2, 1.6.4 and 1.5.2 一括破壊系MOD＋α FLAN'S MOD Modern Weapons Pack World War Two Pack LittleMaidMob Ver0.0.8 &amp;amp; 座布団 3/17更新 Millenaire THE CHOCOLATE QUEST WIKI SpawnChecker (Mobが湧くかをチェックするMOD) 1.7.2~1.8ネザースターが作れるようになったりするMODなど 導入手順 前準備 Minecraft 1.</description></item><item><title>UnityとBlenderハンズオンの第2章を進めてみる</title><link>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender02/</link><pubDate>Wed, 29 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender02/</guid><description>&lt;p>&lt;a href="http://yaju3d.hatenablog.jp/entry/2015/03/09/020956">静岡Developers勉強会の「UnityとBlenderハンズオン第2章」の資料公開&lt;/a>
に沿って進めてみる。&lt;/p></description></item><item><title>UnityとBlenderハンズオンの第1章を進めてみる</title><link>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender01/</link><pubDate>Mon, 27 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender01/</guid><description>&lt;p>&lt;a href="http://www.slideshare.net/yaju88/unityblender1">静岡Developers勉強会: UnityとBlenderハンズオン 第1章&lt;/a>
でUnityとBlenderの使い方を勉強する。&lt;/p></description></item><item><title>Unity導入</title><link>https://iimuz.github.io/scrapbook/software/unitytutorial/</link><pubDate>Sun, 26 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/unitytutorial/</guid><description>&lt;p>Unityの環境を構築するまで。&lt;/p></description></item><item><title>bashコマンド</title><link>https://iimuz.github.io/scrapbook/software/bashcommand/</link><pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/bashcommand/</guid><description>bash コマンドの備忘録。
再帰 ls: find -type f ディレクトリ以下の再帰で指定したファイルを削除する: rm $(find -type f | grep hoge); ntp を使わず http で時刻合わせ: sudo date --set @&amp;quot;$(wget -q https://ntp-a1.nict.go.jp/cgi-bin/jst -O - | sed -n 4p | cut -d. -f1)&amp;quot; 参考資料 俺的備忘録 ~なんかいろいろ~: ls コマンドで覚えておきたい使い方 16 個(+2 個) ntp を使わずに時刻を合わせるワンライナー（Proxy 環境下でも安心）</description></item><item><title>BlenderでPythonスクリプトを利用する</title><link>https://iimuz.github.io/scrapbook/software/blenderpythonscript/</link><pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blenderpythonscript/</guid><description>&lt;p>BlenderでPythonを利用する。
ついでに、Blenderの物理シミュレーションをpythonで作成する。
作ったデータ: &lt;a href="https://github.com/iimuz/blenderTutorials/tree/develop/cubePhysicsEngine">github: iimuz/blenderTutorials/cubePhysicsEngine&lt;/a>&lt;/p></description></item><item><title>Blenderコマンドの備忘録</title><link>https://iimuz.github.io/scrapbook/software/blendersetting/</link><pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blendersetting/</guid><description>&lt;p>Blenderでのコマンド備忘録&lt;/p></description></item><item><title>GitHubにSSHを利用して接続する</title><link>https://iimuz.github.io/scrapbook/software/githubssh/</link><pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/githubssh/</guid><description>&lt;p>GitHubのアクセスに毎回パスワードを利用してpushするのがめんどくさいので、
sshキーを利用してアクセスする方法。&lt;/p></description></item><item><title>Google Photosの画像URLを原画像サイズで取得する方法</title><link>https://iimuz.github.io/scrapbook/software/googlephotslink/</link><pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/googlephotslink/</guid><description>&lt;p>Google Photosの画像をJekyllで貼り付ける際に、
画像サイズが勝手にリサイズされて小さくなっていたので、
原画像サイズで取得して貼り付ける方法。&lt;/p></description></item><item><title>Jekyll Tips</title><link>https://iimuz.github.io/scrapbook/software/jekylltips/</link><pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jekylltips/</guid><description>&lt;p>JekyllのTips。&lt;/p></description></item><item><title>vimがun~ファイルを作るようになった</title><link>https://iimuz.github.io/scrapbook/software/vimunfile/</link><pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vimunfile/</guid><description>&lt;p>vimがun~ファイルを作成するようになったので、
un~ファイルを一か所にまとめる方法。&lt;/p></description></item><item><title>Jekyllで'続きを読む'機能を導入</title><link>https://iimuz.github.io/scrapbook/software/jekyllmorepost/</link><pubDate>Thu, 23 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jekyllmorepost/</guid><description>&lt;p>最初のページに続きを読む機能を導入する方法。
要は、↓のような機能。&lt;/p></description></item><item><title>Jekyllのページネーション</title><link>https://iimuz.github.io/scrapbook/software/jekyllpaginate/</link><pubDate>Thu, 23 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jekyllpaginate/</guid><description>&lt;p>Jekyllのページネーション機能を有効にする方法。&lt;/p></description></item><item><title>Gitのコマンド備忘録</title><link>https://iimuz.github.io/scrapbook/software/gitcommand/</link><pubDate>Wed, 22 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gitcommand/</guid><description>&lt;p>gitのコマンドをよく忘れるので、利用するときに調べたらここに記載する。&lt;/p></description></item><item><title>Minecraft DQM IVの導入</title><link>https://iimuz.github.io/scrapbook/software/minecraftdqm4/</link><pubDate>Wed, 22 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/minecraftdqm4/</guid><description>&lt;p>MinecraftでDQM4 modを導入したときにやったこと。
DQM4 modとは、&lt;a href="http://dqm4mod.wix.com/home">Minecraft DQM IV&lt;/a>のこと。
重要そうなページは、以下の4つ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://dqm4mod.wix.com/home">Minecraft DQM IV&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://forum.minecraftuser.jp/viewtopic.php?f=13&amp;amp;t=13684&amp;amp;view=viewpoll">マインクラフト 非公式日本ユーザーフォーラム: DQM IV&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://seesaawiki.jp/dqm4mod/">Minecraft ドラクエMOD DQM4mod 攻略wiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mc-dqm4.xii.jp/">Minecraft MOD DQM4 wiki&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Jekyllにタグクラウドをつける</title><link>https://iimuz.github.io/scrapbook/software/jekylltagcloud/</link><pubDate>Tue, 21 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jekylltagcloud/</guid><description>&lt;p>Jekyllでタグクラウドを作成し、一覧を表示するために調べたことのまとめ。&lt;/p></description></item><item><title>Jekyllにプラグンインを導入する</title><link>https://iimuz.github.io/scrapbook/software/jekyllplugins/</link><pubDate>Tue, 21 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jekyllplugins/</guid><description>&lt;p>Jekyllで作成したデータをGitHub Pagesにpushする方法が自動化できたので、
プラグインをいくつか導入する。&lt;/p></description></item><item><title>Markdown記法について</title><link>https://iimuz.github.io/scrapbook/software/markdown_tutorial/</link><pubDate>Tue, 21 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/markdown_tutorial/</guid><description>&lt;p>Markdownで書く上で調べたことのまとめ。&lt;/p></description></item><item><title>Jekyllでファイルを生成してGitHub Pagesにpush</title><link>https://iimuz.github.io/scrapbook/software/gitpagesandjekyll/</link><pubDate>Mon, 20 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gitpagesandjekyll/</guid><description>&lt;p>GitHub PagesにそのままpushしてJekyllの変換を利用していると
plugin系が使えないらしいので、
ローカルのJekyllでファイルを作成してGitHub Pagesにpushするまでのメモ。&lt;/p></description></item><item><title>Blenderの練習 000</title><link>https://iimuz.github.io/scrapbook/software/blender_practice/</link><pubDate>Tue, 14 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blender_practice/</guid><description>&lt;h2 id="heading">目標&lt;/h2>
&lt;p>とりあえず一週間位(実質初版完成まで2、3日)で、
結婚式の余興のためにアニメーションを作成する必要がある。
前回は、Adobe After Effects(?)で作成したが体験版の期間が終わったので、
利用できなくなった。
そこで、今回はBlenderのみでアニメーション作成したい。
作りたいイメージは、以下のような感じ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=wtKILj--9XY&amp;amp;feature=youtu.be">Motion graphics line performance in Japan&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=dUB5gH41Qg0&amp;amp;feature=youtu.be">映画風オープニングムービー・動画制作・動画素材・タイトル動画 0019&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=hriQaGUAJLU&amp;amp;feature=youtu.be">『SMAP LIVE Opening』1991'97'98'99'00'01'02'03'05'06'08'10'12'ver&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>GitHubでyou are not humanと言われたら</title><link>https://iimuz.github.io/scrapbook/software/git_error_you_are_not_human/</link><pubDate>Tue, 14 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/git_error_you_are_not_human/</guid><description>&lt;h2 id="you-are-not-human">You are not human&lt;/h2>
&lt;p>GistBoxに登録して色々してたら、突然Gitに&lt;strong>人間ではありません&lt;/strong>と言われてしまった。
原因は、GitsBoxから何度も消したり書いたりしたせいかもしれない。&lt;/p></description></item><item><title>Git Pagesを使ってMarkdownでメモする環境構築</title><link>https://iimuz.github.io/scrapbook/software/gitpages/</link><pubDate>Mon, 13 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gitpages/</guid><description>&lt;h2 id="heading">後で調べる&lt;/h2>
&lt;ul>
&lt;li>簡単な検索できない?
&lt;ul>
&lt;li>Googleカスタム検索?&lt;br>
⇒TOPのindex.htmlのみは検索に成功。それ以外ができない…。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ページの作成日だけでなく、更新日を自動でつけられない?&lt;/li>
&lt;li>postした別のメモへのリンクは貼れないの?&lt;br>
⇒サイトの構成さえ知っていれば付けれなくはないが、どっかで置換したほうが確実な気がする。&lt;/li>
&lt;li>タグのところに記事の件数を追加できない?&lt;/li>
&lt;li>引用の文字が巨大すぎるんだけど直せないか?&lt;/li>
&lt;li>文章書くなら字下げがないと体裁が変な気がする。&lt;/li>
&lt;/ul></description></item></channel></rss>