<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Softwares on しさく</title><link>https://iimuz.github.io/scrapbook/software/</link><description>Recent content in Softwares on しさく</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 02 Jan 2020 19:53:13 +0900</lastBuildDate><atom:link href="https://iimuz.github.io/scrapbook/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Visual Studio Code</title><link>https://iimuz.github.io/scrapbook/software/vscode/</link><pubDate>Thu, 02 Jan 2020 19:53:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode/</guid><description> Wikipedia: Visual Studio Code</description></item><item><title>Microsoft Visual Studio</title><link>https://iimuz.github.io/scrapbook/software/visualstudio/</link><pubDate>Thu, 02 Jan 2020 19:51:44 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/visualstudio/</guid><description> Wikipedia: Microsoft Visual Studio</description></item><item><title>Neovim</title><link>https://iimuz.github.io/scrapbook/software/neovim/</link><pubDate>Thu, 02 Jan 2020 19:49:12 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/neovim/</guid><description> Neovim Wikipedia: Vim#Neovim</description></item><item><title>vim</title><link>https://iimuz.github.io/scrapbook/software/vim/</link><pubDate>Thu, 02 Jan 2020 19:48:07 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vim/</guid><description> Wikipedia: Vim</description></item><item><title>Qt</title><link>https://iimuz.github.io/scrapbook/software/qt/</link><pubDate>Thu, 02 Jan 2020 19:47:07 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/qt/</guid><description> Wikipedia: Qt</description></item><item><title>Point Cloud Library</title><link>https://iimuz.github.io/scrapbook/software/point-cloud-library/</link><pubDate>Thu, 02 Jan 2020 19:46:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/point-cloud-library/</guid><description> Wikipedia: Point Cloud Library</description></item><item><title>Minecraft</title><link>https://iimuz.github.io/scrapbook/software/minecraft/</link><pubDate>Thu, 02 Jan 2020 19:43:18 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/minecraft/</guid><description> Minecraft Wikipedia: Minecraft</description></item><item><title>Jenkins</title><link>https://iimuz.github.io/scrapbook/software/jenkins/</link><pubDate>Thu, 02 Jan 2020 19:42:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jenkins/</guid><description> Wikipedia: Jenkins</description></item><item><title>Jekyll</title><link>https://iimuz.github.io/scrapbook/software/jekyll/</link><pubDate>Thu, 02 Jan 2020 19:40:50 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jekyll/</guid><description> Wikiepdia: Jekyll(Software)</description></item><item><title>Hyper</title><link>https://iimuz.github.io/scrapbook/software/hyper/</link><pubDate>Thu, 02 Jan 2020 19:36:27 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hyper/</guid><description> Hyper</description></item><item><title>Hugo</title><link>https://iimuz.github.io/scrapbook/software/hugo/</link><pubDate>Thu, 02 Jan 2020 19:35:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hugo/</guid><description> Hugo</description></item><item><title>Homebrew</title><link>https://iimuz.github.io/scrapbook/software/homebrew/</link><pubDate>Thu, 02 Jan 2020 19:33:38 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/homebrew/</guid><description> Wikipedia: Homebrew(パッケージ管理システム)</description></item><item><title>Heroku</title><link>https://iimuz.github.io/scrapbook/software/heroku/</link><pubDate>Thu, 02 Jan 2020 19:32:08 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/heroku/</guid><description> [Wikipedia: Heroku][heroku]</description></item><item><title>git</title><link>https://iimuz.github.io/scrapbook/software/git/</link><pubDate>Thu, 02 Jan 2020 19:30:52 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/git/</guid><description> Wikipedia: Git</description></item><item><title>Google Cloud Platform</title><link>https://iimuz.github.io/scrapbook/software/gcp/</link><pubDate>Thu, 02 Jan 2020 19:29:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcp/</guid><description> Wikipedia: Google Cloud Platform</description></item><item><title>Google Colaboratory</title><link>https://iimuz.github.io/scrapbook/software/colaboratoy/</link><pubDate>Thu, 02 Jan 2020 19:27:30 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/colaboratoy/</guid><description> Wikipedia: Project Jupyter#Colaboratory</description></item><item><title>Blender</title><link>https://iimuz.github.io/scrapbook/software/blender/</link><pubDate>Thu, 02 Jan 2020 19:26:14 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blender/</guid><description> Wikipedia: Blender</description></item><item><title>GitHub</title><link>https://iimuz.github.io/scrapbook/software/github/</link><pubDate>Thu, 02 Jan 2020 19:14:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/github/</guid><description> [GitHub.co.jp][gihtub-jp] Wikipedia: GitHub</description></item><item><title>Atom</title><link>https://iimuz.github.io/scrapbook/software/atom/</link><pubDate>Thu, 02 Jan 2020 19:11:57 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/atom/</guid><description> Atom Wikipedia: Atom(テキストエディタ)</description></item><item><title>画像処理</title><link>https://iimuz.github.io/scrapbook/software/image_processing/</link><pubDate>Thu, 02 Jan 2020 18:45:34 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/image_processing/</guid><description> Wikipedia: 画像処理</description></item><item><title>Python</title><link>https://iimuz.github.io/scrapbook/software/python/</link><pubDate>Thu, 02 Jan 2020 18:36:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/python/</guid><description> Python Japan Wikipedia: Python</description></item><item><title>Ruby</title><link>https://iimuz.github.io/scrapbook/software/ruby/</link><pubDate>Thu, 02 Jan 2020 18:34:15 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/ruby/</guid><description> Ruby Wikipedia: Ruby</description></item><item><title>Docker</title><link>https://iimuz.github.io/scrapbook/software/docker/</link><pubDate>Thu, 02 Jan 2020 17:22:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker/</guid><description> Wikipedia: Docker</description></item><item><title>Chainer</title><link>https://iimuz.github.io/scrapbook/software/chainer/</link><pubDate>Mon, 30 Dec 2019 12:04:24 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer/</guid><description> Chiner.org 2019.12.5: Preferred Networks、深層学習の研究開発基盤をPyTorchに移行 Wikipeida: Chainer</description></item><item><title>スクラム開発用ツール</title><link>https://iimuz.github.io/scrapbook/software/scrum_tools/</link><pubDate>Thu, 08 Aug 2019 12:28:15 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/scrum_tools/</guid><description> スクラム開発におけるプロジェクト管理ツール比較 優良なら Jira 無料なら OpenProject Redmine の Scrum プラグイン KPT には mindmap を使う事例もある</description></item><item><title>Chainer Tutorial Chapter 3: ディープラーニング入門</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter03/</link><pubDate>Thu, 02 May 2019 06:33:31 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter03/</guid><description>概要 ディープラーニング入門 メモ ニューラルネットワークは、部分可能な変換をつなげて作られた計算グラフである。 ニューラルネットワークのイメージ dummy . 層は、入力層、出力層と、中間層または隠れ層からなる。 上図は、 3 層アーキテクチャとなる。 各層には、全結合型 (fully-connected)、畳み込み型 (convolutional)、再起型 (recurrent) などがある。 一つのネットワークでは、異なる層の型を用いることが普通である。 入力層近くは、 covolutional であり、出力層近くは fully-connected であったりする。 ネットワークを入力層から出力層までたどることを順伝搬と呼ぶ。 活性化関数 シグモイド関数: $ h = \frac{1}{1 + \exp(-u)} $ シグモイド関数は近年では、層の数が多くなると使わない。 理由は、勾配消失が発生し、学習が進行しにくくなるため。 ReLU: $ h = max(0, u) $ 勾配消失問題に効くことが知られている。 シグモイド関数 ReLU 数式から実際の値を利用することなく求まる答えを解析解と呼ぶ。 繰り返し計算により数値的に求まる解を数値解と呼ぶ。 目的関数の主な種類 平均二乗誤差 交差エントロピー: $ - \sum_k t_k \log y_k $ 全サンプルを考慮すると $ L = - \sum_n \sum_k t_k \log y_k $ 最適化手法 勾配降下法 勾配とは、 L を増加させる方向を示す。 最適化では、 L を減少させたいため、 - 方向へ進める。 ミニバッチ学習 複数のデータを入力し、それぞれの勾配を計算する。その後、勾配の平均値で更新する。 全体を一度の学習に使うとバッチ学習と呼ぶ。 ミニバッチを用いた学習方法を確率的勾配降下法 (stochastic gradient descent: GSD) と呼ぶ。 誤差逆伝搬法 勾配消失 シグモイド関数では、原点から離れるに従い勾配の値が小さくなる。 シグモイド関数の勾配は最大でも 0.</description></item><item><title>Chainer Tutorial Chapter 2: 機械学習とデータ分析入門</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter02/</link><pubDate>Wed, 01 May 2019 07:21:24 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter02/</guid><description>概要 機械学習とデータ分析入門 メモ 単回帰分析と重回帰分析 この辺から実装が出てくると書かれている。 それぞれの実装はあるようです。 単回帰分析と重回帰分析は、ディープラーニングの基礎である。 機械学習手法は、教師あり学習、教師なし学習、強化学習に大別される。 単回帰分析は教師あり学習に分類される。 チュートリアルは大体教師あり学習だよ。 教師あり学習も、実測値を予測する回帰 (regression) と カテゴリを予測する分類 (classification) に大別される。 単回帰分析は、 1 変数を入力として、 1 変数を予測する。 重回帰分析は、多変数を入力として 1 変数を予測する。 データの前処理 平均 0 による中心化 (centering) メリットは、調整すべきパラメータを減らすことができる。 バイアス項がなくなるため単に 1 変数になる。 以降では中心化はしてある前提とする。 目的関数は二乗誤差 (sum of squares error) を利用する。 $ L = \sum_{n=1}^N (t_n wx_n)^2 $ $ \frac{\partial}{\partial w} L = - \sum_{n=1}^N 2x_n(t_n - wx_n) $ 導関数が 0 となる点で、目的関数が最小となるため、 $ \frac{\partial}{\partial w} L = 0 $ を求める。 結局 $ w = \frac{\sum_n x_n t_n}{\sum_n x_n^2} $ になる。 重回帰分析: $ \bold{y} = \bold{w}^T \bold{x} $ 交換法則が成り立つので、 $ \bold{y] = \bold{x}^T \bold{w} $ $ \bold{y} = \bold{X} \bold{w} $ 各列が各入力変数を表す行列 $ \bold{X} $ をデザイン行列と呼ぶ。 目的変数: $ L = (\bold{t} - \bold{y})^T (\bold{t} - \bold{y}) $ 変形すると、 $ L = (\bold{t}^T - \bold{w}^T\bold{X}^T)(\bold{t} - \bold{X}\bold{w}) $ 導出すると $ \bold{w} = (\bold{X}^T \bold{X})^{-1} \bold{X}^T \bold{t} $ となる。 導出には $ \bold{X}^T \bold{X} $ に逆行列が存在することを仮定している。 この式を正規方程式と呼ぶ。 導出で謝りやすい点として $ \bold{X}^T $ の逆行列をかけて単位行列とするパターンがある。 $ \bold{X} $ に逆行列が存在するためには、正方行列である必要があり、 $ \bold{X} $ はサンプルデータと独立変数の数が一致する必要があり、 一般には成り立たない。 NumPy 入門 python の int 型は自動的に Numpy の int64 型</description></item><item><title>Chainer Tutorial Chapter 1: 準備編</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter01/</link><pubDate>Wed, 01 May 2019 06:46:54 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter01/</guid><description>概要 準備編
医療用のオンライン講義資料と前半部は、ほとんど一緒な気がする。 行列の参考資料も一緒だった。
メモ 大学の学部生向け deep learning が開始できるところまで一通り網羅する予定。 Google Colaboratory の使い方説明 python の説明 チュートリアルは python 3.6 以上を対象としている。 変数宣言と代入 コメントの書き方 変数の型 エラーメッセージを読みましょう。 浮動小数点が as_integer_ratio() という関数を持つ。 これは、 0.5 という値に対して、 (1, 2) というように、 分数での分子と分母を返す。 list の説明 tuple の説明 list は mutable であり、 tuple は immutable dict の説明 for, if, while enumerate で idx が取れるよ。 他によく使うものとして、 zip で複数のペアを作れるよ。 関数 引数の書き方 引数のデフォルト値 返り値 変数のスコープ クラス 定義 継承 機械学習に使われる数学 教師あり学習の考え方 微分の基礎 微分は接線の傾きを求めるよ。 何気に lim が出てくるよ。 簡単な微分の公式 線形性の説明 合成関数の微分。要は、一時変数を置いて、 2 回微分する。 偏微分 線形代数の基礎 スカラー、ベクトル、行列、テンソル 加算、減算、スカラー倍 内積 行列積 高校くらいで習う積の計算。 その他に、外積、要素積 (アダマール積) などがある。 転置 単位行列 逆行列 逆行列が存在すれば正則行列である。 線形結合と二次形式 線形結合: $ \bold{b}^T \bold{x} $ 二次形式: $ \bold{x}^T \bold{A} \bold{x} $ ベクトルの微分 合成関数の微分 (ベクトルバージョン) 確率と統計の基礎 確率変数と確率分布 同時確率: $ p(X=x, Y=y) $ 周辺化: $ p(Y=y) = \sum_x p(X=x, Y=y) $ 条件付き確率: $ p(Y=y | x) $ ベイズの定理: $ p(y, x) = p(y | x) p(x) $ $ p(x) $: 事前確率 $ p(y | x) $: 事後確率 尤度と最尤推定 対数尤度: $ L(\theta) = \prod_{i=1}^N f(x_i; \theta)$ コイントスのパラメータ推定 Maximum a posteiori(MAP) 推定 事前確率を定義し、事前条件を有効にすることで効果的な推定を行う 統計量 平均 分散 不偏分散 ($ n-1 $ で割る) と標本分散 ($ n $ で割る) 標準偏差 相関係数: $ r = \frac{E[(X - \mu_x)(Y - \mu_y)]}{\sqrt{(E[(X - \mu_x)^2(Y - \mu_y)^2])}} $ 相関の有り無しは、無相関検定などの手法が必要となる。</description></item><item><title>Grow with Google</title><link>https://iimuz.github.io/scrapbook/software/grow_with_google/</link><pubDate>Mon, 29 Apr 2019 11:31:36 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/grow_with_google/</guid><description>概要 Google が提供している学習サイトです。 Machine Learning 関連以外にもあり、結構広範な内容をカバーしています。 働き方改革、 YouTuber 向けなどがありました。
Glow with Google JP Glow with Google Machine Learning Machine Learning 関連に関しては 2 コース用意されています。 初心者と中級者に分かれているのですが、中級者の方はほとんどのコースが英語のみになっています。</description></item><item><title>2. 機械学習ライブラリの基礎</title><link>https://iimuz.github.io/scrapbook/software/medical-ai002/</link><pubDate>Sun, 21 Apr 2019 15:03:28 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medical-ai002/</guid><description>リンク 2. 機械学習ライブラリの基礎 メモ</description></item><item><title>1. 機械学習に必要な数学の基礎</title><link>https://iimuz.github.io/scrapbook/software/medical-ai001/</link><pubDate>Sun, 21 Apr 2019 12:56:33 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medical-ai001/</guid><description>リンク 1. 機械学習に必要な数学の基礎 メモ 大体は、覚えている範囲で済んでいます。 ただ、公式系は結構忘れています。あとは、たまに導出をやってみると意外と思い出す感じです。
機械学習は関数のパラメータ決定である。 ex.) $ f(x; a, b) = ax + b $ ex.) $ L(\theta) = \sum_{n=1}^N (y_i - f(x_i; \theta))^2 $ テンソルは、ベクトルや行列の一般化概念である。 1 階テンソル = ベクトル 2 階テンソル = 行列 逆行列が存在する = 正則行列 $ \bold{b}^T \bold{x} $: 線形結合 $ \bold{x}^T \bold{A} \bold{x} $: 二次形式 ベクトル微分 $ \frac{\partial}{\partial \bold{x}}( c ) = 0 $ $ \frac{\partial}{\partial \bold{x}}(\bold{b} \bold{x}) = \bold{b} $ $ \frac{\partial}{\partial \bold{x}}(\bold{x}^T \bold{A} \bold{x}) = (\bold{A} + \bold{A}^T)\bold{x} $ memo dummy .</description></item><item><title>Medical AI 専門コース オンライン講義資料</title><link>https://iimuz.github.io/scrapbook/software/medical_ai/</link><pubDate>Sat, 13 Apr 2019 15:44:46 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medical_ai/</guid><description>主要リンク オンライン資料 GitHub メモ 前半は、 chainer tutorials と一緒で読み物になっています。</description></item><item><title>Chainer Tutorial</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial/</link><pubDate>Sat, 13 Apr 2019 15:33:21 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial/</guid><description>主要リンク Chainer Tutorials Chainer Tutorials の Github メモ google colaboratory を利用する前提で進められています。 初学者向けであることが強調されています。 前半は、ほぼ読み物のようです。通勤時間にでも読むようにします。</description></item><item><title>Ruby on Rails の基礎習得するための教材 el-training</title><link>https://iimuz.github.io/scrapbook/software/el_training/</link><pubDate>Fri, 12 Apr 2019 06:45:26 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/el_training/</guid><description>万葉で必須とされるRuby on Railsと その周辺技術の基礎を習得するための新入社員教育用カリキュラムです。
el-training</description></item><item><title>Chapter 2</title><link>https://iimuz.github.io/scrapbook/software/coursera_gcp002/</link><pubDate>Sun, 07 Apr 2019 22:00:43 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coursera_gcp002/</guid><description>Module Introduction</description></item><item><title>Chapter 1</title><link>https://iimuz.github.io/scrapbook/software/coursera_gcp001/</link><pubDate>Tue, 02 Apr 2019 06:47:56 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coursera_gcp001/</guid><description>Introducing Google Cloud Platform</description></item><item><title>Google Cloud Platform Fundamentals: Core Infrastructure</title><link>https://iimuz.github.io/scrapbook/software/coursera_gcp/</link><pubDate>Mon, 01 Apr 2019 22:01:34 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coursera_gcp/</guid><description> course</description></item><item><title>情報系の資格</title><link>https://iimuz.github.io/scrapbook/software/skills/</link><pubDate>Sat, 19 Jan 2019 13:29:51 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/skills/</guid><description>画像処理エンジニア検定 画像処理エンジニア検定 Qiita: 画像処理初心者が、画像処理エンジニア検定エキスパートに合格した時の学習法 G 検定 日経経済新聞: AIの知識を問う「G検定」 合格者の裾野広がる</description></item><item><title>アジャイルソフトウェア開発</title><link>https://iimuz.github.io/scrapbook/software/agile-software-development/</link><pubDate>Fri, 23 Nov 2018 11:43:02 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/agile-software-development/</guid><description>アジャイルソフトウェア開発宣言 アジャイルソフトウェア開発宣言の原文
私たちは、ソフトウェア開発の実践あるいは実践を手助けをする活動を通じて、 よりよい開発方法を見つけだそうとしている。この活動を通して、私たちは 以下の価値に至った。
プロセスやツールよりも 個人と対話 を、 包括的なドキュメントよりも 動くソフトウェア を、 契約交渉よりも 顧客との協調 を、 計画に従うことよりも 変化への対応 を、 価値とする。すなわち、左記のことがらに価値があることを認めながらも、 私たちは右記のことがらにより価値をおく。
Kent Beck,Mike Beedle,Arie van Bennekum,Alistair Cockburn, Ward Cunningham,Martin Fowler,James Grenning,Jim Highsmith, Andrew Hunt,Ron Jeffries,Jon Kern,Brian Marick,Robert C. Martin, Steve Mellor,Ken Schwaber,Jeff Sutherland,Dave Thomas
© 2001, 上記の著者たち
この宣言は、この注意書きも含めた形で全文を含めることを条件に自由にコピーしてよい。
アジャイル宣言の背後にある原則 アジャイル宣言の背後にある原則の原文
アジャイル宣言の背後にある原則
私たちは以下の原則に従う:
顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。 要求の変更はたとえ開発の後期であっても歓迎します。 変化を味方につけることによって、お客様の競争力を引き上げます。 動くソフトウェアを、2-3週間から2-3ヶ月という できるだけ短い時間間隔でリリースします。 ビジネス側の人と開発者は、プロジェクトを通して 日々一緒に働かなければなりません。 意欲に満ちた人々を集めてプロジェクトを構成します。 環境と支援を与え仕事が無事終わるまで彼らを信頼します。 情報を伝えるもっとも効率的で効果的な方法は フェイス・トゥ・フェイスで話をすることです。 動くソフトウェアこそが進捗の最も重要な尺度です。 アジャイル･プロセスは持続可能な開発を促進します。 一定のペースを継続的に維持できるようにしなければなりません。 技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。 シンプルさ（ムダなく作れる量を最大限にすること）が本質です。 最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。 チームがもっと効率を高めることができるかを定期的に振り返り、 それに基づいて自分たちのやり方を最適に調整します。 なぜアジャイル宣言が誕生したのか 下記のまとめによると、 アジャイル宣言とは文字通り&amp;quot;宣言&amp;quot;であり、 細かいことは何も決めていないということになります。 技術変化の速い現代において、変化に適応し、 適切な選択をもって対応していこうといっていることになるようです。</description></item><item><title>Qiita: ロシアの天才ハッカーによる【新人エンジニアサバイバルガイド】を読んで</title><link>https://iimuz.github.io/scrapbook/software/russia-engineer-survival-guide/</link><pubDate>Sun, 26 Aug 2018 15:21:16 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/russia-engineer-survival-guide/</guid><description>Qiita: ロシアの天才ハッカーによる【新人エンジニアサバイバルガイド】 が心にとどめておいたほうがよさそうな部分が結構あったので抜粋しておきます。
コードのクオリティに腹をたてるな。同僚の2倍のスピードでリリースをするよう心がけろ。 この部分は痛いほどわかりますが、どうしてもできないときもあります。 でも今後なるべく気を付けようと思います。 (別プロジェクトに参加していきなりエラーのデバッグを割り当てられて、 コードを見た時によく思ってしまう。)
Chef,Ansible,Puppetを学ぼう。運用エンジニアの時間を浪費するのはやめよう。 環境には寄ると思いますが、Dockerというのもありかな。
常に４つの環境を用意しておこう。 開発環境で動いても、本番環境で想定通りに動くかは別問題だからテスト環境はよく準備するようにします。
常にTLSを使おう。社内サービスであってもだ。 社内利用だとあまりTLSを気にしていませんでした。 どうしても甘くなってしまいます。</description></item><item><title>技術向上ガイド</title><link>https://iimuz.github.io/scrapbook/software/google-technical-guide/</link><pubDate>Fri, 24 Aug 2018 22:36:25 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google-technical-guide/</guid><description>Qiita: [翻訳] 技術向上ガイドにGoogleのTechnical Development Guideの翻訳があったので読んだ感想です。 色々と書かれているのですが、英語文献が多いので読むのには時間がかかりそうです。 ただ、その中でも課題プロジェクトに取り組むという部分はとっかかりやすいように思いました。
ウェブサイトを作成し維持する、自分自身のサーバーを構築する、またはロボットを構築する
&amp;hellip;
CodeJamやACMの国際大学対抗プログラミングコンテストのようなコーディング競技を通して自分のアルゴリズム知識を磨く
例えば、プログラミングコンテストで日本語でやりやすそうなのはAtCoderやISUCONなどでしょうか。 この辺であれば、過去問なども記載されており取り組むのによいような気がします。
その他に系統は違いますが、Kaggleなどは機械学習の知識をつけるにはよさそうです。</description></item><item><title>プログラマが知るべき97のこと</title><link>https://iimuz.github.io/scrapbook/software/97-things-that-programmers-should-know/</link><pubDate>Fri, 08 Jun 2018 18:45:05 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/97-things-that-programmers-should-know/</guid><description>プログラマが知るべき97のことという内容で著名な方々のコメント(?)がまとめられたページがありました。 &amp;ldquo;シンプルさは美に宿る&amp;quot;とか&amp;quot;リファクタリングの際に注意すべきこと&amp;quot;ととか、 結構ためになる内容なので一通り目を通すと面白いです。
プログラマが知るべき97のこと 97のことと言いつつ、107個のっている理由は不明です。</description></item><item><title>Atomの設定をGitHubを利用して共有する方法</title><link>https://iimuz.github.io/scrapbook/software/shareatomsettings/</link><pubDate>Fri, 02 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/shareatomsettings/</guid><description>&lt;p>Atomの設定をvimの.vimrcとかbundlesとかのように共有する方法を調べた時のメモ。&lt;/p></description></item><item><title>Windows環境のエディタをAtomに乗り換えようかと思ったのでメモ</title><link>https://iimuz.github.io/scrapbook/software/atomeditor/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/atomeditor/</guid><description>&lt;p>Windows環境ではVimが思ったよりも使いにくいので変更しようと思って&lt;a href="https://atom.io/">Atom&lt;/a>を試験的に導入したのでその時のメモ&lt;/p></description></item><item><title>今後学ぼうと考えているプログラム言語をまとめてみる</title><link>https://iimuz.github.io/scrapbook/software/progrmlanguage/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/progrmlanguage/</guid><description>何をするのに一般的に利用されているか、まとめてみる。
概要 用途によって利用する言語は変えれば良いと思うが、 いくつか比較してみると、とりあえず使えるようになっておけば良い言語は以下の感じかな。
C / C++: 現時点で一番利用しているから放置 Java: Androidアプリ開発で利用する Objective-C (Swift): iPhone/macアプリ開発で利用する Python: 学術系では強い Ruby: ??? 比較対象言語 julia go lang javascript java python c++ swift ruby or ruby on rails haskel c# TOIBE TOIBEは以下のような感じ。 そこから主観的に抜き出しておく。
C / C++ Java Objective-C C# Python Javascript Ruby TOIBEランキング C Java Objective-C C++ C# Basic PHP Python Perl Transact-SQL Delphi/Object Pascal Javascript VB .NET Visual Basic R Ruby Dart F# Swift Pacal</description></item></channel></rss>