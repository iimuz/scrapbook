<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>software on しさく</title><link>https://iimuz.github.io/scrapbook/tags/software/</link><description>Recent content in software on しさく</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 02 Jan 2020 23:21:58 +0900</lastBuildDate><atom:link href="https://iimuz.github.io/scrapbook/tags/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Google Photos</title><link>https://iimuz.github.io/scrapbook/software/google_photos/</link><pubDate>Thu, 02 Jan 2020 23:21:58 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google_photos/</guid><description> Wikipedia: Google フォト</description></item><item><title>Google Compute Engine</title><link>https://iimuz.github.io/scrapbook/software/gce/</link><pubDate>Thu, 02 Jan 2020 23:08:48 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gce/</guid><description> Google Compute Engine</description></item><item><title>Google Chrome</title><link>https://iimuz.github.io/scrapbook/software/chrome/</link><pubDate>Thu, 02 Jan 2020 23:06:54 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chrome/</guid><description> Wikipedia: Google Chrome</description></item><item><title>Google Apps Script (GAS)</title><link>https://iimuz.github.io/scrapbook/software/gas/</link><pubDate>Thu, 02 Jan 2020 23:04:30 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gas/</guid><description> Wikipedia: Google Apps Script</description></item><item><title>Microsoft Windows</title><link>https://iimuz.github.io/scrapbook/software/windows/</link><pubDate>Thu, 02 Jan 2020 22:54:01 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/windows/</guid><description> Wikipedia: Microsoft Windows</description></item><item><title>Unity</title><link>https://iimuz.github.io/scrapbook/software/unity/</link><pubDate>Thu, 02 Jan 2020 21:43:42 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/unity/</guid><description> Wikipedia: Unity(ゲームエンジン)</description></item><item><title>Visual Studio Code</title><link>https://iimuz.github.io/scrapbook/software/vscode/</link><pubDate>Thu, 02 Jan 2020 19:53:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vscode/</guid><description> Wikipedia: Visual Studio Code</description></item><item><title>Microsoft Visual Studio</title><link>https://iimuz.github.io/scrapbook/software/visualstudio/</link><pubDate>Thu, 02 Jan 2020 19:51:44 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/visualstudio/</guid><description> Wikipedia: Microsoft Visual Studio</description></item><item><title>Neovim</title><link>https://iimuz.github.io/scrapbook/software/neovim/</link><pubDate>Thu, 02 Jan 2020 19:49:12 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/neovim/</guid><description> Neovim Wikipedia: Vim#Neovim</description></item><item><title>vim</title><link>https://iimuz.github.io/scrapbook/software/vim/</link><pubDate>Thu, 02 Jan 2020 19:48:07 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/vim/</guid><description> Wikipedia: Vim</description></item><item><title>Qt</title><link>https://iimuz.github.io/scrapbook/software/qt/</link><pubDate>Thu, 02 Jan 2020 19:47:07 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/qt/</guid><description> Wikipedia: Qt</description></item><item><title>Point Cloud Library</title><link>https://iimuz.github.io/scrapbook/software/point-cloud-library/</link><pubDate>Thu, 02 Jan 2020 19:46:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/point-cloud-library/</guid><description> Wikipedia: Point Cloud Library</description></item><item><title>Minecraft</title><link>https://iimuz.github.io/scrapbook/software/minecraft/</link><pubDate>Thu, 02 Jan 2020 19:43:18 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/minecraft/</guid><description> Minecraft Wikipedia: Minecraft</description></item><item><title>Jenkins</title><link>https://iimuz.github.io/scrapbook/software/jenkins/</link><pubDate>Thu, 02 Jan 2020 19:42:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jenkins/</guid><description> Wikipedia: Jenkins</description></item><item><title>Jekyll</title><link>https://iimuz.github.io/scrapbook/software/jekyll/</link><pubDate>Thu, 02 Jan 2020 19:40:50 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/jekyll/</guid><description> Wikiepdia: Jekyll(Software)</description></item><item><title>Hyper</title><link>https://iimuz.github.io/scrapbook/software/hyper/</link><pubDate>Thu, 02 Jan 2020 19:36:27 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hyper/</guid><description> Hyper</description></item><item><title>Hugo</title><link>https://iimuz.github.io/scrapbook/software/hugo/</link><pubDate>Thu, 02 Jan 2020 19:35:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/hugo/</guid><description> Hugo</description></item><item><title>Homebrew</title><link>https://iimuz.github.io/scrapbook/software/homebrew/</link><pubDate>Thu, 02 Jan 2020 19:33:38 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/homebrew/</guid><description> Wikipedia: Homebrew(パッケージ管理システム)</description></item><item><title>Heroku</title><link>https://iimuz.github.io/scrapbook/software/heroku/</link><pubDate>Thu, 02 Jan 2020 19:32:08 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/heroku/</guid><description> [Wikipedia: Heroku][heroku]</description></item><item><title>git</title><link>https://iimuz.github.io/scrapbook/software/git/</link><pubDate>Thu, 02 Jan 2020 19:30:52 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/git/</guid><description> Wikipedia: Git</description></item><item><title>Google Cloud Platform</title><link>https://iimuz.github.io/scrapbook/software/gcp/</link><pubDate>Thu, 02 Jan 2020 19:29:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcp/</guid><description> Wikipedia: Google Cloud Platform</description></item><item><title>Google Colaboratory</title><link>https://iimuz.github.io/scrapbook/software/colaboratoy/</link><pubDate>Thu, 02 Jan 2020 19:27:30 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/colaboratoy/</guid><description> Wikipedia: Project Jupyter#Colaboratory</description></item><item><title>Blender</title><link>https://iimuz.github.io/scrapbook/software/blender/</link><pubDate>Thu, 02 Jan 2020 19:26:14 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blender/</guid><description> Wikipedia: Blender</description></item><item><title>GitHub</title><link>https://iimuz.github.io/scrapbook/software/github/</link><pubDate>Thu, 02 Jan 2020 19:14:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/github/</guid><description> [GitHub.co.jp][gihtub-jp] Wikipedia: GitHub</description></item><item><title>Atom</title><link>https://iimuz.github.io/scrapbook/software/atom/</link><pubDate>Thu, 02 Jan 2020 19:11:57 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/atom/</guid><description> Atom Wikipedia: Atom(テキストエディタ)</description></item><item><title>画像処理</title><link>https://iimuz.github.io/scrapbook/software/image_processing/</link><pubDate>Thu, 02 Jan 2020 18:45:34 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/image_processing/</guid><description> Wikipedia: 画像処理</description></item><item><title>Python</title><link>https://iimuz.github.io/scrapbook/software/python/</link><pubDate>Thu, 02 Jan 2020 18:36:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/python/</guid><description> Python Japan Wikipedia: Python</description></item><item><title>Ruby</title><link>https://iimuz.github.io/scrapbook/software/ruby/</link><pubDate>Thu, 02 Jan 2020 18:34:15 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/ruby/</guid><description> Ruby Wikipedia: Ruby</description></item><item><title>Docker</title><link>https://iimuz.github.io/scrapbook/software/docker/</link><pubDate>Thu, 02 Jan 2020 17:22:09 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker/</guid><description> Wikipedia: Docker</description></item><item><title>Google Cloud Functions</title><link>https://iimuz.github.io/scrapbook/software/gcf/</link><pubDate>Thu, 02 Jan 2020 14:15:21 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcf/</guid><description> Google Cloud Functions</description></item><item><title>Google Cloud Build</title><link>https://iimuz.github.io/scrapbook/software/google_cloud_build/</link><pubDate>Thu, 02 Jan 2020 14:01:30 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google_cloud_build/</guid><description> Google Cloud Build</description></item><item><title>Kernel-based Virtual Machine</title><link>https://iimuz.github.io/scrapbook/software/kvm/</link><pubDate>Thu, 02 Jan 2020 13:51:15 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/kvm/</guid><description> Wikipedia: Kernel-based Virtual Machine</description></item><item><title>Chainer</title><link>https://iimuz.github.io/scrapbook/software/chainer/</link><pubDate>Mon, 30 Dec 2019 12:04:24 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer/</guid><description> Chiner.org 2019.12.5: Preferred Networks、深層学習の研究開発基盤をPyTorchに移行 Wikipeida: Chainer</description></item><item><title>Rootless Docker を動かす</title><link>https://iimuz.github.io/scrapbook/software/rootless_docker/</link><pubDate>Sun, 13 Oct 2019 03:48:38 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/rootless_docker/</guid><description>docker 19.03 より rootless docker が使えるようになっていました。 幾つかの制限はあるようですが、 rootless で実際に環境構築をしてみました。
実行環境 実行用には下記のコマンドで GCE のインスタンスを作成して利用しています。
gcloud compute \ instances create rootless-docker-test \ --machine-type=n1-standard-1 \ --subnet=default \ --network-tier=PREMIUM \ --no-restart-on-failure \ --maintenance-policy=TERMINATE \ --preemptible \ --image=centos-7-v20190916 \ --image-project=centos-cloud \ --boot-disk-size=50GB \ --boot-disk-type=pd-standard \ --boot-disk-device-name=$INSTANCE_NAME CentOS で動かすスクリプト CentOS で最初から環境構築する場合は、下記の順に実行することで動作することを確認しました。
cat &amp;lt;&amp;lt;EOF | sudo sh -x cat &amp;lt;&amp;lt;EOT &amp;gt; /etc/sysctl.d/51-rootless.conf user.max_user_namespaces = 28633 EOT sysctl --system EOF sudo bash -c &amp;#39;echo &amp;#34;username:100000:65536&amp;#34; &amp;gt;&amp;gt; /etc/subuid&amp;#39; sudo bash -c &amp;#39;echo &amp;#34;username:100000:65536&amp;#34; &amp;gt;&amp;gt; /etc/subgid&amp;#39; curl -fsSL https://get.</description></item><item><title>スクラム開発用ツール</title><link>https://iimuz.github.io/scrapbook/software/scrum_tools/</link><pubDate>Thu, 08 Aug 2019 12:28:15 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/scrum_tools/</guid><description> スクラム開発におけるプロジェクト管理ツール比較 優良なら Jira 無料なら OpenProject Redmine の Scrum プラグイン KPT には mindmap を使う事例もある</description></item><item><title>Hugo でビルドした結果を Cloud Build を利用してデプロイ</title><link>https://iimuz.github.io/scrapbook/software/deploy-hugo-project-using-cloud-build/</link><pubDate>Sat, 03 Aug 2019 05:06:35 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/deploy-hugo-project-using-cloud-build/</guid><description>memo cloud build のトリガーを scratchpad リポジトリに対して設定する。 coudbuild.yml を利用する設定とした。 image には gcloud のほかに docker hub も指定できる。
GCP の公式イメージは、 GitHub cloud-builders にある。
Cloud Build を使って Hugo をビルド＆デプロイする
cloud build で複数行書く場合は下記のようにする。
限定公開 GitHub リポジトリへのアクセス
# Decrypt the file containing the key steps: - name: &amp;#34;gcr.io/cloud-builders/gcloud&amp;#34; args: - kms - decrypt - --ciphertext-file=id_rsa.enc - --plaintext-file=/root/.ssh/id_rsa - --location=global - --keyring=my-keyring - --key=github-key volumes: - name: &amp;#34;ssh&amp;#34; path: /root/.ssh # Set up git with key and domain.</description></item><item><title>Google Photoへの自動画像アップロード</title><link>https://iimuz.github.io/scrapbook/software/google_photos_api/</link><pubDate>Sun, 02 Jun 2019 13:51:11 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google_photos_api/</guid><description>メモ Google APIを利用可能にする Get Started with REST 方法は2つ紹介されているが、今回はプロジェクトの設定なども行うため後者(B)の手法を利用した。 おそらく、こっちの方法の方がめんどくさい。 Go to the Google API Console. From the menu bar, select a project or create a new project. To open the Google API Library, from the Navigation menu, select APIs &amp;amp; Services &amp;gt; Library. Search for &amp;ldquo;Google Photos Library API&amp;rdquo;. Select the correct result and click Enable. OAuth2認証用のjsonを取得する 今回の場合は、認証用jsonを利用してブラウザ経由でアクセス権を付与する。 ここで、アクセス権の付与にはブラウザが必要だが、今回はコンソール上に認証用のURLを出力し、 URLへは別の環境でアクセスし、認証用のtokenだけをコンソールから入力するようにしている。 これは、Raspberry Piで利用することが前提のため、UI付きの環境ではない可能性があるため。 SSHなどで入っていても対応できるようにするためです。 参考資料 [追記あり] Google Photos APIsでアルバム作成と写真のアップロード Google Photos API を使用した画像の自動アップロード nasu-tomoyuki/mugencamera</description></item><item><title>gcloud のプロジェクト設定の変更</title><link>https://iimuz.github.io/scrapbook/software/gcloud_change_account/</link><pubDate>Sun, 05 May 2019 03:19:16 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcloud_change_account/</guid><description>概要 複数プロジェクトある場合に設定を保存しておいて一括で変更する方法。
最初だけ行うこと
$ gcloud config configurations create hoge # hoge 設定の追加 $ gcloud config configurations activate hoge # hoge 設定に変更 # hoge 設定に設定情報を追加 $ gcloud config set compute/region asia-northeast1 $ gcloud config set compute/zone asia-northeast-a $ gcloud config set core/account hoge@example.com $ gcloud config set core/project hoge-project $ gcloud cofnig set core/disable_usage_reporting False # 設定を作った後に認証が必要なため認証は実行しておく $ gcloud auth login 設定ができてしまえば、あとは切り替えるだけ。
$ gcloud config configurations activate hoge 参考情報 gcloud configで複数の設定を持って切り替える</description></item><item><title>Chainer Tutorial Chapter 3: ディープラーニング入門</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter03/</link><pubDate>Thu, 02 May 2019 06:33:31 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter03/</guid><description>概要 ディープラーニング入門 メモ ニューラルネットワークは、部分可能な変換をつなげて作られた計算グラフである。 ニューラルネットワークのイメージ dummy . 層は、入力層、出力層と、中間層または隠れ層からなる。 上図は、 3 層アーキテクチャとなる。 各層には、全結合型 (fully-connected)、畳み込み型 (convolutional)、再起型 (recurrent) などがある。 一つのネットワークでは、異なる層の型を用いることが普通である。 入力層近くは、 covolutional であり、出力層近くは fully-connected であったりする。 ネットワークを入力層から出力層までたどることを順伝搬と呼ぶ。 活性化関数 シグモイド関数: $ h = \frac{1}{1 + \exp(-u)} $ シグモイド関数は近年では、層の数が多くなると使わない。 理由は、勾配消失が発生し、学習が進行しにくくなるため。 ReLU: $ h = max(0, u) $ 勾配消失問題に効くことが知られている。 シグモイド関数 ReLU 数式から実際の値を利用することなく求まる答えを解析解と呼ぶ。 繰り返し計算により数値的に求まる解を数値解と呼ぶ。 目的関数の主な種類 平均二乗誤差 交差エントロピー: $ - \sum_k t_k \log y_k $ 全サンプルを考慮すると $ L = - \sum_n \sum_k t_k \log y_k $ 最適化手法 勾配降下法 勾配とは、 L を増加させる方向を示す。 最適化では、 L を減少させたいため、 - 方向へ進める。 ミニバッチ学習 複数のデータを入力し、それぞれの勾配を計算する。その後、勾配の平均値で更新する。 全体を一度の学習に使うとバッチ学習と呼ぶ。 ミニバッチを用いた学習方法を確率的勾配降下法 (stochastic gradient descent: GSD) と呼ぶ。 誤差逆伝搬法 勾配消失 シグモイド関数では、原点から離れるに従い勾配の値が小さくなる。 シグモイド関数の勾配は最大でも 0.</description></item><item><title>Chainer Tutorial Chapter 2: 機械学習とデータ分析入門</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter02/</link><pubDate>Wed, 01 May 2019 07:21:24 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter02/</guid><description>概要 機械学習とデータ分析入門 メモ 単回帰分析と重回帰分析 この辺から実装が出てくると書かれている。 それぞれの実装はあるようです。 単回帰分析と重回帰分析は、ディープラーニングの基礎である。 機械学習手法は、教師あり学習、教師なし学習、強化学習に大別される。 単回帰分析は教師あり学習に分類される。 チュートリアルは大体教師あり学習だよ。 教師あり学習も、実測値を予測する回帰 (regression) と カテゴリを予測する分類 (classification) に大別される。 単回帰分析は、 1 変数を入力として、 1 変数を予測する。 重回帰分析は、多変数を入力として 1 変数を予測する。 データの前処理 平均 0 による中心化 (centering) メリットは、調整すべきパラメータを減らすことができる。 バイアス項がなくなるため単に 1 変数になる。 以降では中心化はしてある前提とする。 目的関数は二乗誤差 (sum of squares error) を利用する。 $ L = \sum_{n=1}^N (t_n wx_n)^2 $ $ \frac{\partial}{\partial w} L = - \sum_{n=1}^N 2x_n(t_n - wx_n) $ 導関数が 0 となる点で、目的関数が最小となるため、 $ \frac{\partial}{\partial w} L = 0 $ を求める。 結局 $ w = \frac{\sum_n x_n t_n}{\sum_n x_n^2} $ になる。 重回帰分析: $ \bold{y} = \bold{w}^T \bold{x} $ 交換法則が成り立つので、 $ \bold{y] = \bold{x}^T \bold{w} $ $ \bold{y} = \bold{X} \bold{w} $ 各列が各入力変数を表す行列 $ \bold{X} $ をデザイン行列と呼ぶ。 目的変数: $ L = (\bold{t} - \bold{y})^T (\bold{t} - \bold{y}) $ 変形すると、 $ L = (\bold{t}^T - \bold{w}^T\bold{X}^T)(\bold{t} - \bold{X}\bold{w}) $ 導出すると $ \bold{w} = (\bold{X}^T \bold{X})^{-1} \bold{X}^T \bold{t} $ となる。 導出には $ \bold{X}^T \bold{X} $ に逆行列が存在することを仮定している。 この式を正規方程式と呼ぶ。 導出で謝りやすい点として $ \bold{X}^T $ の逆行列をかけて単位行列とするパターンがある。 $ \bold{X} $ に逆行列が存在するためには、正方行列である必要があり、 $ \bold{X} $ はサンプルデータと独立変数の数が一致する必要があり、 一般には成り立たない。 NumPy 入門 python の int 型は自動的に Numpy の int64 型</description></item><item><title>Chainer Tutorial Chapter 1: 準備編</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter01/</link><pubDate>Wed, 01 May 2019 06:46:54 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial_chapter01/</guid><description>概要 準備編
医療用のオンライン講義資料と前半部は、ほとんど一緒な気がする。 行列の参考資料も一緒だった。
メモ 大学の学部生向け deep learning が開始できるところまで一通り網羅する予定。 Google Colaboratory の使い方説明 python の説明 チュートリアルは python 3.6 以上を対象としている。 変数宣言と代入 コメントの書き方 変数の型 エラーメッセージを読みましょう。 浮動小数点が as_integer_ratio() という関数を持つ。 これは、 0.5 という値に対して、 (1, 2) というように、 分数での分子と分母を返す。 list の説明 tuple の説明 list は mutable であり、 tuple は immutable dict の説明 for, if, while enumerate で idx が取れるよ。 他によく使うものとして、 zip で複数のペアを作れるよ。 関数 引数の書き方 引数のデフォルト値 返り値 変数のスコープ クラス 定義 継承 機械学習に使われる数学 教師あり学習の考え方 微分の基礎 微分は接線の傾きを求めるよ。 何気に lim が出てくるよ。 簡単な微分の公式 線形性の説明 合成関数の微分。要は、一時変数を置いて、 2 回微分する。 偏微分 線形代数の基礎 スカラー、ベクトル、行列、テンソル 加算、減算、スカラー倍 内積 行列積 高校くらいで習う積の計算。 その他に、外積、要素積 (アダマール積) などがある。 転置 単位行列 逆行列 逆行列が存在すれば正則行列である。 線形結合と二次形式 線形結合: $ \bold{b}^T \bold{x} $ 二次形式: $ \bold{x}^T \bold{A} \bold{x} $ ベクトルの微分 合成関数の微分 (ベクトルバージョン) 確率と統計の基礎 確率変数と確率分布 同時確率: $ p(X=x, Y=y) $ 周辺化: $ p(Y=y) = \sum_x p(X=x, Y=y) $ 条件付き確率: $ p(Y=y | x) $ ベイズの定理: $ p(y, x) = p(y | x) p(x) $ $ p(x) $: 事前確率 $ p(y | x) $: 事後確率 尤度と最尤推定 対数尤度: $ L(\theta) = \prod_{i=1}^N f(x_i; \theta)$ コイントスのパラメータ推定 Maximum a posteiori(MAP) 推定 事前確率を定義し、事前条件を有効にすることで効果的な推定を行う 統計量 平均 分散 不偏分散 ($ n-1 $ で割る) と標本分散 ($ n $ で割る) 標準偏差 相関係数: $ r = \frac{E[(X - \mu_x)(Y - \mu_y)]}{\sqrt{(E[(X - \mu_x)^2(Y - \mu_y)^2])}} $ 相関の有り無しは、無相関検定などの手法が必要となる。</description></item><item><title>Grow with Google</title><link>https://iimuz.github.io/scrapbook/software/grow_with_google/</link><pubDate>Mon, 29 Apr 2019 11:31:36 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/grow_with_google/</guid><description>概要 Google が提供している学習サイトです。 Machine Learning 関連以外にもあり、結構広範な内容をカバーしています。 働き方改革、 YouTuber 向けなどがありました。
Glow with Google JP Glow with Google Machine Learning Machine Learning 関連に関しては 2 コース用意されています。 初心者と中級者に分かれているのですが、中級者の方はほとんどのコースが英語のみになっています。</description></item><item><title>2. 機械学習ライブラリの基礎</title><link>https://iimuz.github.io/scrapbook/software/medical-ai002/</link><pubDate>Sun, 21 Apr 2019 15:03:28 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medical-ai002/</guid><description>リンク 2. 機械学習ライブラリの基礎 メモ</description></item><item><title>5. 実践編: MRI画像のセグメンテーション</title><link>https://iimuz.github.io/scrapbook/software/medicalai_chap5/</link><pubDate>Sun, 21 Apr 2019 15:03:28 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medicalai_chap5/</guid><description>概要 5. 実践編: MRI画像のセグメンテーション メモ 画像セグメンテーションには2種類ある。 Instance-aware Segmentation: 個別の物体を区別する Semantic Segmentation: 同一物体クラスであれば個を区別しない</description></item><item><title>1. 機械学習に必要な数学の基礎</title><link>https://iimuz.github.io/scrapbook/software/medical-ai001/</link><pubDate>Sun, 21 Apr 2019 12:56:33 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medical-ai001/</guid><description>リンク 1. 機械学習に必要な数学の基礎 メモ 大体は、覚えている範囲で済んでいます。 ただ、公式系は結構忘れています。あとは、たまに導出をやってみると意外と思い出す感じです。
機械学習は関数のパラメータ決定である。 ex.) $ f(x; a, b) = ax + b $ ex.) $ L(\theta) = \sum_{n=1}^N (y_i - f(x_i; \theta))^2 $ テンソルは、ベクトルや行列の一般化概念である。 1 階テンソル = ベクトル 2 階テンソル = 行列 逆行列が存在する = 正則行列 $ \bold{b}^T \bold{x} $: 線形結合 $ \bold{x}^T \bold{A} \bold{x} $: 二次形式 ベクトル微分 $ \frac{\partial}{\partial \bold{x}}( c ) = 0 $ $ \frac{\partial}{\partial \bold{x}}(\bold{b} \bold{x}) = \bold{b} $ $ \frac{\partial}{\partial \bold{x}}(\bold{x}^T \bold{A} \bold{x}) = (\bold{A} + \bold{A}^T)\bold{x} $ memo dummy .</description></item><item><title>Medical AI 専門コース オンライン講義資料</title><link>https://iimuz.github.io/scrapbook/software/medical_ai/</link><pubDate>Sat, 13 Apr 2019 15:44:46 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/medical_ai/</guid><description>主要リンク オンライン資料 GitHub メモ 前半は、 chainer tutorials と一緒で読み物になっています。</description></item><item><title>Google Colaboratory のチートシート</title><link>https://iimuz.github.io/scrapbook/software/colab_cheatsheet/</link><pubDate>Sat, 13 Apr 2019 15:39:21 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/colab_cheatsheet/</guid><description>セル操作 Markdownモードへ変更: Ctrl + M → M Codeモードへ変更: Ctrl + M → Y セルの実行: Shift + Enter セルを上に追加: Ctrl + M → A セルを下に追加: Ctrl + M → B セルのコピー: Ctrl + M → C セルの貼り付け: Ctrl + M → V セルの消去: Ctrl + M → D コメントアウト: Ctrl + /</description></item><item><title>Chainer Tutorial</title><link>https://iimuz.github.io/scrapbook/software/chainer_tutorial/</link><pubDate>Sat, 13 Apr 2019 15:33:21 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/chainer_tutorial/</guid><description>主要リンク Chainer Tutorials Chainer Tutorials の Github メモ google colaboratory を利用する前提で進められています。 初学者向けであることが強調されています。 前半は、ほぼ読み物のようです。通勤時間にでも読むようにします。</description></item><item><title>Ruby on Rails の基礎習得するための教材 el-training</title><link>https://iimuz.github.io/scrapbook/software/el_training/</link><pubDate>Fri, 12 Apr 2019 06:45:26 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/el_training/</guid><description>万葉で必須とされるRuby on Railsと その周辺技術の基礎を習得するための新入社員教育用カリキュラムです。
el-training</description></item><item><title>Chapter 2</title><link>https://iimuz.github.io/scrapbook/software/coursera_gcp002/</link><pubDate>Sun, 07 Apr 2019 22:00:43 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coursera_gcp002/</guid><description>Module Introduction</description></item><item><title>VS2010 のデバッグ時に例外発生時で中断する方法</title><link>https://iimuz.github.io/scrapbook/softwaretool/visualstudio/debugexception/</link><pubDate>Fri, 05 Apr 2019 08:38:16 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/softwaretool/visualstudio/debugexception/</guid><description>Visual Studio 2010 でデバッグ実行時に例外が発生したときに、 発生した時点で中断する設定です。 例外は発生したところがわからないとデバッグしにくく調べました。
&amp;ldquo;デバッグ&amp;rdquo; -&amp;gt; &amp;ldquo;例外&amp;rdquo; をクリックし、 出てきたウィンドウでチェックを ON にすれば例外発生時に中断できます。
例外設定画面</description></item><item><title>Chapter 1</title><link>https://iimuz.github.io/scrapbook/software/coursera_gcp001/</link><pubDate>Tue, 02 Apr 2019 06:47:56 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coursera_gcp001/</guid><description>Introducing Google Cloud Platform</description></item><item><title>Google Cloud Platform Fundamentals: Core Infrastructure</title><link>https://iimuz.github.io/scrapbook/software/coursera_gcp/</link><pubDate>Mon, 01 Apr 2019 22:01:34 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/coursera_gcp/</guid><description> course</description></item><item><title>600円のRasPiZero【単体で】Mobilenetv2 1000 class object detection【10fps弱】を達成</title><link>https://iimuz.github.io/scrapbook/study/dl_time_raspizero_mobilenet_10fps/</link><pubDate>Thu, 28 Mar 2019 23:37:03 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/study/dl_time_raspizero_mobilenet_10fps/</guid><description>概要 Nikkei Robotics 2019/3 において、RasPiZero で Mobilenet v2 の 10fps を実現できたことの紹介。 日本の Idein というベンチャー企業が成し遂げた。 これにより、 1000 円前後の環境で物体認識ができるということになり、エッジデバイスの単価が下がっている。 実現のためには、 RasPi に搭載している GPU を利用できるように、独自の RasPi 用の GPU ライブラリを作成し利用している。
トピック 全ての RasPi は GPU Broadcom 社製 VideoCore を標準搭載 VideoCore は 24 ～ 28.8[GFLOPS]と最新のスマホの 1/10 以下とはいえ初代 XBox よりは高速 RasPi の大ヒットを受けて 2014 年に Broadcom 社が仕様書を公開 日ベンチャー Idein 社は仕様書を読み込み VideoCore ハードウェアからソフトウェアスタックを積み上げ TensorFlow および Chainer で叩ける【VideoCore 版 CUDA のようなもの】を内製 VideoCore の DL 実行効率は 40%に達し 1GB のメインメモリに展開できるモデルならだいたい現実的な速度で叩けるらしい</description></item><item><title>Google Apps Script (GAS) の調査</title><link>https://iimuz.github.io/scrapbook/software/gas_survey/</link><pubDate>Tue, 12 Feb 2019 22:52:40 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gas_survey/</guid><description>GAS を使うべきか否かの判断材料 GAS を使うべきか否かの判断材料
選択する理由
Google サービスへのアクセス Google Calendar Spread Sheet Google Drive Admin Directory (G Suite 限定) 定期実行 開発環境の準備が不要 エディタとバージョン管理の問題から、結局ローカル管理 (clasp?) を利用したくなる。 あきらめたほうがいい理由
処理時間が 6 分を超える場合 大量の処理をする必要がある Google Apps Script Quotas トリガーの実行時間は 90 min / day 処理時間が 1 回で 5 分とすると 18 回のみ UrlFetch の実行時間は無料アカウントの場合で 20,000 回 / day 大容量のデータを扱う 体感的には 40 ~ 50 MB あたりが限界のようです。 複数人開発がしにくい 結局 clasp で git 管理にして対応する必要がありそう。 複数人トリガーの管理 G Suite とかだと関係してくるようです。 複数人での Web アプリケーション公開設定の管理 ローカルファイルへのアクセス GAS でよくはまる制約まとめ GAS でよくはまる制約まとめ</description></item><item><title>Google Cloud Functions に Travis CI からデプロイする</title><link>https://iimuz.github.io/scrapbook/software/gcf-continuous-deploy/</link><pubDate>Sat, 09 Feb 2019 16:27:55 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcf-continuous-deploy/</guid><description>Circle CI で Cloud Function をデプロイする Circle CI で Cloud Function をデプロイする
Circle CI を利用した方法ですが、 GCF のデプロイ方法が載っています。 GitHub から Circle CI で Google Cloud Source Repository へ push し、 その結果から GCF でデプロイすることになっているようです。
Google Cloud Functions(Beta)の基本的な仕組み、使い方を学ぶ Google Cloud Functions(Beta)の基本的な仕組み、使い方を学ぶ
Cloud Functions のデプロイ方法を学ぶために利用しました。 とりあえず、初めて Cloud Functions をデプロイしてみました。
https://hogehoge.cloudfunctions.net/gcf-deploy-sample
上記 URL でデプロイされたようです。
curl https://hogehoge.cloudfunctions.net/gcf-deploy-sample とすることで Hello World と表示されることを確認しました。 また、 gcloud コマンドを利用しても呼び出せることを確認しました。
gcloud functions call gcf-deploy-sample --region asia-northeast1 記事では、 beta 関数となっていますが、現在は既に通常レベルに公開されているようです。 あと、 region を付けないと authrized されている環境でも us-east あたりの region を確認しに行っていました。</description></item><item><title>Windows に SPICE のクライアントをインストールする</title><link>https://iimuz.github.io/scrapbook/softwaretool/others/install-spice-win/</link><pubDate>Wed, 06 Feb 2019 21:40:13 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/softwaretool/others/install-spice-win/</guid><description>kvm で構築し GPU Passthrough した windows 環境で、 OpenGL を利用したソフトウェアを動かしました。 そのとき、 Spice というリモート接続するソフトウェアを利用したのですが、 windows 版のインストーラのダウンロード方法が分かりにくかったので、メモしておきます。
windows の SPICE クライアントインストールは、なぜか virt viewer のインストールで行います。 (わかる人には分かるのでしょうが、インストールも SPICE Client とかの名称なら直感的に分かったのですが。) virt viewer というソフトウェアがそのまま spice のクライアントになります。 そのため、インストールには下記の手順でたどった先のファイルをダウンロードする必要があります。
SPICE へ行く &amp;ldquo;Download&amp;rdquo; を開く 下記画像中(SPICE ダウンロードページ)の &amp;ldquo;virt-manager download page&amp;rdquo; を開く 下記画像中(Virt Manager ダウンロードページ)の &amp;ldquo;Win64 MSI&amp;rdquo; をクリックしてダウンロード SPICE ダウンロードページ Virt Manager ダウンロードページ</description></item><item><title>Qt におけるリモートデバッグ</title><link>https://iimuz.github.io/scrapbook/softwaretool/qt/qt-remote-debug/</link><pubDate>Wed, 06 Feb 2019 21:38:27 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/softwaretool/qt/qt-remote-debug/</guid><description>Qt Creator を利用した場合にリモートデバッグを行うこと自体は公式に方法がああります。
Launching the Debugger
サンプルの OpenGL を利用していると思われるプロジェクトでリモートデバッグできることを確認しました。 下記のような用語を用いるとします。
ホスト PC: 開発した exe を実行する PC exe の実行に必要なバイナリやインストールのみを実行 サーバ PC: 開発用環境を構築した PC ビルドするために QtCreator や Visual Studio をインストール 事前条件として下記の作業を行っています。
ホスト PC Visual Studio Professional 2013 Update5 のインストール QtCreator 5.6.4 のインストール Windows SDK のインストール(他のチェックボックスはすべて外しています。) サーバ PC Windows SDK の Remote Debugger ツールをインストール(他のチェックボックスはすべて外しています。) サーバ PC の qtcreatorcdbext.dll (32bit or 64bit) を任意のディレクトリ (qtlib) へコピー その上で下記のような手順でデバッガを起動します。</description></item><item><title>Git for Windows で proxy を設定する</title><link>https://iimuz.github.io/scrapbook/softwaretool/git/proxy-using-git-for-windows/</link><pubDate>Sat, 02 Feb 2019 22:09:59 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/softwaretool/git/proxy-using-git-for-windows/</guid><description>WSL がインストールできない環境で、 git for windows をインストールしたところ、 nc コマンドが使えず git の proxy 指定ができなかったので調べました。 nc コマンドの代わりに connect.exe が利用できるようです。
ProxyCommand connect.exe -H hoge.proxy.jp:8080 %h %p 22番ポートが使えなくても、SSHでGitしたい！</description></item><item><title>CDB の使い方を調べた時のメモ</title><link>https://iimuz.github.io/scrapbook/softwaretool/qt/cdb-debug/</link><pubDate>Sat, 02 Feb 2019 21:45:10 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/softwaretool/qt/cdb-debug/</guid><description>Qt で開発されているソフトウェアのデバッグ作業で調べたので、メモしておきます。 単にデバッグ実行するだけであれば、 Qt の開発環境をデバッグ実行するだけなので、意識する事はないと思います。 今回は開発環境が入っている PC では実行できなかったため、 リモート PC で実行して開発環境からチェックするということを行いました。 Visual Studio だと、開発環境からリモートの操作ができるのですが、 Qt 開発環境の場合は、リモート PC のコマンドラインからステップ実行などをする必要がありました。 ブレークポイントの設定などは Qt 環境からできますが、 なぜか、一回止めると、再度進めるためにはコマンドラインの入力待ちになってしまいました。 変数のチェックとかは、 Qt 開発環境からできます。
cdb/Windbgの使い方のメモ にまとめられていました。
コマンド一覧の取得は単純に ? でできます。
0:000&amp;gt; ? 実行関連
順にgdbにおけるcontinue、nexti（関数の中に入らない）、stepi（関数の中に入る）、finish（リターンするまで進める）に対応する。
0:000&amp;gt; g 0:000&amp;gt; p 0:000&amp;gt; t 0:000&amp;gt; gu</description></item><item><title>powershell でファイルをダウンロードする</title><link>https://iimuz.github.io/scrapbook/programming/powershell/download-using-powershell/</link><pubDate>Wed, 30 Jan 2019 22:28:29 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/programming/powershell/download-using-powershell/</guid><description>いろいろな方法を試しましたが、結局上記スクリプトでないとダウンロードできませんでした。
Power Shell でファイルをダウンロードする で基本のダウンロードスクリプトが見つかったのですが、 https からのダウンロードのせいか SSL/TLS のチャネル生成失敗エラーが発生していました。
&amp;#34;2&amp;#34; 個の引数を指定して &amp;#34;DownloadFile&amp;#34; を呼び出し中に例外が発生しました: &amp;#34;要求は中止されました: SSL/TLS のセキュリティで保護されているチャネルを作成できませんでした&amp;#34; SSL/TLS のセキュリティ用に Invoke-RestMethod、Invoke-WebRequestが失敗する の方法で SecurityProtocol の 2 行を追加する必要がありました。 SSL/TLS 関連では、 PowershellのInvoke-RestMethodをhttpsに実施すると失敗する の方法では失敗してしまいました。 よくわかっていないので求めていることが違ったのかもしれません。</description></item><item><title>svn のリポジトリ構成がデフォルトではない場合における git svn コマンド</title><link>https://iimuz.github.io/scrapbook/softwaretool/git/git-svn-for-strange-folder/</link><pubDate>Wed, 30 Jan 2019 22:21:53 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/softwaretool/git/git-svn-for-strange-folder/</guid><description>svn の中が歴史的経緯により複雑な環境となっている場合があります。 例えば、下記のような構成です。
root |- trunk | |- project_a | |- project_b |- branches | |- project_a | |- project_b |- tags |- project_a_v1.0.0 |- project_b_v1.0.1 root の下にプロジェクトごとの trunk などがあるわけではなく、各プロジェクトの turnk が trunk ディレクトリの下に配置されています。
この場合は、下記のようなコマンド群を使っていく必要があります。
git svn clone -T project_a svn://hoge/trunk/ trunk の直前までの URL を書き、最後の trunk フォルダ名を -T オプションにつなげます。 branches とかの取得方法もあるのかもしれませんが、あきらめました。
上記方法論だと、 branch は取り込め無いのが問題ですが、とりあえず trunk だけは移行できます。</description></item><item><title>情報系の資格</title><link>https://iimuz.github.io/scrapbook/software/skills/</link><pubDate>Sat, 19 Jan 2019 13:29:51 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/skills/</guid><description>画像処理エンジニア検定 画像処理エンジニア検定 Qiita: 画像処理初心者が、画像処理エンジニア検定エキスパートに合格した時の学習法 G 検定 日経経済新聞: AIの知識を問う「G検定」 合格者の裾野広がる</description></item><item><title>Windows で OpenSSH をドメイン環境下でインストール</title><link>https://iimuz.github.io/scrapbook/softwaretool/others/install-windows-openssh-under-domain/</link><pubDate>Sat, 22 Dec 2018 12:06:17 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/softwaretool/others/install-windows-openssh-under-domain/</guid><description>Windows10 において、 &amp;ldquo;オプション機能の追加&amp;quot;から OpenSSH Server をインストールしたら失敗したので、 対処したときのメモです。
結論としては、 WSUS (Windows Server Update System) が有効になっていて、 インストールできない場合があるようなので、 一時的に WSUS を無効にしてあげることで対応できるようです。
OpenSSH Server のインストール手順 下記に手順を示します。
Win + R を押して、 regedit で OK を押す。
管理者権限に昇格してレジストリエディタを開く。
HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU に移動する。
UseWUServer の値を 0 とする。
WSUS を再起動する。
$ net stop wuauserv &amp;amp;&amp;amp; net start wuauserv OpenSSH Server をインストールする。
$ Get-WindowsCapability -Online | ? { $_.Name -like &amp;#39;OpenSSH*&amp;#39; } $ Add-WindowsCapability -Online -Name &amp;#39;OpenSSH.</description></item><item><title>アジャイルソフトウェア開発</title><link>https://iimuz.github.io/scrapbook/software/agile-software-development/</link><pubDate>Fri, 23 Nov 2018 11:43:02 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/agile-software-development/</guid><description>アジャイルソフトウェア開発宣言 アジャイルソフトウェア開発宣言の原文
私たちは、ソフトウェア開発の実践あるいは実践を手助けをする活動を通じて、 よりよい開発方法を見つけだそうとしている。この活動を通して、私たちは 以下の価値に至った。
プロセスやツールよりも 個人と対話 を、 包括的なドキュメントよりも 動くソフトウェア を、 契約交渉よりも 顧客との協調 を、 計画に従うことよりも 変化への対応 を、 価値とする。すなわち、左記のことがらに価値があることを認めながらも、 私たちは右記のことがらにより価値をおく。
Kent Beck,Mike Beedle,Arie van Bennekum,Alistair Cockburn, Ward Cunningham,Martin Fowler,James Grenning,Jim Highsmith, Andrew Hunt,Ron Jeffries,Jon Kern,Brian Marick,Robert C. Martin, Steve Mellor,Ken Schwaber,Jeff Sutherland,Dave Thomas
© 2001, 上記の著者たち
この宣言は、この注意書きも含めた形で全文を含めることを条件に自由にコピーしてよい。
アジャイル宣言の背後にある原則 アジャイル宣言の背後にある原則の原文
アジャイル宣言の背後にある原則
私たちは以下の原則に従う:
顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。 要求の変更はたとえ開発の後期であっても歓迎します。 変化を味方につけることによって、お客様の競争力を引き上げます。 動くソフトウェアを、2-3週間から2-3ヶ月という できるだけ短い時間間隔でリリースします。 ビジネス側の人と開発者は、プロジェクトを通して 日々一緒に働かなければなりません。 意欲に満ちた人々を集めてプロジェクトを構成します。 環境と支援を与え仕事が無事終わるまで彼らを信頼します。 情報を伝えるもっとも効率的で効果的な方法は フェイス・トゥ・フェイスで話をすることです。 動くソフトウェアこそが進捗の最も重要な尺度です。 アジャイル･プロセスは持続可能な開発を促進します。 一定のペースを継続的に維持できるようにしなければなりません。 技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。 シンプルさ（ムダなく作れる量を最大限にすること）が本質です。 最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。 チームがもっと効率を高めることができるかを定期的に振り返り、 それに基づいて自分たちのやり方を最適に調整します。 なぜアジャイル宣言が誕生したのか 下記のまとめによると、 アジャイル宣言とは文字通り&amp;quot;宣言&amp;quot;であり、 細かいことは何も決めていないということになります。 技術変化の速い現代において、変化に適応し、 適切な選択をもって対応していこうといっていることになるようです。</description></item><item><title>GCP のインスタンス起動でエラーが発生する</title><link>https://iimuz.github.io/scrapbook/software/gcp-resource-error/</link><pubDate>Mon, 19 Nov 2018 06:41:46 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gcp-resource-error/</guid><description>GCP で作成したインスタンスを起動する場合に、 下記のようなエラーが発生する場合があります。
Starting instance(s) ubuntu-dev...failed. ERROR: (gcloud.compute.instances.start) The zone &amp;#39;projects/hoge/zones/asia-northeast1-b&amp;#39; does not have enough resources available to fulfill the request. Try a different zone, or try again later. プリエンプティブインスタンスである場合に、 GCP 側で起動できないようにすることがあるようです。
GCP(GCE)でプリエンプティブインスタンスが起動しない場合の対処法
上記情報によれば復活するまでに 2 日とかかかる場合もあるようです。</description></item><item><title>docker 環境で KVM を利用する</title><link>https://iimuz.github.io/scrapbook/software/docker-kvm-privileged/</link><pubDate>Mon, 17 Sep 2018 15:24:58 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker-kvm-privileged/</guid><description>KVM + GPU Passthrough ができることまでは確認しました。 これに加えて、 docker を利用することで、 GPU の passthrough 設定のみしておけば、 package 類はインストールしなくても利用できました。
docker image を生成する Dockerfile と、 docker-compose.yml のサンプルを下に置いておきました。
GitHub: iimuz/docker-kvm</description></item><item><title>KVM + GPU Passthrough + windows で仮想環境を構築</title><link>https://iimuz.github.io/scrapbook/software/docker-kvm-windows/</link><pubDate>Mon, 17 Sep 2018 14:16:22 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker-kvm-windows/</guid><description>windows 環境を仮想化し、 GPU を利用可能な環境を作成する方法です。 windows10 を利用した場合は、 GPU Passthrough が正常に動作することを確認しました。 一方で、 windows7 では GPU Passthrough が正常に動いていないです。
あと、今回の試し範囲では GPU Passthgough した後に、 再起動なしで GPU をホスト PC で利用する方法が分かっていません。 そのため、 NVIDIA Docker などと使い分けができていないです。 多分、普通に使うなら GCP とかで GPU インスタンスを利用したほうが簡単です。
環境構築手順 ハードウェア要件 GPU Passthrough するにあたり、ホスト PC には2つ以上の GPU が必要となります。 ひとつは、ホスト PC の UI を出力するためのグラフィックボードであり、 もうひとつはゲスト PC に Passthrough するグラフィックボードになります。 ホスト PC のグラフィックボードは、 CPU などに内蔵されているオンボード GPU でも可能です。
その他に、 Intel VT や AMD-V などの仮想化に対応している CPU か マザーボードである必要があります。 また、 UEFI ブートに対応している必要もあります。 これらは BIOS の設定画面から有効化することができますが、 有効化できない場合は、そのホスト PC では GPU Passthrough した仮想環境を用意することができないことになります。</description></item><item><title>技術向上ガイド</title><link>https://iimuz.github.io/scrapbook/software/google-technical-guide/</link><pubDate>Fri, 24 Aug 2018 22:36:25 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/google-technical-guide/</guid><description>Qiita: [翻訳] 技術向上ガイドにGoogleのTechnical Development Guideの翻訳があったので読んだ感想です。 色々と書かれているのですが、英語文献が多いので読むのには時間がかかりそうです。 ただ、その中でも課題プロジェクトに取り組むという部分はとっかかりやすいように思いました。
ウェブサイトを作成し維持する、自分自身のサーバーを構築する、またはロボットを構築する
&amp;hellip;
CodeJamやACMの国際大学対抗プログラミングコンテストのようなコーディング競技を通して自分のアルゴリズム知識を磨く
例えば、プログラミングコンテストで日本語でやりやすそうなのはAtCoderやISUCONなどでしょうか。 この辺であれば、過去問なども記載されており取り組むのによいような気がします。
その他に系統は違いますが、Kaggleなどは機械学習の知識をつけるにはよさそうです。</description></item><item><title>chrome のみで GCE にアクセスする環境構築した時のメモ</title><link>https://iimuz.github.io/scrapbook/software/gce_ssh_using_chrome/</link><pubDate>Wed, 06 Jun 2018 16:53:55 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/gce_ssh_using_chrome/</guid><description>概要 アクセスするだけなら GCE は cloud console でできます。 ポートフォワードしたい場合は、 secure shell という chrome アプリを利用すればできます。
フロー GCE の cloud console でアクセス用のキーを作成(ssh-keygen)し、メタデータとして登録 本当はよくないかもしれないが、とりあえず動かしたいだけなら gce 用のキーがすでにあるのでそれで対応する。 secure shell では public キーと pvivate キーの両方が必要となるため、両方ダウンロード ssh client として chrome app の secure shell を利用する。 設定画面では、 user name と ip (外部IP)、port を指定する ID(Identify?)のところに pub と private の両方のキーを import する SSH 引数に -L 8888:localhost:8888 gce 側で何かport 8888で待ち受けさせる(適当なweb serverを立てる) client pc 側でブラウザから localhost:8888 にアクセス 所感 手元の端末の環境(Linux, Windows, Mac)によらず動かせるようにしたかったので試してみました。 これで chromebook とかの安いPCに移行することができるかもしれません。 (chromebook の開発者モードを利用するとかいろいろありそうですが、 できれば通常モードの範囲でやりくりしたいのです。)</description></item><item><title>WindowsでDocker+Hugoサーバを動作させる方法です</title><link>https://iimuz.github.io/scrapbook/software/dockerwindows/</link><pubDate>Sat, 26 Nov 2016 12:08:10 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/software/dockerwindows/</guid><description>概要 Mac側でdockerを利用してhugoの実行環境を作成したのですが、 同じデータを共有しているwindows側でも ビルドとデプロイができるdocker環境を作成しました。 その際、windows側だと確認用のローカルhugoサーバを建てた時に、 接続IPの設定でハマったのでメモしておきます。
結論 Docker toolboxの場合は、virtualboxを利用しているため、 virtualboxのIPも設定した上で、 hugoサーバのアドレス設定を適切にする必要がありました。 (Port番号は、どこがどこに繋がっているのか明確にするためにわざと変えています。 別に変える必要はないので、本当は全部1313(hugoのデフォルト)にしています。)
virtualboxの設定画面(docker-machineに利用している仮想マシン) からネットワーク設定を開き、IPとポートを設定します。
例えば、ホストとゲストを下記のように設定します ホスト: IP = 127.0.0.1, Port = 1313 ゲスト: IP = 0.0.0.0 Port = 8888 dockerデーモンを起動する時に、下記に記載するようにポートフォワードしておきます
$ docker run -d -p 8888:80 -v source_volume:mount_dir hugo_image dokcerデーモン内では下記のようにhugoサーバーが起動するようにします。
$ hugo server -p 80 --baseURL=127.0.0.1 --bind=0.0.0.0 -w windows側からブラウザで127.0.0.1:1313にアクセスすると観れます。
構成状況 結論部分で記載したように構成を組むと下記のように設定がなされます。
(hugo: IP = 0.</description></item><item><title>今更ながらにDockerについて調べてみました</title><link>https://iimuz.github.io/scrapbook/software/docker_survey/</link><pubDate>Wed, 23 Nov 2016 21:24:50 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/docker_survey/</guid><description>Dockerとは何ができるのでしょうか? 色々調べましたが、Dockerの構成などは説明されているのですが、 何ができるようになるのかをわかりやすく書いている文献を見つけられませんでした。
調べた範囲では、下記のようなことができるという感じでしょうか。 実運用でしているわけではないので本当のメリットは不明です。
アプリケーションを実行する環境を構築できる 用意した実行環境が周りを汚さない(多分これは重要) 困ったら即消せる(まあ、環境構築してたら結構失敗するよね) 例えば、下記のようなサイトを参考にさせてもらいました。
paiza開発日誌 いまさら聞けないDocker入門(1) 「Docker」とは、 Docker社（旧dotCloud）が開発するオープンソースの コンテナー管理ソフトウェアの1つです。
ライセンスがオープンソースなのは使いやすいです。 githubのdocker/LICENSEによると、 Appache License2.0に従うようです。
重要なこととして、 NVIDIA Dockerなるdockerイメージがあり、TensorFlowの環境構築に使えるそうです。 NVIDIA Docker
sshによるdocker-machineのdefaultへのログイン 最初に作られたdocker-machineのdefaultへsshで入るときのIDとパスは下記になるそうです。 windowsの場合、 sshで入るにはgit-bashを利用するか(おそらくdockerインストール時に入っています。)、 Windows10であればBash on UBuntu on Windowsで入れます。 私の場合は、Bash on Windowsで入れることを確認しました。
user: docker pass: tcuser Dockerのインストールと起動 Dokcer Toolboxをインストールしてpowershellから起動しようとすると、 いくつかエラーが発生しました。
docker-machineでTLSエラー 下記のようなエラーが発生しました。
Error checking TLS connection: Error checking and/or regenerating the certs: There was an error validating certificates for host &amp;ldquo;192.</description></item><item><title>Python開発環境をDockerで構築します</title><link>https://iimuz.github.io/scrapbook/software/pythonenvwithdocker/</link><pubDate>Wed, 23 Nov 2016 21:17:23 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/pythonenvwithdocker/</guid><description>目標 深層学習の勉強で実際に実行できる環境を整えようと思ったのですが、 以前から入っているpython環境とは別にしたいのでDockerで構築してみました。
pythonにインストールするライブラリは、 O'REILLY ゼロから作るDeep Learningが動作する環境です。 したがって、下記の環境になります。
Python 3.x NumPy Matplotlib 結論 python環境を構築するdockerファイルは下記になりました。 もはやdockerfile必要なのかというレベルで何も書いていないです。(楽すぎます)
FROMpython:3.5.2RUN pip install numpy matplotlib理由 python環境であればpyenvとか利用すれば、環境は分離できるのですが、 利用しているPCがMacとWindowsの両方あります(Macの方が性能が低いです)、 Macの方がプログラミングはしやすいのですが、 深層学習には軽い実験をするのにもマシンパワーが必要となるため、 実行だけはWindowsでやりたいわけです。 MacとWindowsで同じように動く環境を構築するのがめんどくさいという理由です。
注意 Dokcerと深層学習のフレームワーク Tensorflowを利用するならばDockerに公式があります TensorflowのDockerイメージは、Docker Hubにあります。
PUBLIC REPOSITORY:tensorflow/tensorflow
上記イメージは、python2.7になります。 python3系のdockerイメージは公開されていないそうです。 python3系でTensorFlowを利用したい場合は、 公式からForkしてPython3対応を公開されている方がいらっしゃいましたので、 以下を利用すれば良いと思います。
khm/tensorflow: branch/feature-py3 TensorFlow の Docker Image を Python3 で動かす その他 Docker Habに公式イメージがあるフレームワーク PUBLIC | AUTOMATED BUILD chainer/chainer 公式が見つからなかったフレームワーク Caffe DeepDream MacとWindowsではGPUの利用はできません 深層学習で遊ぶためにはGPGPUを利用した方が高速に処理できます。 (場合によってはCPUでは現実時間で終わりません。) ただし、MacかWindowsでDockerを利用する場合、GPUデバイスにアクセスできないため、 CPU実行しかできません。 必要に応じてLinux環境が純粋に入っているPCを用意する必要がありそうです。</description></item><item><title>Atomの設定をGitHubを利用して共有する方法</title><link>https://iimuz.github.io/scrapbook/software/shareatomsettings/</link><pubDate>Fri, 02 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/shareatomsettings/</guid><description>&lt;p>Atomの設定をvimの.vimrcとかbundlesとかのように共有する方法を調べた時のメモ。&lt;/p></description></item><item><title>Windows環境のエディタをAtomに乗り換えようかと思ったのでメモ</title><link>https://iimuz.github.io/scrapbook/software/atomeditor/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/atomeditor/</guid><description>&lt;p>Windows環境ではVimが思ったよりも使いにくいので変更しようと思って&lt;a href="https://atom.io/">Atom&lt;/a>を試験的に導入したのでその時のメモ&lt;/p></description></item><item><title>今後学ぼうと考えているプログラム言語をまとめてみる</title><link>https://iimuz.github.io/scrapbook/software/progrmlanguage/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/progrmlanguage/</guid><description>何をするのに一般的に利用されているか、まとめてみる。
概要 用途によって利用する言語は変えれば良いと思うが、 いくつか比較してみると、とりあえず使えるようになっておけば良い言語は以下の感じかな。
C / C++: 現時点で一番利用しているから放置 Java: Androidアプリ開発で利用する Objective-C (Swift): iPhone/macアプリ開発で利用する Python: 学術系では強い Ruby: ??? 比較対象言語 julia go lang javascript java python c++ swift ruby or ruby on rails haskel c# TOIBE TOIBEは以下のような感じ。 そこから主観的に抜き出しておく。
C / C++ Java Objective-C C# Python Javascript Ruby TOIBEランキング C Java Objective-C C++ C# Basic PHP Python Perl Transact-SQL Delphi/Object Pascal Javascript VB .NET Visual Basic R Ruby Dart F# Swift Pacal</description></item><item><title>Blenderで流体シミュレーション</title><link>https://iimuz.github.io/scrapbook/software/blenderfluidsimulation/</link><pubDate>Wed, 06 May 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blenderfluidsimulation/</guid><description>Blenderで流体シミュレーションを試した時のメモ。
概要 いろはメモ -Blender-: グラスに水を注いでみる 〈流体シミュレーション〉のページを参考に 流体シミュレーションの実験。
泥水ぶちまけてる感じだが、きちんとマテリアルとかテクスチャとか勉強してないから。 レンダリングについては後回し。 シミュレーションできることが分かったので良い。
Blender: GitHub: fluidSimulation
流体シミュレーションの準備 とりあえず液体を注ぐものを作成する。
法線方向を確認するためには、Edit modeでNキーで表示されるPropertiesから Mesh display -&amp;gt; Normals -&amp;gt; Display face normals as linesをONにする。
流体の注ぎ口を作成 UV球を作成する。(これが水の発生源になる。) 作成したUV球に物理演算から流体を設定する。
設定としては、以下の感じ。
タイプ: 流入口 ボリュームの初期化: 両方 流入速度: 適当に注ぎたい方向へ向ける いろはメモ -Blender-: グラスに水を注いでみる 〈流体シミュレーション〉によると、 各項目の説明は以下。
【流体のタイプ】 コントロール(Control) ： 流体の形状を変形させるようコントロール。 パーティクル(Particle) ： 飛沫。しずく・浮かぶ泡・トレーサー（霧みたいなもの）の3タイプがある。 流入口(Inflow) ： 液体が出てくる。給水栓。 流出口(Outflow) ： 液体が吸収されてなくなる。排水口。流入口とセットで使うとよいみたい。 障害物(Obstacle) ： 障害物。表面の滑り方（粘つき）を、滑る・滑らない・部分的に滑るの3タイプから選ぶ。 液体(Fluid) ： そこにあるだけの液体。流入口のように生成はされない。 ドメイン(Domain) ： 液体シミュレーションの領域。必ず必要。</description></item><item><title>UnityとBlenderハンズオンの第3章を進めてみる</title><link>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender03/</link><pubDate>Tue, 05 May 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender03/</guid><description>&lt;p>&lt;a href="http://yaju3d.hatenablog.jp/entry/2015/04/07/015641">静岡Developers勉強会の「UnityとBlenderハンズオン第3章」の資料公開&lt;/a>
に沿って進めてみる。&lt;/p></description></item><item><title>UnityとBlenderハンズオンの第2章を進めてみる</title><link>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender02/</link><pubDate>Wed, 29 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender02/</guid><description>&lt;p>&lt;a href="http://yaju3d.hatenablog.jp/entry/2015/03/09/020956">静岡Developers勉強会の「UnityとBlenderハンズオン第2章」の資料公開&lt;/a>
に沿って進めてみる。&lt;/p></description></item><item><title>UnityとBlenderハンズオンの第1章を進めてみる</title><link>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender01/</link><pubDate>Mon, 27 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/shizuokadevunityandblender01/</guid><description>&lt;p>&lt;a href="http://www.slideshare.net/yaju88/unityblender1">静岡Developers勉強会: UnityとBlenderハンズオン 第1章&lt;/a>
でUnityとBlenderの使い方を勉強する。&lt;/p></description></item><item><title>BlenderでPythonスクリプトを利用する</title><link>https://iimuz.github.io/scrapbook/software/blenderpythonscript/</link><pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blenderpythonscript/</guid><description>&lt;p>BlenderでPythonを利用する。
ついでに、Blenderの物理シミュレーションをpythonで作成する。
作ったデータ: &lt;a href="https://github.com/iimuz/blenderTutorials/tree/develop/cubePhysicsEngine">github: iimuz/blenderTutorials/cubePhysicsEngine&lt;/a>&lt;/p></description></item><item><title>Blenderコマンドの備忘録</title><link>https://iimuz.github.io/scrapbook/software/blendersetting/</link><pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blendersetting/</guid><description>&lt;p>Blenderでのコマンド備忘録&lt;/p></description></item><item><title>Blenderの練習 000</title><link>https://iimuz.github.io/scrapbook/software/blender_practice/</link><pubDate>Tue, 14 Apr 2015 00:00:00 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/software/blender_practice/</guid><description>&lt;h2 id="heading">目標&lt;/h2>
&lt;p>とりあえず一週間位(実質初版完成まで2、3日)で、
結婚式の余興のためにアニメーションを作成する必要がある。
前回は、Adobe After Effects(?)で作成したが体験版の期間が終わったので、
利用できなくなった。
そこで、今回はBlenderのみでアニメーション作成したい。
作りたいイメージは、以下のような感じ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=wtKILj--9XY&amp;amp;feature=youtu.be">Motion graphics line performance in Japan&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=dUB5gH41Qg0&amp;amp;feature=youtu.be">映画風オープニングムービー・動画制作・動画素材・タイトル動画 0019&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=hriQaGUAJLU&amp;amp;feature=youtu.be">『SMAP LIVE Opening』1991'97'98'99'00'01'02'03'05'06'08'10'12'ver&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>