<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on しさく</title>
    <link>http://iimuz.github.io/scrapbook/tags/docker/</link>
    <description>Recent content in docker on しさく</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 26 Nov 2016 12:08:10 +0000</lastBuildDate>
    
	<atom:link href="http://iimuz.github.io/scrapbook/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WindowsでDocker&#43;Hugoサーバを動作させる方法です</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/docker/dockerwindows/</link>
      <pubDate>Sat, 26 Nov 2016 12:08:10 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/docker/dockerwindows/</guid>
      <description>概要 Mac側でdockerを利用してhugoの実行環境を作成したのですが、 同じデータを共有しているwindows側でも ビルドとデプロイができるdocker環境を作成しました。 その際、windows側だと確認用のローカルhugoサーバを建てた時に、 接続IPの設定でハマったのでメモしておきます。
結論 Docker toolboxの場合は、virtualboxを利用しているため、 virtualboxのIPも設定した上で、 hugoサーバのアドレス設定を適切にする必要がありました。 (Port番号は、どこがどこに繋がっているのか明確にするためにわざと変えています。 別に変える必要はないので、本当は全部1313(hugoのデフォルト)にしています。)
 virtualboxの設定画面(docker-machineに利用している仮想マシン) からネットワーク設定を開き、IPとポートを設定します。  例えば、ホストとゲストを下記のように設定します  ホスト: IP = 127.0.0.1, Port = 1313 ゲスト: IP = 0.0.0.0 Port = 8888   dockerデーモンを起動する時に、下記に記載するようにポートフォワードしておきます
$ docker run -d -p 8888:80 -v source_volume:mount_dir hugo_image dokcerデーモン内では下記のようにhugoサーバーが起動するようにします。
$ hugo server -p 80 --baseURL=127.0.0.1 --bind=0.0.0.0 -w windows側からブラウザで127.0.0.1:1313にアクセスすると観れます。
  構成状況 結論部分で記載したように構成を組むと下記のように設定がなされます。
(hugo: IP = 0.0.0.0, port = 80, baseURL = 127.0.0.1) -&amp;gt; (docker: IP = 0.</description>
    </item>
    
    <item>
      <title>Python開発環境をDockerで構築します</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/docker/pythonenvwithdocker/</link>
      <pubDate>Wed, 23 Nov 2016 21:17:23 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/docker/pythonenvwithdocker/</guid>
      <description>目標 深層学習の勉強で実際に実行できる環境を整えようと思ったのですが、 以前から入っているpython環境とは別にしたいのでDockerで構築してみました。
pythonにインストールするライブラリは、 O&amp;rsquo;REILLY ゼロから作るDeep Learningが動作する環境です。 したがって、下記の環境になります。
 Python 3.x NumPy Matplotlib  結論 python環境を構築するdockerファイルは下記になりました。 もはやdockerfile必要なのかというレベルで何も書いていないです。(楽すぎます)
FROMpython:3.5.2RUN pip install numpy matplotlib 理由 python環境であればpyenvとか利用すれば、環境は分離できるのですが、 利用しているPCがMacとWindowsの両方あります(Macの方が性能が低いです)、 Macの方がプログラミングはしやすいのですが、 深層学習には軽い実験をするのにもマシンパワーが必要となるため、 実行だけはWindowsでやりたいわけです。 MacとWindowsで同じように動く環境を構築するのがめんどくさいという理由です。
注意 Dokcerと深層学習のフレームワーク Tensorflowを利用するならばDockerに公式があります TensorflowのDockerイメージは、Docker Hubにあります。
PUBLIC REPOSITORY:tensorflow/tensorflow
上記イメージは、python2.7になります。 python3系のdockerイメージは公開されていないそうです。 python3系でTensorFlowを利用したい場合は、 公式からForkしてPython3対応を公開されている方がいらっしゃいましたので、 以下を利用すれば良いと思います。
 khm/tensorflow: branch/feature-py3 TensorFlow の Docker Image を Python3 で動かす  その他  Docker Habに公式イメージがあるフレームワーク  PUBLIC | AUTOMATED BUILD chainer/chainer  公式が見つからなかったフレームワーク  Caffe DeepDream   MacとWindowsではGPUの利用はできません 深層学習で遊ぶためにはGPGPUを利用した方が高速に処理できます。 (場合によってはCPUでは現実時間で終わりません。) ただし、MacかWindowsでDockerを利用する場合、GPUデバイスにアクセスできないため、 CPU実行しかできません。 必要に応じてLinux環境が純粋に入っているPCを用意する必要がありそうです。</description>
    </item>
    
  </channel>
</rss>