<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Development on しさく</title><link>https://iimuz.github.io/scrapbook/softwaredev/</link><description>Recent content in Software Development on しさく</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://iimuz.github.io/scrapbook/softwaredev/index.xml" rel="self" type="application/rss+xml"/><item><title>スクラム開発用ツール</title><link>https://iimuz.github.io/scrapbook/softwaredev/scrum_tools/</link><pubDate>Thu, 08 Aug 2019 12:28:15 +0000</pubDate><guid>https://iimuz.github.io/scrapbook/softwaredev/scrum_tools/</guid><description> スクラム開発におけるプロジェクト管理ツール比較 優良なら Jira 無料なら OpenProject Redmine の Scrum プラグイン KPT には mindmap を使う事例もある</description></item><item><title>Qiita: ロシアの天才ハッカーによる【新人エンジニアサバイバルガイド】を読んで</title><link>https://iimuz.github.io/scrapbook/softwaredev/russia-engineer-survival-guide/</link><pubDate>Sun, 26 Aug 2018 15:21:16 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/softwaredev/russia-engineer-survival-guide/</guid><description>Qiita: ロシアの天才ハッカーによる【新人エンジニアサバイバルガイド】 が心にとどめておいたほうがよさそうな部分が結構あったので抜粋しておきます。
コードのクオリティに腹をたてるな。同僚の2倍のスピードでリリースをするよう心がけろ。 この部分は痛いほどわかりますが、どうしてもできないときもあります。 でも今後なるべく気を付けようと思います。 (別プロジェクトに参加していきなりエラーのデバッグを割り当てられて、 コードを見た時によく思ってしまう。)
Chef,Ansible,Puppetを学ぼう。運用エンジニアの時間を浪費するのはやめよう。 環境には寄ると思いますが、Dockerというのもありかな。
常に４つの環境を用意しておこう。 開発環境で動いても、本番環境で想定通りに動くかは別問題だからテスト環境はよく準備するようにします。
常にTLSを使おう。社内サービスであってもだ。 社内利用だとあまりTLSを気にしていませんでした。 どうしても甘くなってしまいます。</description></item><item><title>Qiita: [翻訳] 技術向上ガイド を読んで</title><link>https://iimuz.github.io/scrapbook/softwaredev/google-technical-guide/</link><pubDate>Fri, 24 Aug 2018 22:36:25 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/softwaredev/google-technical-guide/</guid><description>Qiita: [翻訳] 技術向上ガイドにGoogleのTechnical Development Guideの翻訳があったので読んだ感想です。 色々と書かれているのですが、英語文献が多いので読むのには時間がかかりそうです。 ただ、その中でも課題プロジェクトに取り組むという部分はとっかかりやすいように思いました。
ウェブサイトを作成し維持する、自分自身のサーバーを構築する、またはロボットを構築する
&amp;hellip;
CodeJamやACMの国際大学対抗プログラミングコンテストのようなコーディング競技を通して自分のアルゴリズム知識を磨く
例えば、プログラミングコンテストで日本語でやりやすそうなのはAtCoderやISUCONなどでしょうか。 この辺であれば、過去問なども記載されており取り組むのによいような気がします。
その他に系統は違いますが、Kaggleなどは機械学習の知識をつけるにはよさそうです。</description></item><item><title>プログラマが知るべき97のこと</title><link>https://iimuz.github.io/scrapbook/softwaredev/97-things-that-programmers-should-know/</link><pubDate>Fri, 08 Jun 2018 18:45:05 +0900</pubDate><guid>https://iimuz.github.io/scrapbook/softwaredev/97-things-that-programmers-should-know/</guid><description>プログラマが知るべき97のことという内容で著名な方々のコメント(?)がまとめられたページがありました。 &amp;ldquo;シンプルさは美に宿る&amp;quot;とか&amp;quot;リファクタリングの際に注意すべきこと&amp;quot;ととか、 結構ためになる内容なので一通り目を通すと面白いです。
プログラマが知るべき97のこと 97のことと言いつつ、107個のっている理由は不明です。</description></item></channel></rss>