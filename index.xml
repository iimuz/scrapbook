<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>content on しさく</title>
    <link>http://iimuz.github.io/scrapbook/</link>
    <description>Recent content in content on しさく</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    
	<atom:link href="http://iimuz.github.io/scrapbook/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>複数の git リポジトリの履歴を残して単一のリポジトリに統合する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/merge_git_repositories/</link>
      <pubDate>Mon, 23 Sep 2019 06:26:52 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/merge_git_repositories/</guid>
      <description>当初は複数のリポジトリに分割して作成していたが、 途中から単一のリポジトリでよくなる場合があります。 その場合に、複数のリポジトリの履歴を残して一つのリポジトリに統合する方法です。
変更前には、リポジトリ A, B, C がそれぞれ別にあるとします。
- repository A - repository B - repository C 最終的に、統合用に作ったリポジトリにリポジトリ A, B, C のフォルダと git の履歴を残すようにします。
- repository parent |- repository A |- repository B |- repository C 下記のコマンドを順に実行することで実現できます。
# 親リポジトリのクローン $ git clone https://example.com/username/repository_parent.git # 子リポジトリの取り込み(リポジトリ A の場合を記載するが、 B, C についても同じように行う) $ git remote add repo_a https://example.com/username/repository_a.git $ git fetch repo_a $ git read-tree --prefix=repo_a/ repo_a/master $ git checkout -- . $ git add .</description>
    </item>
    
    <item>
      <title>Benchmarking Model-Based Reinforcement Learning</title>
      <link>http://iimuz.github.io/scrapbook/machinelearning/benchmarking-model-based-reinforcement-learning/</link>
      <pubDate>Tue, 13 Aug 2019 23:34:25 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/machinelearning/benchmarking-model-based-reinforcement-learning/</guid>
      <description>論文情報  title: Benchmarking Model-Based Reinforcement Learning author: Tingwu Wang, Xuchan Bao, Ignasi Clavera, Jerrick Hoang, Yeming Wen, Eric Langlois, Shunshi Zhang, Guodong Zhang, Pieter Abbeel, Jimmy Ba year: 2019/7/3 arxiv issue vanity Google Translate: vanity 比較データなど  どんなものか 強化学習の 14 手法に関して、同一のデータセットを利用して性能を比較した。
   Figure 3: The relative performance with different planning horizon.         先行研究と比べてどこがすごいのか 従来は、各手法で優位性を述べており、同一のデータセットで比較し、 相対的な性能の優位性を適切に述べているものがなかった。
技術や手法のキモどこか OpenAI Gym という強化学習用のデータセットを利用して、 15 の環境で評価している。 また、ノイズを加えた状態も評価している。</description>
    </item>
    
    <item>
      <title>スクラム開発用ツール</title>
      <link>http://iimuz.github.io/scrapbook/softwaredev/scrum_tools/</link>
      <pubDate>Thu, 08 Aug 2019 12:28:15 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaredev/scrum_tools/</guid>
      <description> スクラム開発におけるプロジェクト管理ツール比較  優良なら Jira 無料なら OpenProject  Redmine の Scrum プラグイン KPT には mindmap を使う事例もある  </description>
    </item>
    
    <item>
      <title>VSCode の Remote development で locale 警告が発生したときの対処</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/vscode/vscode-locale-error/</link>
      <pubDate>Sun, 28 Jul 2019 08:00:10 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/vscode/vscode-locale-error/</guid>
      <description>vscode の remote development 機能で git fetch origin を実行したときに以下の警告が発生した。
perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LANG = &amp;#34;en_US.UTF-8&amp;#34; are supported and installed on your system. perl: warning: Falling back to the standard locale (&amp;#34;C&amp;#34;) docker の環境で locale がうまく設定できていないようで、下記のようにすることで警告は発生しなくなった。
sudo apt install -y --no-install-recommends locales locales-all  Can&amp;rsquo;t configure locale in Docker image  失敗方法 最初は、 locale-gen などで必要なもののみ追加しようとしたが、うまくいかなかった。 下記の方法では失敗しました。</description>
    </item>
    
    <item>
      <title>RaspberryPi で cv2.imshow を利用したときに DBUS エラーが発生した場合の対処</title>
      <link>http://iimuz.github.io/scrapbook/hardware/raspberrypi/raspberrypy-cv2-dbuss-error/</link>
      <pubDate>Sun, 28 Jul 2019 07:52:15 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/hardware/raspberrypi/raspberrypy-cv2-dbuss-error/</guid>
      <description>RaspberryPi の環境で cv2 の imshow 関数を利用したところ、下記のエラーが発生した。
WARNING **: Error retrieving accessibility bus address: org.freedesktop.DBus.Error.ServiceUnknown: The name org.a11y.Bus was not provided by any .service files 対処法としては、下記のようにパッケージを追加すればよいようです。
sudo apt-get install at-spi2-core  [solved ]Warning **: Error retrieving accessibility bus address  </description>
    </item>
    
    <item>
      <title>RaspberryPiで静的IPを利用する</title>
      <link>http://iimuz.github.io/scrapbook/hardware/raspberrypi/raspberrypi_static_ip/</link>
      <pubDate>Sun, 09 Jun 2019 06:34:27 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/hardware/raspberrypi/raspberrypi_static_ip/</guid>
      <description> $ sudo vi /etc/dhcpcd.conf interface eth0 static ip_address=192.168.10.xxx/24 static domain_name_servers=8.8.8.8  デフォルトゲートウェイはroute -nで探す  参考資料  【Raspberry Pi 3B/3B+】スタティックなIPアドレス（固定IPアドレス）を設定する  </description>
    </item>
    
    <item>
      <title>Google Photoへの自動画像アップロード</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/gcp/google_photos_api/</link>
      <pubDate>Sun, 02 Jun 2019 13:51:11 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/gcp/google_photos_api/</guid>
      <description> メモ  Google APIを利用可能にする  Get Started with REST 方法は2つ紹介されているが、今回はプロジェクトの設定なども行うため後者(B)の手法を利用した。 おそらく、こっちの方法の方がめんどくさい。  Go to the Google API Console. From the menu bar, select a project or create a new project. To open the Google API Library, from the Navigation menu, select APIs &amp;amp; Services &amp;gt; Library. Search for &amp;ldquo;Google Photos Library API&amp;rdquo;. Select the correct result and click Enable.   OAuth2認証用のjsonを取得する  今回の場合は、認証用jsonを利用してブラウザ経由でアクセス権を付与する。 ここで、アクセス権の付与にはブラウザが必要だが、今回はコンソール上に認証用のURLを出力し、 URLへは別の環境でアクセスし、認証用のtokenだけをコンソールから入力するようにしている。 これは、Raspberry Piで利用することが前提のため、UI付きの環境ではない可能性があるため。 SSHなどで入っていても対応できるようにするためです。   参考資料  [追記あり] Google Photos APIsでアルバム作成と写真のアップロード Google Photos API を使用した画像の自動アップロード nasu-tomoyuki/mugencamera  </description>
    </item>
    
    <item>
      <title>Speaker Deck のスライド埋め込み (Embed) でサイズ指定</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/speaker_deck_slide_size/</link>
      <pubDate>Sun, 21 Apr 2019 11:06:02 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/speaker_deck_slide_size/</guid>
      <description>Speaker Deck の Embed リンクをそのまま利用すると、 横幅を全て使うようにスライドが埋め込まれます。 その結果、非常に巨大な資料が埋め込まれる場合があります。 資料のサイズは、親の要素に影響を受けているようですので、 下記のように div 要素でサイズを指定して囲むことでサイズ指定が可能となります。
&amp;lt;div style=&amp;#34;width: 50%&amp;#34;&amp;gt; &amp;lt;script async class=&amp;#34;speakerdeck-embed&amp;#34; data-id=&amp;#34;55cac880f4d34c31b145afeffba11a77&amp;#34; data-ratio=&amp;#34;1.33333333333333&amp;#34; src=&amp;#34;//speakerdeck.com/assets/embed.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div&amp;gt; 資料は、ちょうど読んでいたスライドを使わせていただいております。
サイズ指定しない場合の埋め込み &amp;lt;script async class=&amp;#34;speakerdeck-embed&amp;#34; data-id=&amp;#34;55cac880f4d34c31b145afeffba11a77&amp;#34; data-ratio=&amp;#34;1.33333333333333&amp;#34; src=&amp;#34;//speakerdeck.com/assets/embed.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  サイズ指定した場合の埋め込み &amp;lt;div style=&amp;#34;width: 50%&amp;#34;&amp;gt; &amp;lt;script async class=&amp;#34;speakerdeck-embed&amp;#34; data-id=&amp;#34;55cac880f4d34c31b145afeffba11a77&amp;#34; data-ratio=&amp;#34;1.33333333333333&amp;#34; src=&amp;#34;//speakerdeck.com/assets/embed.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div&amp;gt;</description>
    </item>
    
    <item>
      <title>CUDA の atomic 関数</title>
      <link>http://iimuz.github.io/scrapbook/programming/cuda/cuda_atomic_function/</link>
      <pubDate>Mon, 08 Apr 2019 02:19:34 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/cuda/cuda_atomic_function/</guid>
      <description>CUDA の atomic 関数では、 CUDA Kernel 内において、 他のスレッドとは排他的に読み書き処理が可能となります。 atomicAdd や atomicSub などの基本的な関数は一通り用意されています。
ただし、 公式ドキュメント には、注意点として下記が書かれています。
 Atomic functions do not act as memory fences and do not imply synchronization or ordering constraints for memory operations
 Memory funces や同期、制御順に関する制約は行わないです。
 Atomic functions can only be used in device functions.
 atomic 関数は、デバイス関数の中でのみ有効となります。</description>
    </item>
    
    <item>
      <title>curl で Cloudn&#39;t resolve host エラーが出た時の対処法</title>
      <link>http://iimuz.github.io/scrapbook/programming/bash/curl_cloud_not_resolve_host/</link>
      <pubDate>Sat, 06 Apr 2019 14:30:50 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/bash/curl_cloud_not_resolve_host/</guid>
      <description>WSL 環境で突然に curl が通じなくなって、下記エラーが出ました。 直前まで使えていたので、理由が分からずだったので調べました。
curl: (6) Couldn&amp;#39;t resolve host &amp;#39;www.google.co.jp&amp;#39; 調べたところ、 /etc/resolv.conf の nameserver がおかしくなっていたようです。 下記の行を追加したところ、正常に curl が使えるようになりました。
nameserver 8.8.8.8 8.8.8.8 は Google Public DNS です。 上記以外でも有効な DNS を指定すれば動作します。
再起動の方法は、 sudo netplan apply でできます。
Ubuntu 18.04 Server の場合 Ubuntu 18.04 Server の場合は、 /etc/resolv.conf には記載しておらず、 /etc/system.d/resolved.conf に下記のように記載する必要があります。
[Resolve] DNS=8.8.8.8 そして再起動の方法は、 systemctl restart systemd-resolved になります。
/etc/resolv.conf を修正した場合 WSL のように /etc/resolv.conf を修正し、 sudo netplan apply を利用した場合は、 設定をしても自動で書き換えられるため、有効な設定になりませんでした。</description>
    </item>
    
    <item>
      <title>VS2010 のデバッグ時に例外発生時で中断する方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/visualstudio/debugexception/</link>
      <pubDate>Fri, 05 Apr 2019 08:38:16 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/visualstudio/debugexception/</guid>
      <description>Visual Studio 2010 でデバッグ実行時に例外が発生したときに、 発生した時点で中断する設定です。 例外は発生したところがわからないとデバッグしにくく調べました。
&amp;ldquo;デバッグ&amp;rdquo; -&amp;gt; &amp;ldquo;例外&amp;rdquo; をクリックし、 出てきたウィンドウでチェックを ON にすれば例外発生時に中断できます。
   例外設定画面         </description>
    </item>
    
    <item>
      <title>Windows に SPICE のクライアントをインストールする</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/install-spice-win/</link>
      <pubDate>Wed, 06 Feb 2019 21:40:13 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/install-spice-win/</guid>
      <description>kvm で構築し GPU Passthrough した windows 環境で、 OpenGL を利用したソフトウェアを動かしました。 そのとき、 Spice というリモート接続するソフトウェアを利用したのですが、 windows 版のインストーラのダウンロード方法が分かりにくかったので、メモしておきます。
windows の SPICE クライアントインストールは、なぜか virt viewer のインストールで行います。 (わかる人には分かるのでしょうが、インストールも SPICE Client とかの名称なら直感的に分かったのですが。) virt viewer というソフトウェアがそのまま spice のクライアントになります。 そのため、インストールには下記の手順でたどった先のファイルをダウンロードする必要があります。
 SPICE へ行く &amp;ldquo;Download&amp;rdquo; を開く 下記画像中(SPICE ダウンロードページ)の &amp;ldquo;virt-manager download page&amp;rdquo; を開く 下記画像中(Virt Manager ダウンロードページ)の &amp;ldquo;Win64 MSI&amp;rdquo; をクリックしてダウンロード     SPICE ダウンロードページ Virt Manager ダウンロードページ          </description>
    </item>
    
    <item>
      <title>Qt におけるリモートデバッグ</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/qt/qt-remote-debug/</link>
      <pubDate>Wed, 06 Feb 2019 21:38:27 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/qt/qt-remote-debug/</guid>
      <description>Qt Creator を利用した場合にリモートデバッグを行うこと自体は公式に方法がああります。
Launching the Debugger
サンプルの OpenGL を利用していると思われるプロジェクトでリモートデバッグできることを確認しました。 下記のような用語を用いるとします。
 ホスト PC: 開発した exe を実行する PC  exe の実行に必要なバイナリやインストールのみを実行  サーバ PC: 開発用環境を構築した PC  ビルドするために QtCreator や Visual Studio をインストール   事前条件として下記の作業を行っています。
 ホスト PC  Visual Studio Professional 2013 Update5 のインストール QtCreator 5.6.4 のインストール Windows SDK のインストール(他のチェックボックスはすべて外しています。)  サーバ PC  Windows SDK の Remote Debugger ツールをインストール(他のチェックボックスはすべて外しています。) サーバ PC の qtcreatorcdbext.dll (32bit or 64bit) を任意のディレクトリ (qtlib) へコピー   その上で下記のような手順でデバッガを起動します。</description>
    </item>
    
    <item>
      <title>Colabratory に Cabocha をインストールする</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/install-cabocha-in-colaboratory/</link>
      <pubDate>Sun, 03 Feb 2019 21:58:03 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/install-cabocha-in-colaboratory/</guid>
      <description>概要 現在、 自然言語処理 100 本ノック に取り組んでいます。その中で、構文解析に CaboCha を使う必要がありました。実行環境には Google Colaboratory を使っています。 Ubuntu 環境へのインストール方法などは、見つかったのですが Colaboratory 用のインストール方法が見つかりませんでした。もしかしたら、どこかに記載があるのかもしれませんが、今回は覚書のためにも残しておきます。 Ubuntu などへのインストールでは、ソースコードの修正が必要と書かれていましたが、私が試したバージョンと環境では不要でした。手順としては、下記のようになります。
 MeCab のインストール CRF++ のインストール Cabocha のインストール  MeCab をインストールする 最初に MeCab をインストールします。ここまでは、色々な所にインストール方法が記載されていました。ただ、後半で swig が必要となるため、ここでインストールしてしまっています。
!apt install -y \ curl \ file \ git \ libmecab-dev \ make \ mecab \ mecab-ipadic-utf8 \ swig \ xz-utils !pip install mecab-python3 CRF++ をインストールする 次に、 Cabocha の依存パッケージである CRF++ をインストールします。最新版の CRF++ はダウンロードページ(Google Drive)から取得できます。
import os filename_crfpp = &amp;#39;crfpp.</description>
    </item>
    
    <item>
      <title>Git for Windows で proxy を設定する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/proxy-using-git-for-windows/</link>
      <pubDate>Sat, 02 Feb 2019 22:09:59 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/proxy-using-git-for-windows/</guid>
      <description>WSL がインストールできない環境で、 git for windows をインストールしたところ、 nc コマンドが使えず git の proxy 指定ができなかったので調べました。 nc コマンドの代わりに connect.exe が利用できるようです。
ProxyCommand connect.exe -H hoge.proxy.jp:8080 %h %p 22番ポートが使えなくても、SSHでGitしたい！</description>
    </item>
    
    <item>
      <title>CDB の使い方を調べた時のメモ</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/qt/cdb-debug/</link>
      <pubDate>Sat, 02 Feb 2019 21:45:10 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/qt/cdb-debug/</guid>
      <description>Qt で開発されているソフトウェアのデバッグ作業で調べたので、メモしておきます。 単にデバッグ実行するだけであれば、 Qt の開発環境をデバッグ実行するだけなので、意識する事はないと思います。 今回は開発環境が入っている PC では実行できなかったため、 リモート PC で実行して開発環境からチェックするということを行いました。 Visual Studio だと、開発環境からリモートの操作ができるのですが、 Qt 開発環境の場合は、リモート PC のコマンドラインからステップ実行などをする必要がありました。 ブレークポイントの設定などは Qt 環境からできますが、 なぜか、一回止めると、再度進めるためにはコマンドラインの入力待ちになってしまいました。 変数のチェックとかは、 Qt 開発環境からできます。
cdb/Windbgの使い方のメモ にまとめられていました。
コマンド一覧の取得は単純に ? でできます。
0:000&amp;gt; ?  実行関連
順にgdbにおけるcontinue、nexti（関数の中に入らない）、stepi（関数の中に入る）、finish（リターンするまで進める）に対応する。
 0:000&amp;gt; g 0:000&amp;gt; p 0:000&amp;gt; t 0:000&amp;gt; gu</description>
    </item>
    
    <item>
      <title>powershell でファイルをダウンロードする</title>
      <link>http://iimuz.github.io/scrapbook/programming/powershell/download-using-powershell/</link>
      <pubDate>Wed, 30 Jan 2019 22:28:29 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/powershell/download-using-powershell/</guid>
      <description>いろいろな方法を試しましたが、結局上記スクリプトでないとダウンロードできませんでした。
Power Shell でファイルをダウンロードする で基本のダウンロードスクリプトが見つかったのですが、 https からのダウンロードのせいか SSL/TLS のチャネル生成失敗エラーが発生していました。
&amp;#34;2&amp;#34; 個の引数を指定して &amp;#34;DownloadFile&amp;#34; を呼び出し中に例外が発生しました: &amp;#34;要求は中止されました: SSL/TLS のセキュリティで保護されているチャネルを作成できませんでした&amp;#34; SSL/TLS のセキュリティ用に Invoke-RestMethod、Invoke-WebRequestが失敗する の方法で SecurityProtocol の 2 行を追加する必要がありました。 SSL/TLS 関連では、 PowershellのInvoke-RestMethodをhttpsに実施すると失敗する の方法では失敗してしまいました。 よくわかっていないので求めていることが違ったのかもしれません。</description>
    </item>
    
    <item>
      <title>svn のリポジトリ構成がデフォルトではない場合における git svn コマンド</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/git-svn-for-strange-folder/</link>
      <pubDate>Wed, 30 Jan 2019 22:21:53 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/git-svn-for-strange-folder/</guid>
      <description>svn の中が歴史的経緯により複雑な環境となっている場合があります。 例えば、下記のような構成です。
root |- trunk | |- project_a | |- project_b |- branches | |- project_a | |- project_b |- tags |- project_a_v1.0.0 |- project_b_v1.0.1 root の下にプロジェクトごとの trunk などがあるわけではなく、各プロジェクトの turnk が trunk ディレクトリの下に配置されています。
この場合は、下記のようなコマンド群を使っていく必要があります。
git svn clone -T project_a svn://hoge/trunk/ trunk の直前までの URL を書き、最後の trunk フォルダ名を -T オプションにつなげます。 branches とかの取得方法もあるのかもしれませんが、あきらめました。
上記方法論だと、 branch は取り込め無いのが問題ですが、とりあえず trunk だけは移行できます。</description>
    </item>
    
    <item>
      <title>Go 言語でテストカバレッジを可視化する</title>
      <link>http://iimuz.github.io/scrapbook/programming/go/go-coverage/</link>
      <pubDate>Sat, 22 Dec 2018 12:58:56 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/go/go-coverage/</guid>
      <description>Go 言語を使っていて、テストカバレッジが簡単に 100% にならなかったので、 どこが通過させられていないのか調べるのに使いました。
下記のコマンドでテスト実行時に、プロファイルを出力し、 html に変換できました。
$ go test --cover ./... -coverprofile=./bin/cover.out $ go tool cover -html=./bin/cover.html 上記で出力先として、 bin フォルダを指定しているのは、 出力結果をトップディレクトリに作成したくなかったからです。 (git で変更履歴として検出されてしまうので) 別に出力先はどこでもよいと思います。
 Goのテスト作成とカバレッジ率＆カバレッジ行表示をしてみる  </description>
    </item>
    
    <item>
      <title>Windows で OpenSSH をドメイン環境下でインストール</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/install-windows-openssh-under-domain/</link>
      <pubDate>Sat, 22 Dec 2018 12:06:17 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/install-windows-openssh-under-domain/</guid>
      <description>Windows10 において、 &amp;ldquo;オプション機能の追加&amp;rdquo;から OpenSSH Server をインストールしたら失敗したので、 対処したときのメモです。
結論としては、 WSUS (Windows Server Update System) が有効になっていて、 インストールできない場合があるようなので、 一時的に WSUS を無効にしてあげることで対応できるようです。
OpenSSH Server のインストール手順 下記に手順を示します。
 Win + R を押して、 regedit で OK を押す。 管理者権限に昇格してレジストリエディタを開く。 HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU に移動する。 UseWUServer の値を 0 とする。 WSUS を再起動する。
$ net stop wuauserv &amp;amp;&amp;amp; net start wuauserv OpenSSH Server をインストールする。
$ Get-WindowsCapability -Online | ? { $_.Name -like &amp;#39;OpenSSH*&amp;#39; } $ Add-WindowsCapability -Online -Name &amp;#39;OpenSSH.Server~~~~0.0.1.0&amp;#39; Firewall から 22 番ポートを開放する</description>
    </item>
    
    <item>
      <title>Hugo で baseurl を有効にする</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/hugo-baseurl/</link>
      <pubDate>Mon, 19 Nov 2018 06:51:02 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/hugo-baseurl/</guid>
      <description>Hugo で baseurl を有効にする場合の設定です。 root のみで運用する場合は、 baseURL を設定するだけでよいそうですが、 baseurl にサブディレクトリを指定する場合は、追加の設定が必要になります。
Issue when baseurl have subdirectory によると、 config.toml において、 baseURL の指定に加えて、 RelativeURLs と CanonifyURLs を有効にする必要があります。
baseURL = https://example.com/ RelativeURLs = true CanonifyURLs = true Using Hugo によると、 server モードの起動時に設定する場合は下記のようなコマンドになります。
$ hugo server --baseURL=http://yoursite.org/ \  --port=80 \  --appendPort=false \  --bind=xxx.xxx.xxx.xxx 注意点として、 1024 番以下のポートを利用する場合は、 sudo でないと権限がなく失敗するようです。</description>
    </item>
    
    <item>
      <title>GCP のインスタンス起動でエラーが発生する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/gcp/gcp-resource-error/</link>
      <pubDate>Mon, 19 Nov 2018 06:41:46 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/gcp/gcp-resource-error/</guid>
      <description>GCP で作成したインスタンスを起動する場合に、 下記のようなエラーが発生する場合があります。
Starting instance(s) ubuntu-dev...failed. ERROR: (gcloud.compute.instances.start) The zone &amp;#39;projects/hoge/zones/asia-northeast1-b&amp;#39; does not have enough resources available to fulfill the request. Try a different zone, or try again later. プリエンプティブインスタンスである場合に、 GCP 側で起動できないようにすることがあるようです。
GCP(GCE)でプリエンプティブインスタンスが起動しない場合の対処法
上記情報によれば復活するまでに 2 日とかかかる場合もあるようです。</description>
    </item>
    
    <item>
      <title>Qiita API を利用して記事を投稿する</title>
      <link>http://iimuz.github.io/scrapbook/programming/python/post-from-qiita-api/</link>
      <pubDate>Sun, 18 Nov 2018 15:33:13 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/python/post-from-qiita-api/</guid>
      <description>はじめに Qiita API を利用してローカルの markdown ファイルを記事としてアップロードする python スクリプトを作成しました。作成したスクリプトのテストも兼ねて、作業内容をまとめてみます。
 投稿内容の作成 投稿用のヘッダ情報の作成 投稿処理 投稿後のレスポンス情報から ID 情報を取得 投稿内容が書かれたファイルのヘッダ部分に ID を追加  背景 以前から自分で書いたメモなどの単純なドキュメントファイルに関しては、一括して GitLab.com のプライベートリポジトリで管理していました。今回、 Qiita に投稿してみようと思ったのですが、 Qiita に投稿する内容は、都度書いて Qiita で管理するということも考えました。が、やはりローカル環境でテキストを書きたいということもあり、 Qiita API を活用して、ローカル環境から投稿するようにしました。まだまだ粗削りですが、とりあえず投稿して、記事を修正した場合は、修正版をコミットすることまではできました。
$ python3 --version Python 3.6.6 投稿内容の作成 ローカルのファイル群は Hugo を活用しています。そのため、投稿する内容以外にヘッダ情報が付与されています。ここを活用して、 Qiita に投稿するヘッダ情報も管理するようにします。 今回は、下記のようなヘッダ情報と投稿内容を作成していると仮定します。
(hoge.md)
+++ title = &amp;#34;テスト投稿&amp;#34; draft = true tags = [&amp;#34;test&amp;#34;] [qiita] coediting = false gist = false tweet = false id = &amp;#34;&amp;#34; +++ hogehoge 投稿用のヘッダ情報の作成 上記で作成した hoge.</description>
    </item>
    
    <item>
      <title>Golang でクロスビルドする Makefile の設定</title>
      <link>http://iimuz.github.io/scrapbook/programming/go/golang-cross-build/</link>
      <pubDate>Mon, 22 Oct 2018 18:44:17 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/go/golang-cross-build/</guid>
      <description>Golang で一括で各プラットフォー用のバイナリを生成するコマンドの書き方を調べた時のメモです。 結論としては、下記のコードで一括でバイナリを生成できます。 対象のプラットフォームを増やす場合は、 for 文の要素を増やせばできます。
 一点だけ問題があり、 windows のみ実行ファイルの拡張子として .exe を付ける必要があります。 そのため、上記のままでは windows 側で実行ファイルとして認識してくれません。 リネームすればよいのですが、 簡単な if 文程度で分岐できないでしょうか。</description>
    </item>
    
    <item>
      <title>Hyper で最終行付近が見切れる場合の対処法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/hyper/hyper-sytle-reflesh/</link>
      <pubDate>Mon, 22 Oct 2018 18:38:11 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/hyper/hyper-sytle-reflesh/</guid>
      <description>Hyper を利用している場合に、たまに最終行付近が見切れることがあります。 どうも、タブを追加したときに一段下がる動作をするのですが、 この時に描画範囲がうまくリセットされないために起こっているようです。 Ctrl + L とかで再描画してもダメな場合が多かったですが、 単に Window サイズを変更してあげると、描画サイズのリセットがかかるようです。
Windows とかの場合は、 Win + ↓ とかを押して、 いったん画面サイズを小さくしてから Win + ↑ とかで最大化すると正常に描画されます。</description>
    </item>
    
    <item>
      <title>プロジェクト単位で git config の設定を変更する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/git-config-include-if/</link>
      <pubDate>Wed, 17 Oct 2018 19:13:04 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/git-config-include-if/</guid>
      <description>GitHub と GitLab に加えて、社内リポジトリで git の履歴にのこるユーザ名やメールを変更したい場合があります。 今までは、 git clone してから git config --local で設定をリポジトリ単位でしていました。 しかしながら、 Go 言語のディレクトリ構成をとっているため、 あるフォルダしたからは全て一定になります。 また、数が増えてくると設定し忘れることが良くあります。 どうしたら管理が楽になるか調べていたところ、 include に条件設定できることが分かりました。 これを用いれば解くてフォルダ下は全て任意の設定にできます。
git 2.13.0 から git config の include で if が利用できます。 書き方は下記のようになります。
[includeIf &amp;#34;&amp;lt;条件&amp;gt;&amp;#34;] path = &amp;lt;設定ファイル&amp;gt; GitHub と GitLab でユーザ名やメールアドレスが異なる場合は、下記のように設定します。 ghq を利用してディレクトリを管理していると想定します。
[includeIf &amp;#34;gitdir:~/src/github.com/&amp;#34;] path = ~/.gitconfig.github [includeIf &amp;#34;gitdir:~/src/gitlab.com/&amp;#34;] path = ~/.gitconfig.gitlab ~/.gitconfig.github
[user] name = hoge.github email = hoge.github@example.com ~/.gitconfig.gitlab
[user] name = hoge.gitlab email = hoge.</description>
    </item>
    
    <item>
      <title>Hyper のシェルとして git for windows を利用した場合の画面リフレッシュ方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/hyper/reflesh-git-for-windows-on-hyper/</link>
      <pubDate>Wed, 17 Oct 2018 19:09:33 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/hyper/reflesh-git-for-windows-on-hyper/</guid>
      <description>hyper.js に下記のようにターミナルの設定を入れるといいようです。
env: { TERM: &amp;#39;msys&amp;#39;, },  Hyper の起動時に cmd と powershell なども選択して起動できるようにしているため、 起動するシェルによって TERM の設定を変えなければいけないような気がします。 powershell と cmd の範囲では、 TERM に msys を設定したままでも、普通に動いているように見えます。 WSL と Git for Windows の両方を選択する状況は発生していないため、 これは設定しっぱなしでもよいのかもしれません。
参考情報: &amp;ldquo;clear&amp;rdquo; broken on Windows when using with Git BASH</description>
    </item>
    
    <item>
      <title>git for windows の ターミナル出力で文字化けする場合の対処法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/encoding-git-for-windows/</link>
      <pubDate>Wed, 17 Oct 2018 19:06:43 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/encoding-git-for-windows/</guid>
      <description>git for windows の bash を利用していて日本語文字列が文字化けする場合は、 エンコーディングを UTF-8 に変更すればよいそうです。 コマンドラインから利用する場合などでも同様に修正できるようです。
変更方法は、下記のようになります。
$ export LANG=ja_JP.UTF-8 恒常的に適用する場合は、 git for windows の場合の .bashrc は C:\Program Files\Git\etc\bash.bashrc になるので、 これに書いておけばよさそうです。
参考文献
 Git for Windows で漢字等非ASCII文字が文字化けする場合 Windows Git 2.6.1で~/.bashrcがGit Bashから読み込まれるようにする  </description>
    </item>
    
    <item>
      <title>gcc でライブラリを静的リンクする方法</title>
      <link>http://iimuz.github.io/scrapbook/programming/cpp/gcc-static-link/</link>
      <pubDate>Tue, 16 Oct 2018 21:30:34 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/cpp/gcc-static-link/</guid>
      <description>ライブラリを動的リンクではなく、強制的に静的リンクをしてしまいたい場合があります。 そういう時は、 gcc のオプションで &amp;ndash;static を利用します。 pkg-config を利用している場合は、 pkg-config が対応していれば、 下記のように記載することで適切に処理してくれます。
`pkg-config --static hoge` ただ、 pkg-config が対応してない場合もあるため、 対応していない場合は、下記のように直前に &amp;ndash;static を記載しても静的リンクできるようです。
--static `pkg-config hoge` 参考文献: How to use pkg-config to link a library statically</description>
    </item>
    
    <item>
      <title>linux 環境の場合は、共有ライブラリの依存関係は ldd コマンドで調べられる</title>
      <link>http://iimuz.github.io/scrapbook/programming/bash/ldd-shared-library/</link>
      <pubDate>Tue, 16 Oct 2018 21:14:16 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/bash/ldd-shared-library/</guid>
      <description>docker で必要なバイナリのみを移動するときに、 依存するライブラリを調べるために利用しました。 linux では、 ldd コマンドが使えます。 ldd コマンドは、下記のようにして利用します。
$ ldd hoge.so 例えば、適当に共有ライブラリのファイルを調べると下記のような結果になります。
$ ldd libhandle.so.1.0.3 linux-vdso.so.1 (0x00007fffef3c2000) libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffc79340000) /lib64/ld-linux-x86-64.so.2 (0x00007ffc79a00000)</description>
    </item>
    
    <item>
      <title>windows10 環境で cuda &#43; visual studio integration のインストールが失敗する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/cuda-vs-integration/</link>
      <pubDate>Mon, 17 Sep 2018 15:33:53 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/cuda-vs-integration/</guid>
      <description>いったんは、下記の手順で CUDA をインストールできることを確認しました。 ただ、その後、バージョンアップなどでもインストールに失敗したので、 OS のクリーンインストールを行い、 windows ドライバのアップデートを初期に切ってから行うと、 アップデートなども正常にできるようになりました。 たぶん、他にも影響がある項目があるのだと思いますが、 詳細は分かっていないです。 できれば最初に windows のデバイスドライバの自動アップデートを 切ってしまったほうが楽だと思います。
解決策としては、下記に記載の方法をとりました。
 CUDA 9.1 cannot install due to failed Visual Studio Integration  上記のうち実行したのは下記のような手順です。
 NVIDIA ドライバで動いているディスプレイをデバイスマネージャからドライバの更新で別のドライバに設定する NVIDIA と名前の付くアプリをすべてアンインストール NVIDIA 関連のディレクトリを Program Files, Program Files (x86), ProgramData から削除 再起動 ここで、ディスプレイに NVidia のドライバが当たっていないことを確認 CUDA をインストール  </description>
    </item>
    
    <item>
      <title>docker 環境で KVM を利用する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/docker/docker-kvm-privileged/</link>
      <pubDate>Mon, 17 Sep 2018 15:24:58 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/docker/docker-kvm-privileged/</guid>
      <description>KVM + GPU Passthrough ができることまでは確認しました。 これに加えて、 docker を利用することで、 GPU の passthrough 設定のみしておけば、 package 類はインストールしなくても利用できました。
docker image を生成する Dockerfile と、 docker-compose.yml のサンプルを下に置いておきました。
GitHub: iimuz/docker-kvm</description>
    </item>
    
    <item>
      <title>KVM &#43; GPU Passthrough &#43; windows で仮想環境を構築</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/docker/docker-kvm-windows/</link>
      <pubDate>Mon, 17 Sep 2018 14:16:22 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/docker/docker-kvm-windows/</guid>
      <description>windows 環境を仮想化し、 GPU を利用可能な環境を作成する方法です。 windows10 を利用した場合は、 GPU Passthrough が正常に動作することを確認しました。 一方で、 windows7 では GPU Passthrough が正常に動いていないです。
あと、今回の試し範囲では GPU Passthgough した後に、 再起動なしで GPU をホスト PC で利用する方法が分かっていません。 そのため、 NVIDIA Docker などと使い分けができていないです。 多分、普通に使うなら GCP とかで GPU インスタンスを利用したほうが簡単です。
環境構築手順 ハードウェア要件 GPU Passthrough するにあたり、ホスト PC には2つ以上の GPU が必要となります。 ひとつは、ホスト PC の UI を出力するためのグラフィックボードであり、 もうひとつはゲスト PC に Passthrough するグラフィックボードになります。 ホスト PC のグラフィックボードは、 CPU などに内蔵されているオンボード GPU でも可能です。
その他に、 Intel VT や AMD-V などの仮想化に対応している CPU か マザーボードである必要があります。 また、 UEFI ブートに対応している必要もあります。 これらは BIOS の設定画面から有効化することができますが、 有効化できない場合は、そのホスト PC では GPU Passthrough した仮想環境を用意することができないことになります。</description>
    </item>
    
    <item>
      <title>windows で c&#43;&#43; を用いてメモリ使用量を取得する</title>
      <link>http://iimuz.github.io/scrapbook/programming/cpp/cpp-windows-memory-usage/</link>
      <pubDate>Sat, 08 Sep 2018 14:25:09 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/cpp/cpp-windows-memory-usage/</guid>
      <description> windows 環境において、 コード中の特定位置で現在のプロセスが利用しているメモリ使用量を取得したかったので、 調べた時のメモです。
結論 windows.h と psapi.h を利用して、 PROCESS_MEMORY_COUNTERS_EX という構造体にメモリ使用量が取得できます。 psapi.h は psapi.lib をリンクする必要がありましたが、 下記のようなコードで構造体中にメモリ使用量を取得できます。
 GetProcessMemoryInfo メモリを取得する際には、 GetProcessMemoryInfo という関数を利用します。 GetProcessMemoryInfo は、プロセスのハンドルを渡す必要があります。 実際に作った exe を動かし、その時のメモリ情報を必要とする場合は、 GetCurrentProcess で取得できます。
一方で、他のプロセスのハンドルを取得すれば、そのプロセスのメモリを取得することも可能です。 ただ、多くの場合はリソースモニタとかで取得したり記録しておけば十分な気もします。
PROCESS_MEMORY_COUNTERS_EX メモリ情報は PROCESS_MEMORY_COUNTERS_EX という構造体に取得できます。 結構色々取得できるのですが、 private usage を取得しておけば、 とりあえずのメモリ量監視としては十分な気がします。
各種用語の開設に関しては、下記が非常に参考になりました。
Windows の使われてるメモリの量
visual studio でのお試しプロジェクト 動作テストのために、 Visual Studio 2010 と古いですが、プロジェクトを作成したサンプルを置いておきます。
 iimuz/visualstudio-private-bytes-sample  </description>
    </item>
    
    <item>
      <title>VS Code 上で vim キーバインドの実現</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/vscode-vim/</link>
      <pubDate>Sun, 02 Sep 2018 16:38:04 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/vscode-vim/</guid>
      <description>VS Code 上で vim キーバインドが使えないか調べたら、 GitHub: VSCodeVim/Vim というのがありました。 ほかのキーバインドとかぶったり、いくつか挙動が怪しかったりしますが、 モードの切り替えができるようになったので楽になりました。 本格的な作業自体は、 vim を使うのでちょっとした編集とかができれば十分なので、 これで問題ないような気がします。
一点だけちょっと使いにくかったのが、 w での単語移動が日本語が続いていると次の行まで行ってしまいます。 多分半角スペースとか改行で判定されています。 せめて、ひらがなとかカタカナ、漢字の変わり目で止まってくれると嬉しいのですが。</description>
    </item>
    
    <item>
      <title>windows のプロダクトキーを変更する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/change_windows_product_key/</link>
      <pubDate>Sun, 02 Sep 2018 12:50:12 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/change_windows_product_key/</guid>
      <description>MSDN のサブスクリプションとかに登録していると windows キーが複数手に入るのですが、 どの環境にどのキーを入れているかわからなくなって、 位置から対応させたくなったので、 windows のプロダクトキーを修正する方法です。 基本的には、下記のコマンドで登録・削除などができるようです。
 参考情報
 （違法じゃなく）無理やりプロダクトキーを変更する方法  </description>
    </item>
    
    <item>
      <title>chrome のテキスト入力をローカルのエディタで行う</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/ghosttext/</link>
      <pubDate>Sun, 02 Sep 2018 12:19:27 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/ghosttext/</guid>
      <description>chrome でテキスト入力が多くなってくると、ローカルのエディタで編集したくなってきたので、 Chrome拡張のGhostText導入手順(Visual Studio Code編) に書いてあった GhostText と VSCode で実現できることを確認しました。 Chrome と VSCode のそれぞれにプラグインを導入すると chrome 側でテキスト入力したいときに、 Ctrl + K + L を押すと下記のような青枠がついた状態となって、 VSCode にテキストが同期されます。 すでに入力済みのテキストがあっても動作するので楽です。</description>
    </item>
    
    <item>
      <title>c&#43;&#43; の std::unique_ptr におけるデリータ指定</title>
      <link>http://iimuz.github.io/scrapbook/programming/cpp/cpp-unique-ptr-deleter/</link>
      <pubDate>Sun, 02 Sep 2018 11:38:40 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/cpp/cpp-unique-ptr-deleter/</guid>
      <description>win32api を利用するときに CreateHandle は CloseHandle を呼部必要のある Handle を返すのですが、 Handle 型で返すために単純に std::unique_ptr でいつも通りのデリータを指定することができませんでした。
std::unique_ptr, deleters and the Win32 API によると、 CreateHandle のようにポインタ以外が帰ってきてしまう場合に std::unique_ptr を利用したい場合は、 下記のように関数オブジェクトを定義してデリータに指定すると利用できることが分かりました。
 普通にポインタを返してくれるタイプであれば、 デリータ指定自体は、一般的には下記の方法が利用できるはずです。
関数オブジェクト
 default_delete の特殊化
 関数
 状況により使い分けは必要ですが、関数版が一番記述量が少なくて好きです。 default_delete の特殊化は、どこに書くべきなのかがよくわからなくて、使ったことがないです。 cpp ファイルの方に書くと、必要なところで毎回記述が必要になります。 自作クラスならヘッダファイルに宣言して、 cpp に実体を記述することもできますが、 自作クラスを std::unique_ptr で利用する前提で書くのも何かなと思ったりします。</description>
    </item>
    
    <item>
      <title>Unsupervised Anomaly Detection with Generative Adversarial Networks to Guide Marker Discovery を読んで</title>
      <link>http://iimuz.github.io/scrapbook/machinelearning/unsupervisedanomalydetectionwithgenerativeadversarialnetworkstoguidemarkerdiscovery/</link>
      <pubDate>Sun, 02 Sep 2018 11:27:34 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/machinelearning/unsupervisedanomalydetectionwithgenerativeadversarialnetworkstoguidemarkerdiscovery/</guid>
      <description>arXivTimes で見つけた論文です。 GAN を利用した異常検知技術を調べていた時に見つけました。
AnoGAN というネットワークを提案しています。 医療用画像を対象に、正常画像のみから、 GAN で学習していくようです。 このとき、 Generator は潜在空間から画像生成されると仮定します。 面白いのは、 GAN だけで完結しており、 検査時の入力画像は Auto Encoder のように再構成せず、 Generator から近い画像を生成するようにしているようです。 GAN は、潜在空間から画像は生成できるが、画像から潜在空間は変換できないはずです。 そこで、潜在空間は連続的に変化することから最初はランダムランプリングで潜在空間から画像を生成し、 近い画像へ潜在空間上を移動させるという処理を行うようです。 そのため、検査時に時間がかかる可能性はあるように思います。 また、残差誤差だけでなく、 Descriminator 側の出力も考慮して異常スコアを算出しているようです。
 実装例: LeeDoYup/AnoGAN 日本語で解説してくれている記事です。  GANによる医療画像の異常検知 【論文読み】GANを利用した異常検知まとめ  その他に、論文を読んでいるときに調べながら見つけた論文  Unsupervised Adversarial Anomaly Detection using One-Class Support Vector Machines One-Class Adversarial Nets for Fraud Detection   </description>
    </item>
    
    <item>
      <title>httpsとSSLとTLSのメモ</title>
      <link>http://iimuz.github.io/scrapbook/programming/js/https-ssl-tls/</link>
      <pubDate>Sun, 26 Aug 2018 17:52:18 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/js/https-ssl-tls/</guid>
      <description>HTTPSとSSL、TLSで何が違うのかよくわかっていなかったので、簡単に調べた時のメモです。 結論としては、下記のような感じでしょうか。
 TLSは、暗号化などのセキュリティ機能を実現する方法の規約 TLSは、SSLのバージョンアップ版  SSL3.0は脆弱性が分かっているので、利用してはいけない wikipedia TLS#SSL3.0  HTTPS = HTTP + TLS  SSLとTLSはセキュア通信のための仕組みであり、SSLにはバージョンが1.0(非公開)、2.0、3.0とあった。 ただし、SSL3.0は脆弱性が見つかっているので利用してはいけないことになっている。 TLS1.0はSSLの進化系になる。 そのため、TLS1.0はSSL3.1と呼ばれることもあるとのことです。
TLSが提供する機能は主に下記のようになるそうです。
 通信相手の認証 通信内容の暗号化 改竄の検出  現在の最新バージョンはTLS1.3であり、ネゴシエーションに利用するバージョンはSSL3.4になるそうです。</description>
    </item>
    
    <item>
      <title>powershell でシンボリックリンクを生成する</title>
      <link>http://iimuz.github.io/scrapbook/programming/powershell/ps1-symboliclink/</link>
      <pubDate>Sun, 26 Aug 2018 17:46:01 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/powershell/ps1-symboliclink/</guid>
      <description>powershellにおいてシンボリックリンクをpowershellのコマンドで作ることができるようです。 従来はcmdの mklink を利用していた部分を new-item で置き換えることができます。
$ cmd /c mklink dst src # 従来のcmdによるコマンド $ New-Item -Type SymbolicLink -Path dst -Value src</description>
    </item>
    
    <item>
      <title>Enter-PSSession後のNew-PSDrive</title>
      <link>http://iimuz.github.io/scrapbook/programming/powershell/new-psdrive/</link>
      <pubDate>Sun, 26 Aug 2018 17:39:35 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/powershell/new-psdrive/</guid>
      <description>windows環境ではsshのようなことが Enter-PSSession コマンドにより可能になります。 (ただし、リソース制限などいくつかできないことがあります。) Enter-PSSession 後の操作において New-PSDrive というネットワークドライブのマウント作業において、 権限情報が不足し使用できなくなります。 そのため、 New-PSDrive を Enter-PSSession 後に利用する場合は -Credential オプションを付与する必要があるみたいです。
$ Enter-PSSession ip $ New-PSDrive DriveName -PSProvider FileSystem -Root \\remote-address -Credential domain@username 最後の -Credential オプションがないとマウントできなくなっています。</description>
    </item>
    
    <item>
      <title>git worktree を用いた別作業ディレクトリの用意</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/git-worktree/</link>
      <pubDate>Sun, 26 Aug 2018 15:30:22 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/git-worktree/</guid>
      <description>git で作業中に複数の作業を並行しなければならない場合があります。 例えば、バグを修正中に、別件の依頼を受けて別のバグ修正や動作確認をしなければならないような場合です。 そのような場合は、 git stash を利用していったん変更を保存して、必要な環境にcheckoutするという方法も可能です。 ただ、c++とかビルドする場合は、stashを利用してしまうと、ビルドの中間ファイルはコミット対象外なので、 戻ってきたときに一からビルドが必要になります。 一瞬でビルドが終わるようなプロジェクトならいいのですが、 一からビルドすると1時間以上かかるようなプロジェクトだとスイッチする気がうせてしまいます。 そのような場合に、 git worktree を利用することで、 もう一つ別のディレクトリを作成して作業ができるようになるので便利です。
コマンドとしては、下記のような構文になります。
$ git worktree add path/to/dir -b new/branch source/branch 上記のようにすると、 source/branch をもとにして new/branch を作成し、 path/to/dir に新規でファイルが作成されます。 作業ディレクトリが干渉しないため、非常に使いやすいです。
作業が終わったら作成したディレクトリは削除して、pruneすることでworktreeは削除できます。
$ rm -rf path/to/dir $ git worktree prune</description>
    </item>
    
    <item>
      <title>Qiita: ロシアの天才ハッカーによる【新人エンジニアサバイバルガイド】を読んで</title>
      <link>http://iimuz.github.io/scrapbook/softwaredev/russia-engineer-survival-guide/</link>
      <pubDate>Sun, 26 Aug 2018 15:21:16 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaredev/russia-engineer-survival-guide/</guid>
      <description>Qiita: ロシアの天才ハッカーによる【新人エンジニアサバイバルガイド】 が心にとどめておいたほうがよさそうな部分が結構あったので抜粋しておきます。
  コードのクオリティに腹をたてるな。同僚の2倍のスピードでリリースをするよう心がけろ。   この部分は痛いほどわかりますが、どうしてもできないときもあります。 でも今後なるべく気を付けようと思います。 (別プロジェクトに参加していきなりエラーのデバッグを割り当てられて、 コードを見た時によく思ってしまう。)
  Chef,Ansible,Puppetを学ぼう。運用エンジニアの時間を浪費するのはやめよう。   環境には寄ると思いますが、Dockerというのもありかな。
  常に４つの環境を用意しておこう。   開発環境で動いても、本番環境で想定通りに動くかは別問題だからテスト環境はよく準備するようにします。
  常にTLSを使おう。社内サービスであってもだ。   社内利用だとあまりTLSを気にしていませんでした。 どうしても甘くなってしまいます。</description>
    </item>
    
    <item>
      <title>C#でキャンセル処理を利用したタイムアウトの実現</title>
      <link>http://iimuz.github.io/scrapbook/programming/csharp/cs-cancellation-task/</link>
      <pubDate>Sun, 26 Aug 2018 12:31:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/csharp/cs-cancellation-task/</guid>
      <description>C#で一定時間内に処理が終わらなければ終了する中断する処理を書きたかったので、調べた時のメモです。 タスクを起動し、キャンセル処理を一定時間後に起動するようにします。 本来のタスクとキャンセル処理のいずれかが完了した時点で、処理を終了するようにすることで、 タイムアウト処理が実現できるようです。
 </description>
    </item>
    
    <item>
      <title>Qiita: [翻訳] 技術向上ガイド を読んで</title>
      <link>http://iimuz.github.io/scrapbook/softwaredev/google-technical-guide/</link>
      <pubDate>Fri, 24 Aug 2018 22:36:25 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaredev/google-technical-guide/</guid>
      <description>Qiita: [翻訳] 技術向上ガイドにGoogleのTechnical Development Guideの翻訳があったので読んだ感想です。 色々と書かれているのですが、英語文献が多いので読むのには時間がかかりそうです。 ただ、その中でも課題プロジェクトに取り組むという部分はとっかかりやすいように思いました。
 ウェブサイトを作成し維持する、自分自身のサーバーを構築する、またはロボットを構築する
&amp;hellip;
CodeJamやACMの国際大学対抗プログラミングコンテストのようなコーディング競技を通して自分のアルゴリズム知識を磨く
 例えば、プログラミングコンテストで日本語でやりやすそうなのはAtCoderやISUCONなどでしょうか。 この辺であれば、過去問なども記載されており取り組むのによいような気がします。
その他に系統は違いますが、Kaggleなどは機械学習の知識をつけるにはよさそうです。</description>
    </item>
    
    <item>
      <title>gitで一時的に変更の検出を止める</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/stop-git-temp-diff/</link>
      <pubDate>Fri, 03 Aug 2018 20:22:31 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/stop-git-temp-diff/</guid>
      <description> docker-composeを利用していたりすると環境変数ファイル(.env)とかに、 ローカル環境の変数をまとめていたりします。 その状態で、環境に合わせて環境変数ファイルを変更すると、 コミットしなくてよい変更が検出された状態になります。 add対象を慎重に選ぶという方法もあるのですが、 git statusとかで検出しないほうが楽なので、検出を停止する方法です。
$ git update-index --assume-unchanged {ファイル名} # 除外 $ git update-index --no-assume-unchanged {ファイル名} # 解除 $ git ls-files -v | grep ^h # 設定ファイルの確認 注意点として、対象ファイルを本当に変更したときにコミット対象から外れていることに気づけないので、 そこは若干問題です。
参考情報  A4 WORKS Official BLOG: Gitで一時的に”Changes not staged for commit”リストから外す  </description>
    </item>
    
    <item>
      <title>プログラマが知るべき97のこと</title>
      <link>http://iimuz.github.io/scrapbook/softwaredev/97-things-that-programmers-should-know/</link>
      <pubDate>Fri, 08 Jun 2018 18:45:05 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaredev/97-things-that-programmers-should-know/</guid>
      <description>プログラマが知るべき97のことという内容で著名な方々のコメント(?)がまとめられたページがありました。 &amp;ldquo;シンプルさは美に宿る&amp;rdquo;とか&amp;rdquo;リファクタリングの際に注意すべきこと&amp;rdquo;ととか、 結構ためになる内容なので一通り目を通すと面白いです。
 プログラマが知るべき97のこと  97のことと言いつつ、107個のっている理由は不明です。</description>
    </item>
    
    <item>
      <title>GitHub の Issue をコミットのマージ時に自動でクローズする</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/close-issues-when-merge/</link>
      <pubDate>Thu, 07 Jun 2018 09:41:36 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/close-issues-when-merge/</guid>
      <description>ブランチの最初で、下記のような空コミットを作成することで、 メインブランチへ取り込まれたときにクローズできます。
$ git commit --allow-empty -m &amp;#34;resolve #id&amp;#34; また、このクローズ動作はGitHubの設定画面で指定したメインブランチに対してマージされたときに発生するようです。 そのため、例えばmasterブランチはCIなどによって自動でコミットされる対象となっている場合は、 可能ならばメインの開発ブランチ(developとか?)をメインブランチに設定しておくと対象のブランチにマージされた段階で発生します。</description>
    </item>
    
    <item>
      <title>chrome のみで GCE にアクセスする環境構築した時のメモ</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/gcp/gce_ssh_using_chrome/</link>
      <pubDate>Wed, 06 Jun 2018 16:53:55 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/gcp/gce_ssh_using_chrome/</guid>
      <description>概要 アクセスするだけなら GCE は cloud console でできます。 ポートフォワードしたい場合は、 secure shell という chrome アプリを利用すればできます。
フロー  GCE の cloud console でアクセス用のキーを作成(ssh-keygen)し、メタデータとして登録  本当はよくないかもしれないが、とりあえず動かしたいだけなら gce 用のキーがすでにあるのでそれで対応する。  secure shell では public キーと pvivate キーの両方が必要となるため、両方ダウンロード ssh client として chrome app の secure shell を利用する。 設定画面では、 user name と ip (外部IP)、port を指定する ID(Identify?)のところに pub と private の両方のキーを import する SSH 引数に -L 8888:localhost:8888 gce 側で何かport 8888で待ち受けさせる(適当なweb serverを立てる) client pc 側でブラウザから localhost:8888 にアクセス  所感 手元の端末の環境(Linux, Windows, Mac)によらず動かせるようにしたかったので試してみました。 これで chromebook とかの安いPCに移行することができるかもしれません。 (chromebook の開発者モードを利用するとかいろいろありそうですが、 できれば通常モードの範囲でやりくりしたいのです。)</description>
    </item>
    
    <item>
      <title>Travis CIから更新する設定を行った時のメモ</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/travis-ci-blog/</link>
      <pubDate>Sat, 03 Mar 2018 12:56:02 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/travis-ci-blog/</guid>
      <description>このサイトを元記事をmarkdownで書いたらTravisCIでビルドするようにしたので、その際に行ったことのメモです。
概要  TravisCIの登録 TravisCIから自動ビルド対象のリポジトリを設定 Travis Clientをインストールしてsshキーの暗号化 .travis.ymlからビルド方法を設定  sshキーの暗号化 TravisCIからpushするためには、sshを用いる設定としました。 この時、対象とするリポジトリのみに公開鍵を設定し、最悪秘密鍵が漏洩しても他には影響がないようにします。 また、秘密鍵はリポジトリに含める必要があるので、TravisClientを用いて暗号化します。
暗号化するための環境 今回は、dockerを利用してtravis clientの環境を用意しました。 rubyが必要なので、ベースをrubyにして簡単に用意できます。
FROMruby:2.5.0-stretchRUN gem install travis -v 1.8.8 --no-rdoc --no-ri 上記で作成したイメージを利用して、下記のように起動すればtravisコマンドが利用できる環境が使えます。
$ docker run --rm -it -v $(pwd):/src:rw localhost:travis-client bash 暗号化方法 travisコマンドを利用して暗号化します。
$ travis login $ ssh-keygen -f travis_key $ travis encrypt-file travis_key 出来上がった.encファイルをコミットします。 また、作成時に openssl ... という行が出力されるのでコピーしておきます。 これは.travis.ymlに記載します。
travis_key.pubはgithubに登録したら消してしまっていいと思います。 また、travis_keyはコミットせずに消去します。
.travis.ymlの記述 ビルド方法はいろいろあると思います。 ビルドし終わった後のデータをpushする部分のみを下記に記載します。
after_success: - openssl # ここに先ほどコピーした内容を記述します。 - chmod 600 ~/.ssh/id_rsa # 権限を書き換えないと正しく動作しないです。 - echo -e &amp;#34;Host github.</description>
    </item>
    
    <item>
      <title>powershell で tcp のテスト用にサーバとクライアントを用意する方法のメモ</title>
      <link>http://iimuz.github.io/scrapbook/programming/powershell/powershell-tcp/</link>
      <pubDate>Fri, 02 Mar 2018 21:56:07 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/powershell/powershell-tcp/</guid>
      <description> powershellで、ncコマンドのようなことをするために調べたメモです。
成果物 下記のようなpowershellスクリプトを用意し、実行することでncコマンドのようなことが実現できました。
 参考資料  bashでtcpや利用して文字列を送信する方法 ncコマンドの使い方 windowsでtcpのポート確認方法 powershellでnetcatスクリプト powershellで繰り返しバッファ送信  </description>
    </item>
    
    <item>
      <title>C#におけるAysncとAwaitの動作に関して調べたときのメモ</title>
      <link>http://iimuz.github.io/scrapbook/programming/csharp/cs-async-await/</link>
      <pubDate>Fri, 02 Mar 2018 19:43:56 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/csharp/cs-async-await/</guid>
      <description>C#でasyncとawaitを利用して並列処理を行ったので、その時のメモです。 結構簡単に並列処理を記述できた感じがします。
最終的なコードの雛形 複数のタスクが完了した段階で次のタスクを起動する場合の書き方です。
public async Task methodAsync() { var task1 = Task.Run(() =&amp;gt; { // 何か処理1  }); var task2 = Task.Run(() =&amp;gt; { // 何か処理2  }); var taskAll = Task.WhenAll(task1, task2).ContinueWith(() =&amp;gt; { // 何か処理3  }); return await taskAll.ConfigureAwait(false); }  Task Taskは、一連の処理をひとまとまりにした単位になるようです。 また、Taskは呼び出した際に別スレッドで実行されるようになっているようで、 連続で記述した場合は、どんどん別スレッドで並列処理されるようになっているようです。
Task.WhenAll と ContinueWith TaskはContinueWith関数を利用して、その後の処理を連続して実行できるようです。 そのため、2つ以上の関数を実行して、両方が終わった場合に続きの処理を書く場合は、 ContinueWithを利用するか、awaitで全て終了するのを待つかの2パターンありそうです。
(パターン1)
var task1 = Task.Run(() =&amp;gt; { // 何か処理  }); var task2 = Task.</description>
    </item>
    
    <item>
      <title>C#においてTCPClientを利用したときのメモ</title>
      <link>http://iimuz.github.io/scrapbook/programming/csharp/cs-tcp-client/</link>
      <pubDate>Fri, 02 Mar 2018 19:43:39 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/csharp/cs-tcp-client/</guid>
      <description>C#でTCP Clientを実際に利用したので、その際に作成したコードの雛形をメモしておきます。 本当は、色々と追加で必要な処理とかがあるのかもしれませんが、今回は下記のコードで十分でした。
成果物 下記のコードでクライアントとしてサーバに接続し、文字列送信することが可能です。
 注意点 実際には、接続失敗した場合の処理などが別途必要です。 また、このサンプルで利用では Connect 関数を利用していますが、 同期関数となるため接続が完了するまでスレッドが停止してしまいます。 停止させるのが問題になる場合は、 ConnectAsync 関数を利用するか、 Taskなどを利用して非同期に実行する必要があります。</description>
    </item>
    
    <item>
      <title>Jenkinsでのparallel処理</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/jenkins/jenkins-parallel/</link>
      <pubDate>Wed, 14 Feb 2018 09:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/jenkins/jenkins-parallel/</guid>
      <description>jenkinsでpallalelしたときの挙動に関してです。 きちんと調べればわかるのかもしれませんが、動作させたときに起こった現象をまとめておきます。
下記のようにnodeの下にparallelを記載した場合は、同一ノード中で処理が並列で実施されるようです。
pipeline { agent { node { label &amp;quot;slave&amp;quot; } } stages { stage (&#39;hoge&#39;) { pallalel { stage (&#39;p1&#39;) { step { hoge } } stage (&#39;p2&#39;) { step { hoge } } } } } }  一方で、下記のようにステージにノードが含まれている場合は、複数ノードで並列で実施されるようです。
pipeline { agent none stages { stage (&#39;hoge&#39;) { pallalel { stage (&#39;p1&#39;) { agent { node { label &amp;quot;slave&amp;quot; } } step { hoge } } stage (&#39;p2&#39;) { agent { node { label &amp;quot;slave&amp;quot; } } step { hoge } } } } } }  </description>
    </item>
    
    <item>
      <title>Gmailで&#43;付きのメールアドレスから送信する方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/gmail-alias/</link>
      <pubDate>Sun, 28 Jan 2018 15:49:46 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/gmail-alias/</guid>
      <description>結論 送信アドレスを直接設定できないのでGMailのアドレスに追加する。
方法 GMailのページをPC環境で開き、設定から &amp;ldquo;アカウントとインポート&amp;rdquo; -&amp;gt; &amp;ldquo;名前&amp;rdquo; -&amp;gt; &amp;ldquo;他のメールアドレスを追加&amp;rdquo; で任意のアドレスを追加する。
例 hoge@gmail.com の追加パターン hoge+geho@gmail.com を追加すると、送信アドレスに hoge+geho@gmail.com が追加される。
注意 スマホとかだと設定画面へ行けませんでした。</description>
    </item>
    
    <item>
      <title>powershellスクリプトを書くときのテンプレート</title>
      <link>http://iimuz.github.io/scrapbook/programming/powershell/powershell-template/</link>
      <pubDate>Sat, 13 Jan 2018 21:19:40 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/powershell/powershell-template/</guid>
      <description>powershellスクリプトを書くときに、helpコメントやwhatifなどの標準機能を利用できるように調べたときのメモです。
最終テンプレート  何ができるか 上記テンプレートに従って書いた場合に何ができるようになるかというと、下記の標準機能が利用できます。
Get-Help ヘルプ表示をすることでスクリプトの処理内容をチェックすることができます。 また、引数などについても確認できるようになります。
# Helpの取得 $ Get-Help hoge.ps1 # 使用例などを含めてHelpを取得 $ Get-Hellp hoge.ps1 -detailed # 全てのヘルプとピックを取得 $ Get-Help hoge.ps1 -full  WhatIf 実行時にdryrunをするためには、powershellコマンドの場合はWhatIfが使われますが、 このWhatIfをスクリプト内に伝搬することが可能になります。 そのため、下記のようにスクリプトを実行すると、dryrunが実現できます。
$ .\hoge.ps1 -WhatIf  その他のスクリプトを書くときの注意点 標準出力系 powershellの場合、出力に関しては下記のパターンが用意されているので、使った方がデバッグが楽に行えると思います。
 Write-Verbose Write-Host Write-Warning Write-Error Write-Debug  上記のうち、Host、Warnng、Errorは何もしなくても出力されます。 一方、VerboseとDebugは下記のようにスクリプトを実行すれば、実行時のみ出力することができます。 注意点として、Debugフラグをつけた場合はInquireになるため、メッセージの場所で続行するか否かの選択肢が毎回発生します。
# output verbose message $ .\hoge.ps1 -Verbose # output debug message(inquire) $ .\hoge.ps1 -Debug  進捗バー 処理量が多い時などは、下記のように進捗バーを出すことが簡単にできます。
for ($I = 0; $I -le 100; ++$I) { Write-Progress -Activity &amp;quot;Hoge Process&amp;quot; -Status &amp;quot;Hoge $I&amp;quot; -PercentComplete $I }  -PercentComplete は、100分率で記載すれば良いようです。</description>
    </item>
    
    <item>
      <title>windowsのコマンドプロンプトでdokcer &#43; vimを利用すると日本語を含む行で適切に表示されない</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/cmd-vim-strange-cursor/</link>
      <pubDate>Sun, 03 Dec 2017 21:28:02 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/cmd-vim-strange-cursor/</guid>
      <description> 現象 日本語を含む行では、なぜか行末の位置を適切に表示できなくなり、編集などをすると表示とは別の位置に表示される。
対処方法 コマンドプロンプトをutf-8にしていることが問題でした。 下記コマンドで、cp932に変更することで正常に動作することを確認しました。
$ chcp 932 詳細 windows 7 + conemu + コマンドプロンプト + docker + vim で日本語表示した時に問題が発生していました。 他の環境での設定もあり、utf8にコマンドプロンプトの出力を変更していました。
$ chcp 65001  utf-8ファイルのgit diff出力などは、こうしておかないと文字化けしていたのですが、 今回はこの設定がダメだったようです。
他にもconemuで下記の設定にしています。
 フォント: MS ゴシック monospace は OFF  </description>
    </item>
    
    <item>
      <title>DockerでJenkinsのmasterとslaveを用意</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/jenkins/jenkins/</link>
      <pubDate>Sat, 12 Aug 2017 12:32:37 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/jenkins/jenkins/</guid>
      <description>Jenkinsを利用したCI環境の構築 privateリポジトリなど個人用にCIを行うためにdockerを用いてjenkins環境を構築したときのメモです。
master環境の構築 dockerhubに用意されているimageを利用しました。
最終形のpluginと設定 pluginリスト
 SSH Slaves plugin  slaveをssh接続で利用するために必要です。 これをいれないとノードの追加で&amp;rdquo;SSH経由でUnixマシンのスレーブエージェントを起動&amp;rdquo;という選択肢が出ませんでした。   dockerのjenkins設定
master: image: jenkinsci/jenkins:latest environment: JAVA_OPTS: -Xmx1g JENKINS_OPTS: --prefix=/jenkins --httpPort=1313 volumes: - ./master:/var/jenkins_home:rw ports: - 1313:1313    slaveの設定画面         slave設定 今回は接続できることを確認するためなので、単にslaveを起動します。
slave: image: jenkinsci/ssh-slave:latest expose: - 22 depends_on: - master 経過ログ プラグイン類は全てなしで初期設定を行いました。
ただ、それだとslaveへの接続で&amp;rdquo;SSH経由でUnixマシンのスレーブエージェントを起動&amp;rdquo;という選択肢が現れなかったので、sshが選択できそうなプラグインのSSH Slaves pluginを導入して見ました。 最小構成の方法かどうかは不明ですが、とりあえず選択肢が現れたのでOKとします。
masterからslaveへ接続できなくて詰まりました。 結局のところ、sshキーの認証をslave側で適切にできていなかったことが原因のようです。
 masterでsshキーを作成(パスなどは設定せず)
# master container $ ssh-keygen -t rsa slave側に ~/.</description>
    </item>
    
    <item>
      <title>windowsでネットワークドライブからsymlinkを有効にする</title>
      <link>http://iimuz.github.io/scrapbook/programming/powershell/windows-symlink-from-remote/</link>
      <pubDate>Mon, 29 May 2017 14:01:34 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/powershell/windows-symlink-from-remote/</guid>
      <description> 概要 windowsを利用していてネットワークドライブにあるsymlinkのディレクトリの情報を powershellから取得する方法を調べました。 セキュリティとしては甘くなるようです。
# 現在の設定を確認する $ fsutil behavior query symlinkevaluation # リモートでのシンボリックリンクを有効にする $ fsutil behavior set symlinkevaluation r2r:1 r2l:1</description>
    </item>
    
    <item>
      <title>DockerでFessを動かします</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/dockerfess/</link>
      <pubDate>Sun, 04 Dec 2016 12:56:10 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/dockerfess/</guid>
      <description>概要 dockerでfess環境を構築します。 ただ、どうやってローカルのファイル検索結果を開くようにするかが問題です。 単純にダウンロードなら動作させられますが、 直接開きたいのです。(セキュリティ上Web利用だとしにくいのはわかっているのですが。)
手順  docker hubからcodelib/fessのイメージをpullします。 下記コマンドで実行します。
$ docker run -p 8080:8080 -d codelib/fess:latest  変更 そのままでは、利用しにくいので設定を変更しています。
nginxのreverse proxy用設定 イメージをそのまま利用すると、localhost:8080に展開されます。 私の環境では、nginxを用いてリバースプロキシを設定しており、 サブディレクトリで複数のアプリケーションを分けています。 そこで、/opt/fess/bin/fess.in.shを変更しています。 デフォルトの状態から変更している部分のみ記載します。
# localhost:8888/fess/でアクセスできるように変更します FESS_JAVA_OPTS=&amp;#34;$FESS_JAVA_OPTS-Dfess.context.path=/fess/&amp;#34; FESS_JAVA_OPTS=&amp;#34;$FESS_JAVA_OPTS-Dfess.</description>
    </item>
    
    <item>
      <title>WindowsでDocker&#43;Hugoサーバを動作させる方法です</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/docker/dockerwindows/</link>
      <pubDate>Sat, 26 Nov 2016 12:08:10 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/docker/dockerwindows/</guid>
      <description>概要 Mac側でdockerを利用してhugoの実行環境を作成したのですが、 同じデータを共有しているwindows側でも ビルドとデプロイができるdocker環境を作成しました。 その際、windows側だと確認用のローカルhugoサーバを建てた時に、 接続IPの設定でハマったのでメモしておきます。
結論 Docker toolboxの場合は、virtualboxを利用しているため、 virtualboxのIPも設定した上で、 hugoサーバのアドレス設定を適切にする必要がありました。 (Port番号は、どこがどこに繋がっているのか明確にするためにわざと変えています。 別に変える必要はないので、本当は全部1313(hugoのデフォルト)にしています。)
 virtualboxの設定画面(docker-machineに利用している仮想マシン) からネットワーク設定を開き、IPとポートを設定します。  例えば、ホストとゲストを下記のように設定します  ホスト: IP = 127.0.0.1, Port = 1313 ゲスト: IP = 0.0.0.0 Port = 8888   dockerデーモンを起動する時に、下記に記載するようにポートフォワードしておきます
$ docker run -d -p 8888:80 -v source_volume:mount_dir hugo_image dokcerデーモン内では下記のようにhugoサーバーが起動するようにします。
$ hugo server -p 80 --baseURL=127.0.0.1 --bind=0.0.0.0 -w windows側からブラウザで127.0.0.1:1313にアクセスすると観れます。
  構成状況 結論部分で記載したように構成を組むと下記のように設定がなされます。
(hugo: IP = 0.0.0.0, port = 80, baseURL = 127.0.0.1) -&amp;gt; (docker: IP = 0.</description>
    </item>
    
    <item>
      <title>今更ながらにDockerについて調べてみました</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/docker/docker/</link>
      <pubDate>Wed, 23 Nov 2016 21:24:50 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/docker/docker/</guid>
      <description>Dockerとは何ができるのでしょうか? 色々調べましたが、Dockerの構成などは説明されているのですが、 何ができるようになるのかをわかりやすく書いている文献を見つけられませんでした。
調べた範囲では、下記のようなことができるという感じでしょうか。 実運用でしているわけではないので本当のメリットは不明です。
 アプリケーションを実行する環境を構築できる 用意した実行環境が周りを汚さない(多分これは重要) 困ったら即消せる(まあ、環境構築してたら結構失敗するよね)  例えば、下記のようなサイトを参考にさせてもらいました。
 paiza開発日誌 いまさら聞けないDocker入門(1)   「Docker」とは、 Docker社（旧dotCloud）が開発するオープンソースの コンテナー管理ソフトウェアの1つです。
 ライセンスがオープンソースなのは使いやすいです。 githubのdocker/LICENSEによると、 Appache License2.0に従うようです。
重要なこととして、 NVIDIA Dockerなるdockerイメージがあり、TensorFlowの環境構築に使えるそうです。 NVIDIA Docker
sshによるdocker-machineのdefaultへのログイン 最初に作られたdocker-machineのdefaultへsshで入るときのIDとパスは下記になるそうです。 windowsの場合、 sshで入るにはgit-bashを利用するか(おそらくdockerインストール時に入っています。)、 Windows10であればBash on UBuntu on Windowsで入れます。 私の場合は、Bash on Windowsで入れることを確認しました。
user: docker pass: tcuser Dockerのインストールと起動 Dokcer Toolboxをインストールしてpowershellから起動しようとすると、 いくつかエラーが発生しました。
docker-machineでTLSエラー 下記のようなエラーが発生しました。
 Error checking TLS connection: Error checking and/or regenerating the certs: There was an error validating certificates for host &amp;ldquo;192.</description>
    </item>
    
    <item>
      <title>Python開発環境をDockerで構築します</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/docker/pythonenvwithdocker/</link>
      <pubDate>Wed, 23 Nov 2016 21:17:23 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/docker/pythonenvwithdocker/</guid>
      <description>目標 深層学習の勉強で実際に実行できる環境を整えようと思ったのですが、 以前から入っているpython環境とは別にしたいのでDockerで構築してみました。
pythonにインストールするライブラリは、 O&amp;rsquo;REILLY ゼロから作るDeep Learningが動作する環境です。 したがって、下記の環境になります。
 Python 3.x NumPy Matplotlib  結論 python環境を構築するdockerファイルは下記になりました。 もはやdockerfile必要なのかというレベルで何も書いていないです。(楽すぎます)
FROMpython:3.5.2RUN pip install numpy matplotlib 理由 python環境であればpyenvとか利用すれば、環境は分離できるのですが、 利用しているPCがMacとWindowsの両方あります(Macの方が性能が低いです)、 Macの方がプログラミングはしやすいのですが、 深層学習には軽い実験をするのにもマシンパワーが必要となるため、 実行だけはWindowsでやりたいわけです。 MacとWindowsで同じように動く環境を構築するのがめんどくさいという理由です。
注意 Dokcerと深層学習のフレームワーク Tensorflowを利用するならばDockerに公式があります TensorflowのDockerイメージは、Docker Hubにあります。
PUBLIC REPOSITORY:tensorflow/tensorflow
上記イメージは、python2.7になります。 python3系のdockerイメージは公開されていないそうです。 python3系でTensorFlowを利用したい場合は、 公式からForkしてPython3対応を公開されている方がいらっしゃいましたので、 以下を利用すれば良いと思います。
 khm/tensorflow: branch/feature-py3 TensorFlow の Docker Image を Python3 で動かす  その他  Docker Habに公式イメージがあるフレームワーク  PUBLIC | AUTOMATED BUILD chainer/chainer  公式が見つからなかったフレームワーク  Caffe DeepDream   MacとWindowsではGPUの利用はできません 深層学習で遊ぶためにはGPGPUを利用した方が高速に処理できます。 (場合によってはCPUでは現実時間で終わりません。) ただし、MacかWindowsでDockerを利用する場合、GPUデバイスにアクセスできないため、 CPU実行しかできません。 必要に応じてLinux環境が純粋に入っているPCを用意する必要がありそうです。</description>
    </item>
    
    <item>
      <title>Bash On Ubuntu On WindowsのGPU利用は(現時点では)できないそうです</title>
      <link>http://iimuz.github.io/scrapbook/programming/tensorflow/bashonubuntuonwindows/</link>
      <pubDate>Sun, 20 Nov 2016 18:36:25 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/tensorflow/bashonubuntuonwindows/</guid>
      <description>概要 Windows環境下でTensorFlowをGPU利用で動作させたかったので、 最近追加されたWindows機能である Bash On Ubuntu On Windowsを利用できないか調査しました。 結論としては、現時点ではBash On Ubuntu On WindowsからGPUは使えないそうです。
WindowsでビルドしてGPUで動作させたい場合は、 cmakeに記載の方法を利用するしかなさそうです。
GPU利用できないソース OpenCL &amp;amp; CUDA GPU supportによると、 今のところは対応してくれなさそうです。 (コメントを見る限りTensorFlowで使いたいという人もいるようです。) MSさん頑張って対応してとしか言えないですね。
 It’s on the backlog, but not currently planned.
We know many of you would like to be able to accelerate your numerical analysis code via CUDA/OpenCL, etc.
One thing to explore in the meantime is to try running your code in Windows. Windows actually has very powerful GPU-acceleration capabilities and you may well find that much of your existing code may well work already or require trivial effort to port to Windows itself.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;で利用できそうなLoggerを調べました</title>
      <link>http://iimuz.github.io/scrapbook/programming/cpp/cpplogger/</link>
      <pubDate>Wed, 16 Nov 2016 23:51:59 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/cpp/cpplogger/</guid>
      <description>利用できそうなLogger  Plog - portable and simple log for C++  ヘッダファイルのみで構成されているLoggerです。 License: Mozilla Public Lisense 2.0  log4cxx glog Boost.Log EasyLogging++ spdlog  License: MIT License   各Loggerのちょっとしたメモ Plog 2016/11/16現在でも更新されています。 ヘッダファイルだけで構成されているため、cloneしてパスを通せば利用できそうです。 利用方法については、Qiitaで記事が書かれていたので、こちらを参照してください。
spdlog 2016/11/16現在も更新されています。 Plog同様にヘッダファイルのみで構成されているようです。 処理速度重視のようです。 利用方法については、ブログに記事がありましたので、こちらを参照してください。</description>
    </item>
    
    <item>
      <title>Hugoで数式を導入します</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/hugo/hugotex/</link>
      <pubDate>Tue, 15 Nov 2016 21:41:53 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/hugo/hugotex/</guid>
      <description>Hugo + Tex 私の場合メモするときは、PC使えるならばmarkdown型式のテキストで保存します。 ただ、よく数式をメモしたいときに書けなかったので、かける方法を探したところ、 markdown+Texができるようでしたので導入しました。 (Tex記法には慣れていないと書きにくいかもしれません)
現在は、サイトジェネレーターとしてHugoを利用しており、今回はmathjaxを導入します。 (別にHugoでなくてもjsを読み込めば使えるはずです。) 導入すると下記のようにインラインと一行分の挿入の両方ができるようになります。
 インライン表示: $F(x) = \sum_{n=1}^{N} \frac{1}{N}$
Markdownでは、$を一つ利用して下記のように記述しています。
$F(x) = \sum_{n=1}^{N} \frac{1}{N}$ 一行表示 $$ F(x) = \sum_{n=1}^{N} \frac{1}{N} $$
Markdownでは、$を二つ利用して下記のように記述しています。
$$F(x) = \sum_{n=1}^{N} \frac{1}{N}$$  加えて、Atomの場合は、パッケージを追加することでプレビューしながら編集できます。
設定方法 Hugo編 設定方法については、下記の2つのページを参考にしています。
 HuGo に Mathjax を入れて数式を表示できるようにした MathJax の導入  違いとしては、header.htmlではなくfooter.htmlに記載しました。 前半のスクリプトでインライン表示ができるようになります。
&amp;lt;!-- tex --&amp;gt; &amp;lt;script type=&amp;#34;text/x-mathjax-config&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#34;\\(&amp;#34;,&amp;#34;\\)&amp;#34;]] } }); &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;#34; /&amp;gt; &amp;lt;/script&amp;gt; Atom編 追加するパッケージは、markdown-preview-plusとmathjax-wrapperになります。 markdown-preview-plusがインストールできた段階で、 インストール済みのパッケージからmarkdown-previewをdiableにします。</description>
    </item>
    
    <item>
      <title>Hugoの初期設定</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/hugo/hugosetup/</link>
      <pubDate>Sat, 29 Oct 2016 19:49:51 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/hugo/hugosetup/</guid>
      <description>&lt;p&gt;JekyllからHugoに環境を以降しました。
その時に行った作業のメモになります。
Macでの環境構築になりますが、
基本的にhugoをインストールしてthemeを設定しただけになります。
jekyllではread moreをプラグインで挿入しなければなりませんでしたが、
hugoでは標準で装備されていたりと設定が楽でした。&lt;/p&gt;

&lt;p&gt;(2016/11/20追記)
Bash On Ubuntu On Windowsを利用して、Hugo環境を構築した時のメモを追記しました。
基本的にUbuntuでのインストール方法と同じになります。
(今回はバイナリを公式サイトからダウンロードしてインストールする方法を利用しました。)&lt;/p&gt;

&lt;h2 id=&#34;作業手順&#34;&gt;作業手順&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Hugoをインストールします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew file brew install hugo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ubuntuの場合は、.debファイルをダウンロードしてきてインストールします。
(環境に合わせて適切なファイルをダウンロードして下しさい。)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo dpkg -i hugo_0.17-64bit.deb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hugoを利用して新規サイトを作成します。
 今回の例では、新しくhoge-siteを作成する例になります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new site hoge-site&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hugoのテーマを設定します。
今回は、&lt;a href=&#34;http://themes.gohugo.io&#34;&gt;Hugo Theme Site&lt;/a&gt;さんから
&lt;a href=&#34;https://github.com/yoshiharuyamashita/blackburn&#34;&gt;BLACKBURN&lt;/a&gt;を選択しました。
理由は、シンプルな構成であることとcssのみで構成されており軽そうなことです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cd hoge-site
$ mkdir themes
$ cd themes
$ git clone git@github.com:yoshiharuyamashita/blackburn.git blackburn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Themeが適用されてサイトが構築できるかサーバーを建てて確認します。
今回は、blackburnのthemeになりますが、
任意のthemeを利用した場合はblackburnの部分を設定したthemeに変えてください。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cd ..
$ hugo server -t blackburn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;サイトの設定を記載します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;baseurl&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;languageCode&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ja-jp&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blackburn&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;canonifyurls&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 相対パスではなくbaseurlを基準とした絶対パスとする&lt;/span&gt;

[&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;author&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt;

[&lt;span style=&#34;color:#a6e22e&#34;&gt;taxonomies&lt;/span&gt;]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;category&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;categories&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tag&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>gitでCould Not Execute Editorと言われた時の対処法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/gitcouldnotexecuteeditor/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/gitcouldnotexecuteeditor/</guid>
      <description>gitを利用していたら突然Could Not Execute Editorと言われたので解決方法です。 原因はよくわかっていないので、本当の対処方法があると思います。
対処方法は、.gitフォルダにあるconfigファイルに以下を記載します。
[core] editor = /usr/local/bin/vim  ここで記載するvimへのパスは、以下のコマンドで確認できます。
$ which vim</description>
    </item>
    
    <item>
      <title>Mac環境へのElectron導入方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/electronenv/</link>
      <pubDate>Mon, 28 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/electronenv/</guid>
      <description>&lt;p&gt;Mac(El Capitan)へのElectron + coffee-script環境の導入手順。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HerokuのFreeプランでアプリを最大限起動しっぱなしにする方法(1日18時間まで)</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/heroku/hubotkeepalive/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/heroku/hubotkeepalive/</guid>
      <description>&lt;p&gt;HerokuのFreeプランでは1日6時間のSleep時間が設けられているが、それ以外の時間は起動し続けるように設定する方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Herokuアカウントの作成方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/heroku/herokusignup/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/heroku/herokusignup/</guid>
      <description>&lt;p&gt;Hubotの動作用にHerokuのアカウントを登録したので、そのときやったことを覚書として残しておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HubotのHello Worldスクリプトの作成方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/hubotscripttutorial/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/hubotscripttutorial/</guid>
      <description>&lt;p&gt;HubotをSlackと接続するところまでできたので、自分用にカスタマイズするためにスクリプトを作ろうと思う。
プログラムの練習をするのときの定番であるHello Worldを表示するまでの記録です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HubotをHerokuで動かすまで</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/heroku/hubotinheroku/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/heroku/hubotinheroku/</guid>
      <description>&lt;p&gt;SlackにHubotを導入してChatOpsをやってみようと思ったので、その実行環境を整えるための準備についての覚書です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gmailにはない開発環境を求めて</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/platformforit/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/platformforit/</guid>
      <description>&lt;p&gt;複数人でのソフトウェアの開発や在宅ワークなど働き方が多様化している中で、コミュニケーションツールとして旧来までのメールシステムに代わりチャットツールがある。
メールシステムにも良さはあるもののフロー型のツールとしてはチャットツールの方が優れている点も多い。
そこで、今回はチャットツールで最近(といっても結構経つが)ホットなSlackを導入し、Windows、Mac、Androidで共通の環境を利用できるまでの方法についてまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minecraftのmod作成環境を構築した時のメモ(Mac編)</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/minecraft/envforminecraftmodcreator/</link>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/minecraft/envforminecraftmodcreator/</guid>
      <description>&lt;p&gt;Minecraftのmod作成するためにMacに環境構築したので、その時のメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minecraft 1.8のmod構成メモ</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/minecraft/minecraftmods1_8/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/minecraft/minecraftmods1_8/</guid>
      <description>&lt;p&gt;Minecraftのバージョンが1.8(1.8.xではなく1.8)のときのmod構成&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>virtualenvを利用したpython環境の構築(Windows編)</title>
      <link>http://iimuz.github.io/scrapbook/programming/python/pythonwindows/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/python/pythonwindows/</guid>
      <description>&lt;p&gt;Windows環境でvirtualenv環境を構築したときのメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Homebrewでnot writableがでた時の対処方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/homebrew/homebrewpermission/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/homebrew/homebrewpermission/</guid>
      <description>&lt;p&gt;Homebrewでパッケージをインストールしたが、途中でNot writableと言われたので解消方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windowsのパッケージ管理にchocolateyを導入したときのメモ</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/chocolatey/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/chocolatey/</guid>
      <description>&lt;p&gt;Windowsのパッケージ管理にchocolateyを利用することにしてみたので、導入メモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python3.4でmatplotlibを導入したらグラフ表示できない問題の対処法</title>
      <link>http://iimuz.github.io/scrapbook/programming/python/matplotlib/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/python/matplotlib/</guid>
      <description>&lt;p&gt;Mac(Yosemite)のvirtualenv環境でmatplotlibを導入したら、導入できたのに表示できなかったので対処法メモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Atomの設定をGitHubを利用して共有する方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/atom/shareatomsettings/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/atom/shareatomsettings/</guid>
      <description>&lt;p&gt;Atomの設定をvimの.vimrcとかbundlesとかのように共有する方法を調べた時のメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>homebrewでインストールした時に自動でbrewfileを更新する方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/homebrew/homebrew/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/homebrew/homebrew/</guid>
      <description>&lt;p&gt;homebrewでインストールしたら自動でbrewfileを更新してほしいので、どうすればできるか調べた時のメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows環境のエディタをAtomに乗り換えようかと思ったのでメモ</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/atom/atomeditor/</link>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/atom/atomeditor/</guid>
      <description>&lt;p&gt;Windows環境ではVimが思ったよりも使いにくいので変更しようと思って&lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;を試験的に導入したのでその時のメモ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minecracft 1.7.10にmodを導入</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/minecraft/minecraftmods/</link>
      <pubDate>Mon, 21 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/minecraft/minecraftmods/</guid>
      <description>&lt;p&gt;久しぶりにminecraftにmodを導入しようと思ったので、メモ。
(IDが衝突しているみたいで適切な動作になっていないので注意。)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近未来動画の寄せ集め</title>
      <link>http://iimuz.github.io/scrapbook/others/futurevisionmovie/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/others/futurevisionmovie/</guid>
      <description>ふと近未来動画を集めた時のメモ書き。
概要 近未来動画って非常に面白いと思う。 コンセプトだし、そうなるわけじゃないかもしれないけど色々興味が湧く、 こうなったらいいなが入っていてワクワクするのがいい。
たまに、おいおいって言いたくなるのもなんか笑って許せるところが、またコンセプト動画の良さでもあると思う。
近未来動画 公開年代順に並べてみる。これはこれで、少しずつ変わっていそうで一気に流せたら時間の流れがわかりそう。 公開年代は、動画のアップロード日だったり、わかれば実際に作った年とか結構アバウトだけど。
 Microsoft
Microsoftは、カード型の端末がずっとメインに続いてる。 大きさが違ったり(タブレット見たいなサイズ)、新聞のようなものも出てくるけど、 基本、みんなが持ってるのはカード型のスマホが薄くなったような端末。
 2015/03/10 Microsoft: Productivity Feature Vision 2013/07/14 Microsoft&amp;rsquo;s Concept - Future vision 2010 2011/10/24 Productivity Future Vision (2009)  NTT
 2013/05/16 data for smart society(NTT DATA future vision) 2013/06/12 2025 the future of ICT  その他
みんな、タブレットとスマホが大好きって感じ。 それ以外の面白デバイスは少ないなぁ。
 2015/05/10 Top 5 future Technology inventions: 2015 - 2050
幾つかの動画からテクノロジーを集めてきた感じかな。
 2013/03/04 TOYOTA Introducing TOYOTA i-ROAD personal Mobility Vechicle</description>
    </item>
    
    <item>
      <title>macでpandocを利用してpdfに変換しようとした時のトラブルメモ</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/macpandocpdf/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/macpandocpdf/</guid>
      <description> Macでpandocを利用してpdfに変換しようとしたら文字化けして変換できなかったので、 変換できるように設定した時のメモ。
概要 macのutf-8が特殊みたいで、一回変換をかませてあげる必要があるみたい。 コマンドとしては、以下のようにしてあげると変換できる。 長いので.bashrcとかにaliasか関数定義する方が早いかもしれない。
$ iconv -c -f UTF-8-MAC -t UTF-8 hoge.md | pandoc -o hoge.pdf -f markdown -V documentclass=ltjarticle --latex-engine=lualatex 必要パッケージの導入 homebrewを利用して以下のパッケージを導入する。
 pandoc  今回の変換のためには、pandocが必要なので導入する。 pandoc自体は結構いろんな形式に変換できる。  mactex  pandocでpdfに変換するためには、 一旦texに変換して、それをpdfに変換する必要がある。   コマンドとしては以下でインストールされるはず。
$ brew install pandoc $ brew cask install mactex pdf変換コマンドの説明 文字エンコードの変更(UTF-8-MAC to UTF-8) texへ変換する前に、macのutf-8を普通のutf-8に変換する。 ただし、以下のコマンドを実行するだけでは、単にコマンドラインにutf-8の文字列が出力されるだけ。 長い文章のファイルに対して行うと結構ずらっとでるので注意。
たまに変換エラーがでるので、変換できなくても無視して続けるようにするために、-cオプションを追加しておく。
$ iconv -c -f UTF-8-MAC -t UTF-8 hoge.md texからpdfへ ファイル形式がmarkdownのファイルを、texを利用してpdfに変換する。
$ pandoc -o hoge.pdf -f markdown, -V documentclass=ltjarticle --latex-engine=lualatex  -f markdown  マークダウンファイルを変換  -V documentclass=ltjarticle --latex-engine=lualatex  lualatexを利用して変換する   </description>
    </item>
    
    <item>
      <title>macにjava環境を構築した時のメモ</title>
      <link>http://iimuz.github.io/scrapbook/programming/java/javaenvironment/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/java/javaenvironment/</guid>
      <description>macにjava環境を構築した時のメモ。 まだ成功していない。
概要 MacにJAVA環境を構築した時に行った作業一覧。 Eclipseを利用すれば早いし、環境としても良いのはしっているが、 Eclipseは重いという問題があるので、基本vimだけで動くことを目標として環境構築。
インストールパッケージ  java
$ brew cask install java eclipse
$ brew cask install eclipse-java インストールしたらとりあえず、一回は起動しておく。
 ant
この後のNeoBundleでEclimをビルドするのに必要なので導入。 javaを利用したビルドツール(要はmakeツール)
$ brew cask intall ant  vimパッケージ NeoBundle .vimrcに記述してNeoBundleで管理するパッケージ。
 ervandew/eclim
 以下のコマンドを.vimrcに記載する。   NeoBundleLazy &#39;ervandew/eclim&#39;, { \ &#39;build&#39;: \ {&#39;mac&#39;: &#39;ant -Declipse.home=/opt/homebrew-cask/Caskroom/eclipse-java/4.5/Eclipse.app/Contents/Eclipse -Dvim.files=&#39;.escape(expand(&#39;~/.vim/bundle/eclim&#39;), &#39;&#39;)}, \ }  Declipse.home=の指す先は、brew cask install eclipseでインストールされたEclipseの場所。 -Dvim.files=の指す先は、vimのbundleを管理しているフォルダ。
結局よくわからないので、自分でビルドしに行った。
$ ant -Delipse.home=/opt/homebrew-cask/Caskroom/eclipse-java/4.5/Eclipse.app/Contents/Eclipse -Dvim.files=~/.vim/bundle/eclim 上記がエラーの原因だった。 ビルド時の出力みたらeclimフォルダの中にDvim.filesのパスが作成されていた。 この辺の挙動が不明で適当に書き換えているからエラーする。 とりあえず以下のように強引にeclimフォルダに出力されるようにビルドした。
$ ant -Delipse.</description>
    </item>
    
    <item>
      <title>今後学ぼうと考えているプログラム言語をまとめてみる</title>
      <link>http://iimuz.github.io/scrapbook/skill/others/progrmlanguage/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/skill/others/progrmlanguage/</guid>
      <description> 何をするのに一般的に利用されているか、まとめてみる。
概要 用途によって利用する言語は変えれば良いと思うが、 いくつか比較してみると、とりあえず使えるようになっておけば良い言語は以下の感じかな。
 C / C++: 現時点で一番利用しているから放置 Java: Androidアプリ開発で利用する Objective-C (Swift): iPhone/macアプリ開発で利用する Python: 学術系では強い Ruby: ???  比較対象言語  julia go lang javascript java python c++ swift ruby or ruby on rails haskel c#  TOIBE TOIBEは以下のような感じ。 そこから主観的に抜き出しておく。
 C / C++ Java Objective-C C# Python Javascript Ruby  TOIBEランキング  C Java Objective-C C++ C# Basic PHP Python Perl Transact-SQL Delphi/Object Pascal Javascript VB .NET Visual Basic R Ruby Dart F# Swift Pacal  </description>
    </item>
    
    <item>
      <title>Macでpython環境の構築</title>
      <link>http://iimuz.github.io/scrapbook/programming/python/pythonenvironment/</link>
      <pubDate>Sat, 29 Aug 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/python/pythonenvironment/</guid>
      <description>MacでPython環境を構築した時のメモ。
概要 MacでPython環境を構築した時のメモ。
pyenv-virtualenvの導入 homebrew導入済みと仮定して、以下のコマンドでpyenv-virtualenvを導入する。
$ homebrew update $ homebrew install pyenv-virtualenv ついでに、.bash_profileに以下を記述して、パスを通す。
export PYENV_ROOT=&amp;quot;${HOME}/.pyenv&amp;quot; if [ -d &amp;quot;${PYENV_ROOT}&amp;quot; ]; then export PATH=${PYENV_ROOT}/bin:$PATH eval &amp;quot;$(pyenv init -)&amp;quot; fi  pythonのインストールは、バージョン確認して好きなのを選択すれば良い。
$ pyenv install 3.4.3 以下のエラーがでた時はXCodeを導入すれば良いので、追加でXCodeのインストールコマンドも行う。
 ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?
 $ xcode-select --install 利用するバージョンを変更するために以下のコマンドを実行する。
$ pyenv global 3.4.3 $ pyenv rehash virtualenvの利用方法 virutalenvは、pythonの環境を構築できる。 pyenvがバージョンの管理とすると、virtualenvはライブラリなどの環境管理が可能。 pyenvの3.4.3に対して、インストールするライブラリを変更して用意することができる。
環境を新しく作る方法は、以下のコマンドを利用する。
$ pyenv virtualenv 3.4.3 3.</description>
    </item>
    
    <item>
      <title>ruby環境</title>
      <link>http://iimuz.github.io/scrapbook/programming/ruby/rubyenvironment/</link>
      <pubDate>Sat, 29 Aug 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/ruby/rubyenvironment/</guid>
      <description>&lt;p&gt;jekyllがMac環境でうまく動作しなくなったので、そのときに見直したRuby環境のメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Macbook 12インチ(1.1GHz)の設定</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/macsettings/</link>
      <pubDate>Sun, 23 Aug 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/macsettings/</guid>
      <description>macbookの設定をメモ。 初のmacbookなので設定がおかしいかもしれないが、おかしいのに気付いた時に直す。
概要 macbookの設定で行ったことのまとめ。 ソフトウェアとか、設定の変更とか。
ソフトウェア とりあえずApple Storeでインストールできるソフトは、AppStoreでインストールするが、 それ以外のソフトはHomebrewで管理することにした。
デフォルト 初期から入っていたソフト
 Safari メール カレンダー 連絡先 リマインダー メモ マップ メッセージ FaceTime Photo Boose iMovie 写真 Game Center iTunes iBooks App Store Pages Numbers KeyNote プレビュー  App Storeでインストールしたソフト  XCode  Homebrewでインストールしたソフト Brewfileで管理しているので、Brewfileが最新版になっているはず。</description>
    </item>
    
    <item>
      <title>メモ環境</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/memoenvironment/</link>
      <pubDate>Sun, 23 Aug 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/memoenvironment/</guid>
      <description>クロスプラットフォームでメモ環境を構築しようとした時のメモ書き。
概要 論文とかもmarkdown記法でテキストで書いてしまえる気がする。 長文も短文も全て書きだしをスムーズにしたいから、メモして行く方法を確立できないだろうか。
メモ とりあえず、書き始めを基本はgoogle keepにする。 そして、そこから長くなってきたら後悔しても問題ない範囲ならgithubにしてしまえばどこからでも確認できる。 後悔したくないデータは、Dropboxに入れる。
 書き始め: google keep ⇒ markdown記法 公開可能: github ⇒ markdown記法(テキストファイル) ⇒ html 非公開: Dropbox ⇒ markdown記法(テキストファイル) ⇒ PDF  Google keep Windows、Android、Mac(おそらくiOsも)で使えるクロスプラットフォームなメモ。 簡易メモとして非常に軽量で起動とメモの開始までが早いという特徴がある。
ただし、macでsafariを使った時は、文字入力がかなり遅れるという問題があった。 chromeをインストールして、keepを利用したら速度が上がった。 基本は純正ソフトから使えということか?
現在のところmarkdownで書いておけば、この後はコピペで適切な形式に変換できる。
GitHub markdown記法で書いてjekyllでhtmlに変換しておけば、 どこからでもアクセスできる個人データベースの完成。 自分のページにgoogleの検索窓さえつけとけばgoogleの優秀な検索機能が利用できるので、非常に楽に検索機能が利用できる。
Dropbox 一応プライベートな(ネットに繋がっている時点でプライベートか疑問だが)ファイルを保存できるので、 公開したくないメモはこちらに書いて、保存しておく。 ここもmarkdownで書いておけば、もし公開しても良い気がしたらGitHubに移動すればいいし、 最後までダメならそのまま置いておけばいい。
ただ、書き終わったらテキストファイルも残しておくがPDFにしてしまえば見やすくなる。 PDFへの変換は、pandocを利用してしまえば、一発で変換される。</description>
    </item>
    
    <item>
      <title>外部バックアップ用HDDの比較</title>
      <link>http://iimuz.github.io/scrapbook/hardware/others/hddbackup/</link>
      <pubDate>Sun, 16 Aug 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/hardware/others/hddbackup/</guid>
      <description>外部バックアップをするのにHDDを内臓HDD+スタンド or 外付けHDDのどちらが良いか調べたの時のメモ。
概要 バックアップを行うのに数TB程度のバックアップ環境を構築したくなったので、どうするか検討した。
結論としては外付けHDDを購入したほうが安いということが分かった。 内臓HDDのみなら若干安いのだが、スタンドの費用がかさみ単価は外付けHDDのほうが安くなった。
外付けHDD BUFFALO USB3.0 外付けハードディスク PC/家電対応 3TB HD-LC3.0U3/N [フラストレーションフリーパッケージ(FFP)] 2TB: \8,890-(\4,445-/1TB) 3TB: \10,880-(\3,627-/1TB) 4TB: \15,980-(\3,995-/1TB)
6TB(2個): \21,760-(\3,627-/1TB)
amazon
内臓HDD利用 1TB: \11,292- 2TB: \12,768-(\6,384-/1TB) 3TB: \15,102-(\5,034-/1TB)
6TB(3TB x 2枚): \26,244-(\4,374-/1TB)
玄人志向 HDDスタンド USB3.0接続 KURO-DACHI/CLONE/U3 パソコンなしでHDDのまるごとコピー機能付き \3,960-
amazon
WD 内蔵HDD Green 3TB 3.5inch SATA3.0（SATA 6 Gb/s） 64MB Inteilipower 2年保証 1TB: \7,332- 2TB: \8,808-(\4,404-/1TB) 3TB: \11,142-(\3,714-/1TB)
amazon</description>
    </item>
    
    <item>
      <title>MacBookとMacBook Airの比較</title>
      <link>http://iimuz.github.io/scrapbook/hardware/others/macbook/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/hardware/others/macbook/</guid>
      <description>母艦となるWindowsマシン以外にも移動用PCがほしくなったのでその時のメモ。
概要 メインとなるWindowsデスクトップPCを持っているが、 移動したときや自宅以外で作業することが可能なPCがなく不便な時があるので持ち運び用のPCがほしくなった。
 Windows PCのスペック  CPU: Intel Core i7-4770 3.40GHz(8 CPUs), 3.4GHz メモリ: 16GB GPU: NVIDIA GeForce GTX 770   選択基準としては、以下に示すようなこと。
 メインはWindowsPCであり、あくまでもサブ機。 持ち運びに便利である。(既にあるA4サイズまでしか入らないバッグに入ること) プログラミング(3D関連の重い作業はメインで行うのでそれ以外)、動画鑑賞ができること。 サブ機なので、比較的安価であること。  これらを踏まえて、いくつかのPCを比較した結論は、 買うならMacBook Air 11インチ(early 2015)になると思う。
⇒ 結局誘惑に勝てなかったので、macbook 12インチ(1.1GHz)を購入した。
候補  New MacBook  用途としては十分性能が満たしていると思うが、さすがに1.1GHzはないので、1.3GHzのほうにしたい。 1.3GHzの場合は、\178,800-となり高すぎる。
⇒ と思ったが、用途的に1.1GHzでも十分かもしれない。 たぶん利用する目的の一番重い処理が、動画閲覧になると思うから。 それなら、1.1GHzで\148,800-で差額が1万円なら許容範囲か? Retinaディスプレイは良い。 サイズは一番小さい。 最も軽い(920g)。 プログラミングは、動かさなければ一通りできる気がする。コンパイルが少し遅いか? スペック1 CPU: 1.3GHzデュアルコアIntel Core M メモリ: 8GB GPU: Intel HD Graphics 5300 解像度: 2304x1440 pix(16:10) スペック2 CPU: 1.</description>
    </item>
    
    <item>
      <title>Occulus Riftの入力デバイスを調べた時のメモ</title>
      <link>http://iimuz.github.io/scrapbook/hardware/others/vrinputdevice/</link>
      <pubDate>Tue, 26 May 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/hardware/others/vrinputdevice/</guid>
      <description>&lt;p&gt;Occulus Riftの入力デバイスを調べた時のメモ。
ただし、Occulus RiftというよりVRとかARとかまで派生して、面白入力デバイスという感じ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Oculus Rift DK2 で試したコンテンツ</title>
      <link>http://iimuz.github.io/scrapbook/hardware/others/oculusriftshare/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/hardware/others/oculusriftshare/</guid>
      <description> Oculus rift dk2を利用して試したコンテンツ。
コンテンツ とりあえず、個人的な感想で☆5つまでで評価。
 SightLine: The Chair ☆☆☆☆☆  綺麗だし、酔いにくいから面白い。 1回目より2回目のほうが、いろいろ動かせることがわかって面白い。
 Mona Lisa Room ☆☆☆  美術館の1部屋分を再現した感じなのかな?モナリザを見に行ったことがないから、わからない。
上を見ようとしてマウスを動かしてしまう…(笑)Occulus利用している場合は、 見上げればいいだけなんだが、慣れとは恐ろしい。
移動するときのペースが速いので結構酔いそうになる。 自分で動かせるから止まればいいけどちょっと気になる。
これは、本当に高解像度で実現できるようになったら綺麗だろうと思う。
 Lollihop ☆☆☆☆  ステージクリア型(?)のアクションゲーム。 ただしゲームオーバーはないし、たぶん最後に終わりだよって書いてあるけど、 ゲームの中で終わる方法がよくわからなかった。
今までのゲームを作るとこうなるのかってのがよくわかった。 没入感はあるし面白いと思う。けど、勝手にカメラを前後に動かされると酔う…。 ごく一部だし、すぐに抜けたから問題なかったけどね。
 Star Conflict Oculus Demo Dreadnought Battle  Oculus Modeで利用できなかった…。理由はわからない。
 Vox Machine  スムーズに動かせるロボットもの。コックピットからみるとこんな感じになるのか!!って感じで面白い。 ただ、めっちゃ酔う…。
 Virtual Desktop  参考資料  Oculus VR share SightLine: The Chair Mona Lisa Room Lollihop Star Conflict Oculus Demo Dreadnought Battle Virtual Desktop Vox Machine  </description>
    </item>
    
    <item>
      <title>Oculus Rift DK2のセットアップ</title>
      <link>http://iimuz.github.io/scrapbook/hardware/others/oculusriftdk2setup/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/hardware/others/oculusriftdk2setup/</guid>
      <description> Oculus Rift DK2のセットアップをした時の導入手順メモ。
Headsetの設定 説明書が入っているので、それに沿ってコネクタ類を接続する。
PCの設定 Qiita: Oculus Rift DK2をセットアップする手順を参考に順に設定を進める。
Oculus VRでのアカウント作成 最初に公式サイトでアカウント作成を行う。
RuntimeとSDKのダウンロードとインストール 開発なども行うことを考えてRuntimeとSDKをダウンロードする。 SDKのみでよいかと思ったらRuntimeも必要だった…。 SDKがやたら軽いと思ったらSDKのReadmeに書かれてた。
 Oculus Runtime for Windows(現時点では0.5.0.1-beta) Oculus SDK for Windows(現時点では0.5.0.1-beta)  Runtimeのインストールでは、以下2つのインストールを聞かれるが両方ともYesとした。
 Oculus VR, Incディスプレイアダプター Oculus VR  最後に再起動を聞かれるので、再起動する。
Oculusの設定 タスクバーのOculusアイコンをダブルクリックし、Oculus Configuration Utilityを起動する。
Oculus Configuration UtilityでTools -&amp;gt; Display ModeをExtend Desktop to the HMDにすると、 拡張デスクトップで画面が表示できる。
この時、縦横が逆になっていて表示がおかしい。 Windowsのデスクトップから解像度の設定を行いOculus Riftの画面設定で方向を正しく設定する。 また、解像度を1920x1080にする。
動作確認 Oculus VR shareで何かをダウンロードして動作を確認する。
動作させるまでは非常に簡単。 ただ3D酔いが結構あるなぁ。一本確認したら酔ってしまった。
参考資料  Oculus VR Oculus VR share Qiita: Oculus Rift DK2をセットアップする手順  </description>
    </item>
    
    <item>
      <title>Blenderで流体シミュレーション</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/blender/blenderfluidsimulation/</link>
      <pubDate>Wed, 06 May 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/blender/blenderfluidsimulation/</guid>
      <description>Blenderで流体シミュレーションを試した時のメモ。
概要 いろはメモ -Blender-: グラスに水を注いでみる 〈流体シミュレーション〉のページを参考に 流体シミュレーションの実験。
泥水ぶちまけてる感じだが、きちんとマテリアルとかテクスチャとか勉強してないから。 レンダリングについては後回し。 シミュレーションできることが分かったので良い。

Blender: GitHub: fluidSimulation
流体シミュレーションの準備 とりあえず液体を注ぐものを作成する。
法線方向を確認するためには、Edit modeでNキーで表示されるPropertiesから Mesh display -&amp;gt; Normals -&amp;gt; Display face normals as linesをONにする。

流体の注ぎ口を作成 UV球を作成する。(これが水の発生源になる。) 作成したUV球に物理演算から流体を設定する。

設定としては、以下の感じ。
 タイプ: 流入口 ボリュームの初期化: 両方 流入速度: 適当に注ぎたい方向へ向ける  いろはメモ -Blender-: グラスに水を注いでみる 〈流体シミュレーション〉によると、 各項目の説明は以下。
 【流体のタイプ】 コントロール(Control) ： 流体の形状を変形させるようコントロール。 パーティクル(Particle) ： 飛沫。しずく・浮かぶ泡・トレーサー（霧みたいなもの）の3タイプがある。 流入口(Inflow) ： 液体が出てくる。給水栓。 流出口(Outflow) ： 液体が吸収されてなくなる。排水口。流入口とセットで使うとよいみたい。 障害物(Obstacle) ： 障害物。表面の滑り方（粘つき）を、滑る・滑らない・部分的に滑るの3タイプから選ぶ。 液体(Fluid) ： そこにあるだけの液体。流入口のように生成はされない。 ドメイン(Domain) ： 液体シミュレーションの領域。必ず必要。</description>
    </item>
    
    <item>
      <title>Jekyllでサイト内検索(Googleカスタム検索)を入れる</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekyllsearch/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekyllsearch/</guid>
      <description> Jekyllでサイト内検索を作成するために、Googleカスタム検索を利用したのでメモ。 今のところ成功しておらず検索できない…。
⇒ Googleウェブマスターツールで処理してから、 一日程度ほったらかしにしといたら、きちんと全体のページから検索できるようになった。
たぶん結論 Googleカスタム検索を設定して、 Googleのウェブマスターツールでサイトマップを登録してあげると、たぶん検索できるようになる。 (検索できるようになるまでには、若干(1~数日程度)必要っぽい。
ウェブマスターツールのサイトマップも、登録後は勝手に更新されてる。
Googleカスタム検索を作成する Googleカスタム検索のページで、適当に検索したい検索クエリを作成する。
作成した検索クエリの&amp;rdquo;コードを取得&amp;rdquo;からHTMLに貼り付けるスクリプトを取得し、 default.htmlに記載しておく(別にここである必要はない)。
検索できるか試してみたができず…。
サイトマップを作成する とりあえず関連してそうなサイトマップなるものを作成する。 サイトマップは、検索エンジンに検索させるために必要らしい。 GitHub: Jekyll Plugin: Sitemap.sml Generatorを利用する。
config.ymlに以下を記述する。
url: https://iimuz.github.io sitemap: file: &amp;quot;/sitemap.xml&amp;quot; include_posts: - &amp;quot;/index.html&amp;quot; change_frequency_name: &amp;quot;change_frequency&amp;quot; priority_name: &amp;quot;priority&amp;quot;  やっぱり検索できない…。
Googleウェブマスターツールを利用する。 Google ウェブマスターツールのページからアクセスできるか確認したが、 データがありませんと表示される。 HELPには、しばらく待ってくださいとあったので、とりあえず放置してみる。
サイトマップを送信 とりあえずやってみた。
一部検索できるようになった! TOPページのみ検索可能になった。意味ないけどちょっと進歩。 なぜ下位のページが検索されないのか、こっちが本題なのに。
検索式を変更 検索式を正規表現っぽくiimuz.github.io/*に変更してみた。
参考資料  takemikami&amp;rsquo;s note: blog用にjekyllを設定したメモ Googleカスタム検索 GitHub: Jekyll Plugin: Sitemap.sml Generator Google ウェブマスターツール  </description>
    </item>
    
    <item>
      <title>UnityとBlenderハンズオンの第3章を進めてみる</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/blender/shizuokadevunityandblender03/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/blender/shizuokadevunityandblender03/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://yaju3d.hatenablog.jp/entry/2015/04/07/015641&#34;&gt;静岡Developers勉強会の「UnityとBlenderハンズオン第3章」の資料公開&lt;/a&gt;
に沿って進めてみる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>サイクルコンピュータの買い替え</title>
      <link>http://iimuz.github.io/scrapbook/hardware/others/cyclocomputer/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/hardware/others/cyclocomputer/</guid>
      <description>自転車のサイクルコンピュータが壊れたので買い替える時のメモ。
条件 現在探しているのは、以下のような条件。
 一般的な速度などが測れれば良い。
ケイデンスとかまではいらない。 スマホ連携がほしい。
データを取り出して、その記録をどっかに残すことが簡易にできればそれでいい。 プラスアルファとしてGPSでコースを記録しておいてくれると尚よい。  比較 高すぎて手が出せないパターンは除外している。
 (外部センサーと表示部) CATEYE: マイクロワイヤレス = \4,377 (外部センサーとスマホのみ) センサー CATEYE ICS-12 + スマホホルダー SPA-HB10 = 6,048 + 3,770 = \9,818 (外部センサーとスマホのみ) センサー Wahoo Fitness + スマホホルダー SPA-HB10 = 7,091 + 3,770 = \10,861 (外部センサーとサイコンとスマホ) センサー CATEYE ICS-12 + SMART STRADA + スマホホルダー SPA-HB10 = 6,048 + 6,690 + 3,770 = \16,508 (上のパターンをCAT EYEで一括パッケージ買いの場合) = 12,092 + 3,770 = \15,862 (外部センサーとサイコンとスマホ) センサー Wahoo Fitness + SMART STRADA + スマホホルダー SPA-HB10 = 7,091 + 6,048 + 3,770 = \16,639 (外部センサーとサイコンとスマホ) センサー Wahoo Fitness + Wahoo RFLKT + スマホホルダー SPA-HB10 = 7,091 + 14,000 + 3,770 = \24,861  結論 センサー CATEYE ICS-12 + スマホホルダー SPA-HB10</description>
    </item>
    
    <item>
      <title>Minecraftで侵略mod</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/minecraft/minecraftinvasionmod/</link>
      <pubDate>Sat, 02 May 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/minecraft/minecraftinvasionmod/</guid>
      <description>Minecraft1.7.10で侵略mod環境を構築する。
導入mod  Forge Optifine Shaders mod(updated by karyonix) Sonic Ether&amp;rsquo;s Unbelievable Shaders v10.1 Invasion Mod - So you think your base is tough? NotEnoughItems Waila 1.5.7 for 1.7.10 / 1.6.0 for 1.8.1 Rei’s Minimap Mod 1.7.10, 1.7.2, 1.6.4 and 1.5.2 一括破壊系MOD＋α FLAN&amp;rsquo;S MOD  Modern Weapons Pack World War Two Pack  LittleMaidMob Ver0.0.8 &amp;amp; 座布団 3/17更新 Millenaire THE CHOCOLATE QUEST WIKI SpawnChecker (Mobが湧くかをチェックするMOD) 1.7.2~1.8ネザースターが作れるようになったりするMODなど  導入手順 前準備 Minecraft 1.</description>
    </item>
    
    <item>
      <title>Oculus Rift DK2を注文した</title>
      <link>http://iimuz.github.io/scrapbook/hardware/others/oculusriftdk2/</link>
      <pubDate>Sat, 02 May 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/hardware/others/oculusriftdk2/</guid>
      <description>Oculus Rift DK2を注文したので、その経過をメモ。
⇒到着済み(2015.05.09)
現状ステータス  2015/5/9: 受け取り完了。 2015/5/7: 一度配達されていることを確認。 2015/5/6: 日本に到着(FedExのログで確認)。  注文の流れ(2015/5/2) Oculus VRのページが日本語に対応しているので非常に簡単。 購入のページから一通り流されるままに記入して、支払うだけ。 以下のページの左上の購入から進む。
 Oculus VR  全部半角英数字での入力が必要となる。 英語表記だと県とか市とかどう表現するのが適切知らないので、全部日本語表記(Tokyotoなど)する。 ContryのみJapanとしておけば、日本にたどり着いてからは日本語が読める人が対応するはずだし、 そうすればローマ字表記は読めるはず。
注文が成功すれば、入力したメールアドレスに&amp;rdquo;注文ありがとう&amp;rdquo;といったメールが来る。
 Oculus VR: ご注文ありがとうございます / ご注文番号 [xxxxxxxx]
Thanks for your pre-order!
 確認と発送(2015/5/4) 発送が開始されてカードで請求できたら、以下のメールが来た。
 Oculus VR: Payment received for your pre-order
You&amp;rsquo;re receiving this email because your Oculus Order xxxxx is about to ship, and we&amp;rsquo;ve charged the remaining balance to the credit card on file.</description>
    </item>
    
    <item>
      <title>UnityとBlenderハンズオンの第2章を進めてみる</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/blender/shizuokadevunityandblender02/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/blender/shizuokadevunityandblender02/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://yaju3d.hatenablog.jp/entry/2015/03/09/020956&#34;&gt;静岡Developers勉強会の「UnityとBlenderハンズオン第2章」の資料公開&lt;/a&gt;
に沿って進めてみる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UnityとBlenderハンズオンの第1章を進めてみる</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/blender/shizuokadevunityandblender01/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/blender/shizuokadevunityandblender01/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/yaju88/unityblender1&#34;&gt;静岡Developers勉強会: UnityとBlenderハンズオン 第1章&lt;/a&gt;
でUnityとBlenderの使い方を勉強する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>色々なリンク(素材集など)</title>
      <link>http://iimuz.github.io/scrapbook/others/materialslink/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/others/materialslink/</guid>
      <description>&lt;p&gt;素材集など、何度も繰り返し利用するようなリンク集。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity導入</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/unitytutorial/</link>
      <pubDate>Sun, 26 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/unitytutorial/</guid>
      <description>&lt;p&gt;Unityの環境を構築するまで。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BlenderでPythonスクリプトを利用する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/blender/blenderpythonscript/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/blender/blenderpythonscript/</guid>
      <description>&lt;p&gt;BlenderでPythonを利用する。
ついでに、Blenderの物理シミュレーションをpythonで作成する。
作ったデータ: &lt;a href=&#34;https://github.com/iimuz/blenderTutorials/tree/develop/cubePhysicsEngine&#34;&gt;github: iimuz/blenderTutorials/cubePhysicsEngine&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blenderコマンドの備忘録</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/blender/blendersetting/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/blender/blendersetting/</guid>
      <description>&lt;p&gt;Blenderでのコマンド備忘録&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHubにSSHを利用して接続する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/githubssh/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/githubssh/</guid>
      <description>&lt;p&gt;GitHubのアクセスに毎回パスワードを利用してpushするのがめんどくさいので、
sshキーを利用してアクセスする方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Photosの画像URLを原画像サイズで取得する方法</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/others/googlephotslink/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/others/googlephotslink/</guid>
      <description>&lt;p&gt;Google Photosの画像をJekyllで貼り付ける際に、
画像サイズが勝手にリサイズされて小さくなっていたので、
原画像サイズで取得して貼り付ける方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jekyll Tips</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekylltips/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekylltips/</guid>
      <description>&lt;p&gt;JekyllのTips。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bashコマンド</title>
      <link>http://iimuz.github.io/scrapbook/programming/bash/bashcommand/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/bash/bashcommand/</guid>
      <description> bash コマンドの備忘録。
 再帰 ls: find -type f ディレクトリ以下の再帰で指定したファイルを削除する: rm $(find -type f | grep hoge); ntp を使わず http で時刻合わせ: sudo date --set @&amp;quot;$(wget -q https://ntp-a1.nict.go.jp/cgi-bin/jst -O - | sed -n 4p | cut -d. -f1)&amp;quot;  参考資料  俺的備忘録 ~なんかいろいろ~: ls コマンドで覚えておきたい使い方 16 個(+2 個) ntp を使わずに時刻を合わせるワンライナー（Proxy 環境下でも安心）  </description>
    </item>
    
    <item>
      <title>vimがun~ファイルを作るようになった</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/vim/vimunfile/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/vim/vimunfile/</guid>
      <description>&lt;p&gt;vimがun~ファイルを作成するようになったので、
un~ファイルを一か所にまとめる方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jekyllで&#39;続きを読む&#39;機能を導入</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekyllmorepost/</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekyllmorepost/</guid>
      <description>&lt;p&gt;最初のページに続きを読む機能を導入する方法。
要は、↓のような機能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jekyllのページネーション</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekyllpaginate/</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekyllpaginate/</guid>
      <description>&lt;p&gt;Jekyllのページネーション機能を有効にする方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gitのコマンド備忘録</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/gitcommand/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/gitcommand/</guid>
      <description>&lt;p&gt;gitのコマンドをよく忘れるので、利用するときに調べたらここに記載する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minecraft DQM IVの導入</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/minecraft/minecraftdqm4/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/minecraft/minecraftdqm4/</guid>
      <description>&lt;p&gt;MinecraftでDQM4 modを導入したときにやったこと。
DQM4 modとは、&lt;a href=&#34;http://dqm4mod.wix.com/home&#34;&gt;Minecraft DQM IV&lt;/a&gt;のこと。
重要そうなページは、以下の4つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dqm4mod.wix.com/home&#34;&gt;Minecraft DQM IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://forum.minecraftuser.jp/viewtopic.php?f=13&amp;amp;t=13684&amp;amp;view=viewpoll&#34;&gt;マインクラフト 非公式日本ユーザーフォーラム: DQM IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://seesaawiki.jp/dqm4mod/&#34;&gt;Minecraft ドラクエMOD DQM4mod 攻略wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mc-dqm4.xii.jp/&#34;&gt;Minecraft MOD DQM4 wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Jekyllにタグクラウドをつける</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekylltagcloud/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekylltagcloud/</guid>
      <description>&lt;p&gt;Jekyllでタグクラウドを作成し、一覧を表示するために調べたことのまとめ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jekyllにプラグンインを導入する</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekyllplugins/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/jekyll/jekyllplugins/</guid>
      <description>&lt;p&gt;Jekyllで作成したデータをGitHub Pagesにpushする方法が自動化できたので、
プラグインをいくつか導入する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown記法について</title>
      <link>http://iimuz.github.io/scrapbook/programming/markdown/markdown/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/programming/markdown/markdown/</guid>
      <description>&lt;p&gt;Markdownで書く上で調べたことのまとめ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jekyllでファイルを生成してGitHub Pagesにpush</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/gitpagesandjekyll/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/gitpagesandjekyll/</guid>
      <description>&lt;p&gt;GitHub PagesにそのままpushしてJekyllの変換を利用していると
plugin系が使えないらしいので、
ローカルのJekyllでファイルを作成してGitHub Pagesにpushするまでのメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blenderの練習 000</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/blender/blender/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/blender/blender/</guid>
      <description>&lt;h2 id=&#34;目標&#34;&gt;目標&lt;/h2&gt;

&lt;p&gt;とりあえず一週間位(実質初版完成まで2、3日)で、
結婚式の余興のためにアニメーションを作成する必要がある。
前回は、Adobe After Effects(?)で作成したが体験版の期間が終わったので、
利用できなくなった。
そこで、今回はBlenderのみでアニメーション作成したい。
作りたいイメージは、以下のような感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wtKILj--9XY&amp;amp;feature=youtu.be&#34;&gt;Motion graphics line performance in Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dUB5gH41Qg0&amp;amp;feature=youtu.be&#34;&gt;映画風オープニングムービー・動画制作・動画素材・タイトル動画 0019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hriQaGUAJLU&amp;amp;feature=youtu.be&#34;&gt;『SMAP LIVE Opening』1991&amp;rsquo;97&amp;rsquo;98&amp;rsquo;99&amp;rsquo;00&amp;rsquo;01&amp;rsquo;02&amp;rsquo;03&amp;rsquo;05&amp;rsquo;06&amp;rsquo;08&amp;rsquo;10&amp;rsquo;12&amp;rsquo;ver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Gitでyou are not humanと言われたら</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/git/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/git/</guid>
      <description>&lt;h2 id=&#34;you-are-not-human&#34;&gt;You are not human&lt;/h2&gt;

&lt;p&gt;GistBoxに登録して色々してたら、突然Gitに&lt;strong&gt;人間ではありません&lt;/strong&gt;と言われてしまった。
原因は、GitsBoxから何度も消したり書いたりしたせいかもしれない。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git Pagesを使ってMarkdownでメモする環境構築</title>
      <link>http://iimuz.github.io/scrapbook/softwaretool/git/gitpages/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/softwaretool/git/gitpages/</guid>
      <description>&lt;h2 id=&#34;後で調べる&#34;&gt;後で調べる&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;簡単な検索できない?

&lt;ul&gt;
&lt;li&gt;Googleカスタム検索?&lt;br /&gt;
⇒TOPのindex.htmlのみは検索に成功。それ以外ができない…。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ページの作成日だけでなく、更新日を自動でつけられない?&lt;/li&gt;
&lt;li&gt;postした別のメモへのリンクは貼れないの?&lt;br /&gt;
⇒サイトの構成さえ知っていれば付けれなくはないが、どっかで置換したほうが確実な気がする。&lt;/li&gt;
&lt;li&gt;タグのところに記事の件数を追加できない?&lt;/li&gt;
&lt;li&gt;引用の文字が巨大すぎるんだけど直せないか?&lt;/li&gt;
&lt;li&gt;文章書くなら字下げがないと体裁が変な気がする。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://iimuz.github.io/scrapbook/_footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://iimuz.github.io/scrapbook/_footer/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>